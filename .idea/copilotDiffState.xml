<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/client/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1&quot; /&gt;&#10;    &lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.googleapis.com&quot;&gt;&#10;    &lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot; crossorigin&gt;&#10;    &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Architects+Daughter&amp;family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&amp;family=Fira+Code:wght@300..700&amp;family=Geist+Mono:wght@100..900&amp;family=Geist:wght@100..900&amp;family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&amp;family=IBM+Plex+Sans:ital,wght@0,100..700;1,100..700&amp;family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&amp;family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&amp;family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&amp;family=Lora:ital,wght@0,400..700;1,400..700&amp;family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&amp;family=Montserrat:ital,wght@0,100..900;1,100..900&amp;family=Open+Sans:ital,wght@0,300..800;1,300..800&amp;family=Outfit:wght@100..900&amp;family=Oxanium:wght@200..800&amp;family=Playfair+Display:ital,wght@0,400..900;1,400..900&amp;family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&amp;family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;family=Roboto+Mono:ital,wght@0,100..700;1,100..700&amp;family=Roboto:ital,wght@0,100..900;1,100..900&amp;family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&amp;family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&amp;family=Space+Grotesk:wght@300..700&amp;family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;/head&gt;&#10;  &lt;body&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/src/main.tsx&quot;&gt;&lt;/script&gt;&#10;    &lt;!-- This is a replit script which adds a banner on the top of the page when opened in development mode outside the replit environment --&gt;&#10;    &lt;script type=&quot;text/javascript&quot; src=&quot;https://replit.com/public/js/replit-dev-banner.js&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;  &lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot; /&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1&quot; /&gt;&#10;    &lt;title&gt;AgroConnect Ghana - Farm Marketplace&lt;/title&gt;&#10;    &lt;meta name=&quot;description&quot; content=&quot;Connect farmers and buyers across Ghana. Buy fresh produce, farm tools, and agricultural supplies directly from local farmers.&quot;&gt;&#10;    &#10;    &lt;!-- Favicon --&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/favicon.svg&quot;&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;32x32&quot; href=&quot;/favicon.svg&quot;&gt;&#10;    &lt;link rel=&quot;icon&quot; type=&quot;image/png&quot; sizes=&quot;16x16&quot; href=&quot;/favicon.svg&quot;&gt;&#10;    &#10;    &lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.googleapis.com&quot;&gt;&#10;    &lt;link rel=&quot;preconnect&quot; href=&quot;https://fonts.gstatic.com&quot; crossorigin&gt;&#10;    &lt;link href=&quot;https://fonts.googleapis.com/css2?family=Architects+Daughter&amp;family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&amp;family=Fira+Code:wght@300..700&amp;family=Geist+Mono:wght@100..900&amp;family=Geist:wght@100..900&amp;family=IBM+Plex+Mono:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&amp;family=IBM+Plex+Sans:ital,wght@0,100..700;1,100..700&amp;family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&amp;family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&amp;family=Libre+Baskerville:ital,wght@0,400;0,700;1,400&amp;family=Lora:ital,wght@0,400..700;1,400..700&amp;family=Merriweather:ital,opsz,wght@0,18..144,300..900;1,18..144,300..900&amp;family=Montserrat:ital,wght@0,100..900;1,100..900&amp;family=Open+Sans:ital,wght@0,300..800;1,300..800&amp;family=Outfit:wght@100..900&amp;family=Oxanium:wght@200..800&amp;family=Playfair+Display:ital,wght@0,400..900;1,400..900&amp;family=Plus+Jakarta+Sans:ital,wght@0,200..800;1,200..800&amp;family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&amp;family=Roboto+Mono:ital,wght@0,100..700;1,100..700&amp;family=Roboto:ital,wght@0,100..900;1,100..900&amp;family=Source+Code+Pro:ital,wght@0,200..900;1,200..900&amp;family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&amp;family=Space+Grotesk:wght@300..700&amp;family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&amp;display=swap&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;/head&gt;&#10;  &lt;body&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;module&quot; src=&quot;/src/main.tsx&quot;&gt;&lt;/script&gt;&#10;    &lt;!-- This is a replit script which adds a banner on the top of the page when opened in development mode outside the replit environment --&gt;&#10;    &lt;script type=&quot;text/javascript&quot; src=&quot;https://replit.com/public/js/replit-dev-banner.js&quot;&gt;&lt;/script&gt;&#10;  &lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/public/favicon.svg">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/public/favicon.svg" />
              <option name="updatedContent" value="&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; viewBox=&quot;0 0 32 32&quot; width=&quot;32&quot; height=&quot;32&quot;&gt;&#10;  &lt;rect width=&quot;32&quot; height=&quot;32&quot; fill=&quot;#22c55e&quot; rx=&quot;6&quot;/&gt;&#10;  &lt;path d=&quot;M8 20h16v2H8zm4-12v8l4-3 4 3v-8h2v10l-6-4.5L10 18V8z&quot; fill=&quot;white&quot;/&gt;&#10;  &lt;circle cx=&quot;16&quot; cy=&quot;12&quot; r=&quot;1.5&quot; fill=&quot;#22c55e&quot;/&gt;&#10;&lt;/svg&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/components/agroconnect-logo.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/components/agroconnect-logo.tsx" />
              <option name="updatedContent" value="export function AgroConnectLogo({ className = &quot;w-12 h-12&quot; }: { className?: string }) {&#10;  return (&#10;    &lt;svg&#10;      viewBox=&quot;0 0 100 100&quot;&#10;      className={className}&#10;      xmlns=&quot;http://www.w3.org/2000/svg&quot;&#10;    &gt;&#10;      {/* Background circle */}&#10;      &lt;circle cx=&quot;50&quot; cy=&quot;50&quot; r=&quot;48&quot; fill=&quot;#166534&quot; stroke=&quot;#15803d&quot; strokeWidth=&quot;2&quot;/&gt;&#10;      &#10;      {/* Leaf design */}&#10;      &lt;path&#10;        d=&quot;M30 60 Q35 45 50 50 Q65 45 70 60 Q65 75 50 70 Q35 75 30 60 Z&quot;&#10;        fill=&quot;#22c55e&quot;&#10;      /&gt;&#10;      &#10;      {/* Stem */}&#10;      &lt;path&#10;        d=&quot;M50 70 L50 85&quot;&#10;        stroke=&quot;#15803d&quot;&#10;        strokeWidth=&quot;3&quot;&#10;        strokeLinecap=&quot;round&quot;&#10;      /&gt;&#10;      &#10;      {/* Small leaves */}&#10;      &lt;path&#10;        d=&quot;M45 75 Q40 70 45 68 Q50 70 45 75&quot;&#10;        fill=&quot;#16a34a&quot;&#10;      /&gt;&#10;      &lt;path&#10;        d=&quot;M55 75 Q60 70 55 68 Q50 70 55 75&quot;&#10;        fill=&quot;#16a34a&quot;&#10;      /&gt;&#10;      &#10;      {/* Center highlight */}&#10;      &lt;ellipse cx=&quot;50&quot; cy=&quot;55&quot; rx=&quot;8&quot; ry=&quot;12&quot; fill=&quot;#34d399&quot; opacity=&quot;0.6&quot;/&gt;&#10;    &lt;/svg&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/components/auth-modal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/components/auth-modal.tsx" />
              <option name="originalContent" value="import { useState } from 'react';&#10;import { useAuth } from '@/lib/auth';&#10;import { useForm } from 'react-hook-form';&#10;import { zodResolver } from '@hookform/resolvers/zod';&#10;import { insertUserSchema } from '@shared/schema';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';&#10;import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';&#10;import { useToast } from '@/hooks/use-toast';&#10;import { z } from 'zod';&#10;import { X } from 'lucide-react';&#10;&#10;interface AuthModalProps {&#10;  isOpen?: boolean;&#10;  onClose: () =&gt; void;&#10;  mode?: 'login' | 'register';&#10;  onModeChange?: (mode: 'login' | 'register') =&gt; void;&#10;}&#10;&#10;const loginSchema = z.object({&#10;  email: z.string().email('Invalid email address'),&#10;  password: z.string().min(6, 'Password must be at least 6 characters'),&#10;});&#10;&#10;const registerSchema = insertUserSchema.extend({&#10;  confirmPassword: z.string(),&#10;}).refine((data) =&gt; data.password === data.confirmPassword, {&#10;  message: &quot;Passwords don't match&quot;,&#10;  path: [&quot;confirmPassword&quot;],&#10;});&#10;&#10;type LoginFormData = z.infer&lt;typeof loginSchema&gt;;&#10;type RegisterFormData = z.infer&lt;typeof registerSchema&gt;;&#10;&#10;export function AuthModal({ isOpen = true, onClose, mode = 'login', onModeChange }: AuthModalProps) {&#10;  const [activeTab, setActiveTab] = useState&lt;'login' | 'register'&gt;(mode);&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const { login, register } = useAuth();&#10;  const { toast } = useToast();&#10;&#10;  // Update activeTab when mode prop changes&#10;  useState(() =&gt; {&#10;    setActiveTab(mode);&#10;  }, [mode]);&#10;&#10;  const handleTabChange = (newTab: 'login' | 'register') =&gt; {&#10;    setActiveTab(newTab);&#10;    onModeChange?.(newTab);&#10;  };&#10;&#10;  const loginForm = useForm&lt;LoginFormData&gt;({&#10;    resolver: zodResolver(loginSchema),&#10;    defaultValues: {&#10;      email: '',&#10;      password: '',&#10;    },&#10;  });&#10;&#10;  const registerForm = useForm&lt;RegisterFormData&gt;({&#10;    resolver: zodResolver(registerSchema),&#10;    defaultValues: {&#10;      email: '',&#10;      password: '',&#10;      confirmPassword: '',&#10;      firstName: '',&#10;      lastName: '',&#10;      accountType: 'buyer',&#10;      location: '',&#10;      phone: '',&#10;    },&#10;  });&#10;&#10;  const handleLogin = async (data: LoginFormData) =&gt; {&#10;    setIsLoading(true);&#10;    try {&#10;      await login(data.email, data.password);&#10;      toast({&#10;        title: &quot;Welcome back!&quot;,&#10;        description: &quot;You have been successfully logged in.&quot;,&#10;      });&#10;      onClose();&#10;    } catch (error: any) {&#10;      toast({&#10;        title: &quot;Login failed&quot;,&#10;        description: error.message || &quot;Invalid credentials. Please try again.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleRegister = async (data: RegisterFormData) =&gt; {&#10;    setIsLoading(true);&#10;    try {&#10;      const { confirmPassword, ...userData } = data;&#10;      await register(userData);&#10;      toast({&#10;        title: &quot;Account created!&quot;,&#10;        description: &quot;Your account has been successfully created.&quot;,&#10;      });&#10;      onClose();&#10;    } catch (error: any) {&#10;      toast({&#10;        title: &quot;Registration failed&quot;,&#10;        description: error.message || &quot;Please check your information and try again.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;Dialog open={isOpen} onOpenChange={(open) =&gt; !open &amp;&amp; onClose()}&gt;&#10;      &lt;DialogContent className=&quot;sm:max-w-md&quot; data-testid=&quot;auth-modal&quot;&gt;&#10;        &lt;DialogHeader&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;DialogTitle className=&quot;text-2xl font-bold text-dark-green&quot;&gt;&#10;              {activeTab === 'login' ? 'Welcome Back' : 'Create Account'}&#10;            &lt;/DialogTitle&gt;&#10;            &lt;Button&#10;              variant=&quot;ghost&quot;&#10;              size=&quot;sm&quot;&#10;              onClick={onClose}&#10;              data-testid=&quot;close-modal&quot;&#10;              className=&quot;hover:bg-gray-100&quot;&#10;            &gt;&#10;              &lt;X className=&quot;w-4 h-4&quot; /&gt;&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        {/* Tab Switcher */}&#10;        &lt;div className=&quot;flex mb-6 bg-gray-100 rounded-lg p-1&quot;&gt;&#10;          &lt;button&#10;            className={`flex-1 py-2 text-center font-medium rounded-md transition-all ${&#10;              activeTab === 'login' ? 'bg-white shadow-sm text-green-700' : 'text-gray-600 hover:bg-white hover:shadow-sm'&#10;            }`}&#10;            onClick={() =&gt; handleTabChange('login')}&#10;            data-testid=&quot;login-tab&quot;&#10;          &gt;&#10;            Login&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            className={`flex-1 py-2 text-center font-medium rounded-md transition-all ${&#10;              activeTab === 'register' ? 'bg-white shadow-sm text-green-700' : 'text-gray-600 hover:bg-white hover:shadow-sm'&#10;            }`}&#10;            onClick={() =&gt; handleTabChange('register')}&#10;            data-testid=&quot;register-tab&quot;&#10;          &gt;&#10;            Register&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Login Form */}&#10;        {activeTab === 'login' &amp;&amp; (&#10;          &lt;Form {...loginForm}&gt;&#10;            &lt;form onSubmit={loginForm.handleSubmit(handleLogin)} className=&quot;space-y-4&quot; data-testid=&quot;login-form&quot;&gt;&#10;              &lt;FormField&#10;                control={loginForm.control}&#10;                name=&quot;email&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Email Address&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input&#10;                        type=&quot;email&quot;&#10;                        placeholder=&quot;Enter your email&quot;&#10;                        {...field}&#10;                        data-testid=&quot;login-email&quot;&#10;                      /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={loginForm.control}&#10;                name=&quot;password&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Password&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input&#10;                        type=&quot;password&quot;&#10;                        placeholder=&quot;Enter your password&quot;&#10;                        {...field}&#10;                        data-testid=&quot;login-password&quot;&#10;                      /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;Button &#10;                type=&quot;submit&quot; &#10;                className=&quot;w-full bg-forest-green text-white hover:bg-forest-green/90&quot;&#10;                disabled={isLoading}&#10;                data-testid=&quot;login-submit&quot;&#10;              &gt;&#10;                {isLoading ? 'Signing In...' : 'Sign In'}&#10;              &lt;/Button&gt;&#10;            &lt;/form&gt;&#10;          &lt;/Form&gt;&#10;        )}&#10;&#10;        {/* Register Form */}&#10;        {activeTab === 'register' &amp;&amp; (&#10;          &lt;Form {...registerForm}&gt;&#10;            &lt;form onSubmit={registerForm.handleSubmit(handleRegister)} className=&quot;space-y-4&quot; data-testid=&quot;register-form&quot;&gt;&#10;              &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                &lt;FormField&#10;                  control={registerForm.control}&#10;                  name=&quot;firstName&quot;&#10;                  render={({ field }) =&gt; (&#10;                    &lt;FormItem&gt;&#10;                      &lt;FormLabel&gt;First Name&lt;/FormLabel&gt;&#10;                      &lt;FormControl&gt;&#10;                        &lt;Input placeholder=&quot;First name&quot; {...field} data-testid=&quot;register-firstName&quot; /&gt;&#10;                      &lt;/FormControl&gt;&#10;                      &lt;FormMessage /&gt;&#10;                    &lt;/FormItem&gt;&#10;                  )}&#10;                /&gt;&#10;                &lt;FormField&#10;                  control={registerForm.control}&#10;                  name=&quot;lastName&quot;&#10;                  render={({ field }) =&gt; (&#10;                    &lt;FormItem&gt;&#10;                      &lt;FormLabel&gt;Last Name&lt;/FormLabel&gt;&#10;                      &lt;FormControl&gt;&#10;                        &lt;Input placeholder=&quot;Last name&quot; {...field} data-testid=&quot;register-lastName&quot; /&gt;&#10;                      &lt;/FormControl&gt;&#10;                      &lt;FormMessage /&gt;&#10;                    &lt;/FormItem&gt;&#10;                  )}&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;email&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Email Address&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input&#10;                        type=&quot;email&quot;&#10;                        placeholder=&quot;Enter your email&quot;&#10;                        {...field}&#10;                        data-testid=&quot;register-email&quot;&#10;                      /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;accountType&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Account Type&lt;/FormLabel&gt;&#10;                    &lt;Select onValueChange={field.onChange} defaultValue={field.value}&gt;&#10;                      &lt;FormControl&gt;&#10;                        &lt;SelectTrigger data-testid=&quot;register-accountType&quot;&gt;&#10;                          &lt;SelectValue placeholder=&quot;Select account type&quot; /&gt;&#10;                        &lt;/SelectTrigger&gt;&#10;                      &lt;/FormControl&gt;&#10;                      &lt;SelectContent&gt;&#10;                        &lt;SelectItem value=&quot;farmer&quot;&gt;Farmer/Seller&lt;/SelectItem&gt;&#10;                        &lt;SelectItem value=&quot;buyer&quot;&gt;Buyer&lt;/SelectItem&gt;&#10;                      &lt;/SelectContent&gt;&#10;                    &lt;/Select&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;location&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Location (Optional)&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input placeholder=&quot;City, Region&quot; {...field} value={field.value || ''} data-testid=&quot;register-location&quot; /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;phone&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Phone (Optional)&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input placeholder=&quot;+233 XX XXX XXXX&quot; {...field} value={field.value || ''} data-testid=&quot;register-phone&quot; /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;password&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Password&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input&#10;                        type=&quot;password&quot;&#10;                        placeholder=&quot;Create password&quot;&#10;                        {...field}&#10;                        data-testid=&quot;register-password&quot;&#10;                      /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;confirmPassword&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Confirm Password&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input&#10;                        type=&quot;password&quot;&#10;                        placeholder=&quot;Confirm password&quot;&#10;                        {...field}&#10;                        data-testid=&quot;register-confirmPassword&quot;&#10;                      /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;Button &#10;                type=&quot;submit&quot; &#10;                className=&quot;w-full bg-forest-green text-white hover:bg-forest-green/90&quot;&#10;                disabled={isLoading}&#10;                data-testid=&quot;register-submit&quot;&#10;              &gt;&#10;                {isLoading ? 'Creating Account...' : 'Create Account'}&#10;              &lt;/Button&gt;&#10;            &lt;/form&gt;&#10;          &lt;/Form&gt;&#10;        )}&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useState } from 'react';&#10;import { useAuth } from '@/lib/auth';&#10;import { useForm } from 'react-hook-form';&#10;import { zodResolver } from '@hookform/resolvers/zod';&#10;import { insertUserSchema } from '@shared/schema';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';&#10;import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';&#10;import { useToast } from '@/hooks/use-toast';&#10;import { z } from 'zod';&#10;import { X } from 'lucide-react';&#10;&#10;interface AuthModalProps {&#10;  isOpen?: boolean;&#10;  onClose: () =&gt; void;&#10;  mode?: 'login' | 'register';&#10;  onModeChange?: (mode: 'login' | 'register') =&gt; void;&#10;}&#10;&#10;const loginSchema = z.object({&#10;  email: z.string().email('Invalid email address'),&#10;  password: z.string().min(6, 'Password must be at least 6 characters'),&#10;});&#10;&#10;const registerSchema = insertUserSchema.extend({&#10;  confirmPassword: z.string(),&#10;}).refine((data) =&gt; data.password === data.confirmPassword, {&#10;  message: &quot;Passwords don't match&quot;,&#10;  path: [&quot;confirmPassword&quot;],&#10;});&#10;&#10;type LoginFormData = z.infer&lt;typeof loginSchema&gt;;&#10;type RegisterFormData = z.infer&lt;typeof registerSchema&gt;;&#10;&#10;export function AuthModal({ isOpen = true, onClose, mode = 'login', onModeChange }: AuthModalProps) {&#10;  const [activeTab, setActiveTab] = useState&lt;'login' | 'register'&gt;(mode);&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const { login, register } = useAuth();&#10;  const { toast } = useToast();&#10;&#10;  // Update activeTab when mode prop changes&#10;  useState(() =&gt; {&#10;    setActiveTab(mode);&#10;  }, [mode]);&#10;&#10;  const handleTabChange = (newTab: 'login' | 'register') =&gt; {&#10;    setActiveTab(newTab);&#10;    onModeChange?.(newTab);&#10;  };&#10;&#10;  const loginForm = useForm&lt;LoginFormData&gt;({&#10;    resolver: zodResolver(loginSchema),&#10;    defaultValues: {&#10;      email: '',&#10;      password: '',&#10;    },&#10;  });&#10;&#10;  const registerForm = useForm&lt;RegisterFormData&gt;({&#10;    resolver: zodResolver(registerSchema),&#10;    defaultValues: {&#10;      email: '',&#10;      password: '',&#10;      confirmPassword: '',&#10;      name: '',&#10;      location: '',&#10;      phone: '',&#10;    },&#10;  });&#10;&#10;  const handleLogin = async (data: LoginFormData) =&gt; {&#10;    setIsLoading(true);&#10;    try {&#10;      await login(data.email, data.password);&#10;      toast({&#10;        title: &quot;Welcome back!&quot;,&#10;        description: &quot;You have been successfully logged in.&quot;,&#10;      });&#10;      onClose();&#10;    } catch (error: any) {&#10;      toast({&#10;        title: &quot;Login failed&quot;,&#10;        description: error.message || &quot;Invalid credentials. Please try again.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  const handleRegister = async (data: RegisterFormData) =&gt; {&#10;    setIsLoading(true);&#10;    try {&#10;      const { confirmPassword, ...userData } = data;&#10;      await register(userData);&#10;      toast({&#10;        title: &quot;Account created!&quot;,&#10;        description: &quot;Your account has been successfully created.&quot;,&#10;      });&#10;      onClose();&#10;    } catch (error: any) {&#10;      toast({&#10;        title: &quot;Registration failed&quot;,&#10;        description: error.message || &quot;Please check your information and try again.&quot;,&#10;        variant: &quot;destructive&quot;,&#10;      });&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;Dialog open={isOpen} onOpenChange={(open) =&gt; !open &amp;&amp; onClose()}&gt;&#10;      &lt;DialogContent className=&quot;sm:max-w-md&quot; data-testid=&quot;auth-modal&quot;&gt;&#10;        &lt;DialogHeader&gt;&#10;          &lt;DialogTitle className=&quot;text-2xl font-bold text-dark-green&quot;&gt;&#10;            {activeTab === 'login' ? 'Welcome Back' : 'Create Account'}&#10;          &lt;/DialogTitle&gt;&#10;        &lt;/DialogHeader&gt;&#10;&#10;        {/* Tab Switcher */}&#10;        &lt;div className=&quot;flex mb-6 bg-gray-100 rounded-lg p-1&quot;&gt;&#10;          &lt;button&#10;            className={`flex-1 py-2 text-center font-medium rounded-md transition-all ${&#10;              activeTab === 'login' ? 'bg-white shadow-sm text-green-700' : 'text-gray-600 hover:bg-white hover:shadow-sm'&#10;            }`}&#10;            onClick={() =&gt; handleTabChange('login')}&#10;            data-testid=&quot;login-tab&quot;&#10;          &gt;&#10;            Login&#10;          &lt;/button&gt;&#10;          &lt;button&#10;            className={`flex-1 py-2 text-center font-medium rounded-md transition-all ${&#10;              activeTab === 'register' ? 'bg-white shadow-sm text-green-700' : 'text-gray-600 hover:bg-white hover:shadow-sm'&#10;            }`}&#10;            onClick={() =&gt; handleTabChange('register')}&#10;            data-testid=&quot;register-tab&quot;&#10;          &gt;&#10;            Register&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Login Form */}&#10;        {activeTab === 'login' &amp;&amp; (&#10;          &lt;Form {...loginForm}&gt;&#10;            &lt;form onSubmit={loginForm.handleSubmit(handleLogin)} className=&quot;space-y-4&quot; data-testid=&quot;login-form&quot;&gt;&#10;              &lt;FormField&#10;                control={loginForm.control}&#10;                name=&quot;email&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Email Address&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input&#10;                        type=&quot;email&quot;&#10;                        placeholder=&quot;Enter your email&quot;&#10;                        {...field}&#10;                        data-testid=&quot;login-email&quot;&#10;                      /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={loginForm.control}&#10;                name=&quot;password&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Password&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input&#10;                        type=&quot;password&quot;&#10;                        placeholder=&quot;Enter your password&quot;&#10;                        {...field}&#10;                        data-testid=&quot;login-password&quot;&#10;                      /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;Button &#10;                type=&quot;submit&quot; &#10;                className=&quot;w-full bg-forest-green text-white hover:bg-forest-green/90&quot;&#10;                disabled={isLoading}&#10;                data-testid=&quot;login-submit&quot;&#10;              &gt;&#10;                {isLoading ? 'Signing In...' : 'Sign In'}&#10;              &lt;/Button&gt;&#10;            &lt;/form&gt;&#10;          &lt;/Form&gt;&#10;        )}&#10;&#10;        {/* Register Form */}&#10;        {activeTab === 'register' &amp;&amp; (&#10;          &lt;Form {...registerForm}&gt;&#10;            &lt;form onSubmit={registerForm.handleSubmit(handleRegister)} className=&quot;space-y-4&quot; data-testid=&quot;register-form&quot;&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;name&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Full Name&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input placeholder=&quot;Enter your full name&quot; {...field} data-testid=&quot;register-name&quot; /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;email&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Email Address&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input&#10;                        type=&quot;email&quot;&#10;                        placeholder=&quot;Enter your email&quot;&#10;                        {...field}&#10;                        data-testid=&quot;register-email&quot;&#10;                      /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;location&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Location (Optional)&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input placeholder=&quot;City, Region&quot; {...field} value={field.value || ''} data-testid=&quot;register-location&quot; /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;phone&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Phone (Optional)&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input placeholder=&quot;+233 XX XXX XXXX&quot; {...field} value={field.value || ''} data-testid=&quot;register-phone&quot; /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;password&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Password&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input&#10;                        type=&quot;password&quot;&#10;                        placeholder=&quot;Create password&quot;&#10;                        {...field}&#10;                        data-testid=&quot;register-password&quot;&#10;                      /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;FormField&#10;                control={registerForm.control}&#10;                name=&quot;confirmPassword&quot;&#10;                render={({ field }) =&gt; (&#10;                  &lt;FormItem&gt;&#10;                    &lt;FormLabel&gt;Confirm Password&lt;/FormLabel&gt;&#10;                    &lt;FormControl&gt;&#10;                      &lt;Input&#10;                        type=&quot;password&quot;&#10;                        placeholder=&quot;Confirm password&quot;&#10;                        {...field}&#10;                        data-testid=&quot;register-confirmPassword&quot;&#10;                      /&gt;&#10;                    &lt;/FormControl&gt;&#10;                    &lt;FormMessage /&gt;&#10;                  &lt;/FormItem&gt;&#10;                )}&#10;              /&gt;&#10;              &lt;Button &#10;                type=&quot;submit&quot; &#10;                className=&quot;w-full bg-forest-green text-white hover:bg-forest-green/90&quot;&#10;                disabled={isLoading}&#10;                data-testid=&quot;register-submit&quot;&#10;              &gt;&#10;                {isLoading ? 'Creating Account...' : 'Create Account'}&#10;              &lt;/Button&gt;&#10;            &lt;/form&gt;&#10;          &lt;/Form&gt;&#10;        )}&#10;      &lt;/DialogContent&gt;&#10;    &lt;/Dialog&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/components/header.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/components/header.tsx" />
              <option name="originalContent" value="import { useState } from 'react';&#10;import { Link, useLocation } from 'wouter';&#10;import { useAuth } from '@/lib/auth';&#10;import { AuthModal } from './auth-modal';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { useQuery } from '@tanstack/react-query';&#10;import { Leaf, Phone, CloudSun, Menu, Search, User, LogOut } from 'lucide-react';&#10;import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';&#10;interface WeatherData {&#10;  temperature: number;&#10;  description: string;&#10;}&#10;&#10;export function Header() {&#10;  const [location] = useLocation();&#10;  const { user, logout } = useAuth();&#10;  const [showAuthModal, setShowAuthModal] = useState(false);&#10;  const [searchTerm, setSearchTerm] = useState('');&#10;  const [searchCategory, setSearchCategory] = useState('all');&#10;  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);&#10;&#10;  const { data: weather } = useQuery&lt;WeatherData&gt;({&#10;    queryKey: ['/api/weather'],&#10;    staleTime: 10 * 60 * 1000, // 10 minutes&#10;  });&#10;&#10;  const handleSearch = () =&gt; {&#10;    if (searchTerm.trim()) {&#10;      const params = new URLSearchParams();&#10;      params.set('search', searchTerm);&#10;      if (searchCategory !== 'all') {&#10;        params.set('category', searchCategory);&#10;      }&#10;      window.location.href = `/marketplace?${params.toString()}`;&#10;    }&#10;  };&#10;&#10;  const handleKeyPress = (e: React.KeyboardEvent) =&gt; {&#10;    if (e.key === 'Enter') {&#10;      handleSearch();&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;header className=&quot;bg-white shadow-md sticky top-0 z-50&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          {/* Top Bar */}&#10;          &lt;div className=&quot;flex justify-between items-center py-2 text-sm border-b border-gray-200&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              &lt;span className=&quot;text-dark-green&quot; data-testid=&quot;welcome-message&quot;&gt;&#10;                Welcome to Ghana's Premier Agricultural Marketplace&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              {weather &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center space-x-2&quot; data-testid=&quot;weather-info&quot;&gt;&#10;                  &lt;CloudSun className=&quot;text-forest-green w-4 h-4&quot; /&gt;&#10;                  &lt;span className=&quot;text-dark-green&quot;&gt;{weather.temperature}°C&lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-500&quot;&gt;{weather.description}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;Phone className=&quot;text-forest-green w-4 h-4&quot; /&gt;&#10;                &lt;span className=&quot;text-dark-green&quot;&gt;+233 24 123 4567&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Main Navigation */}&#10;          &lt;div className=&quot;flex items-center justify-between py-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-8&quot;&gt;&#10;              &lt;Link href=&quot;/&quot; className=&quot;flex items-center space-x-3&quot; data-testid=&quot;logo-link&quot;&gt;&#10;                &lt;Leaf className=&quot;text-forest-green text-3xl&quot; /&gt;&#10;                &lt;Leaf className=&quot;text-forest-green text-3xl&quot; /&gt;&#10;                &lt;h1 className=&quot;text-2xl font-bold text-forest-green&quot;&gt;AgroConnect&lt;/h1&gt;&#10;              &#10;              &lt;nav className=&quot;hidden md:flex items-center space-x-6&quot;&gt;&#10;                &lt;Link &#10;                  href=&quot;/&quot; &#10;                  className={`text-dark-green hover:text-forest-green font-medium transition-colors ${location === '/' ? 'text-forest-green' : ''}`}&#10;                  data-testid=&quot;nav-home&quot;&#10;                &gt;&#10;                  Home&#10;                &lt;/Link&gt;&#10;                &lt;DropdownMenu&gt;&#10;                  &lt;DropdownMenuTrigger className=&quot;text-dark-green hover:text-forest-green font-medium transition-colors flex items-center&quot; data-testid=&quot;nav-categories&quot;&gt;&#10;                    Categories&#10;                  &lt;/DropdownMenuTrigger&gt;&#10;                  &lt;DropdownMenuContent&gt;&#10;                    &lt;DropdownMenuItem&gt;&#10;                      &lt;Link href=&quot;/marketplace?category=crops&quot;&gt;Crops&lt;/Link&gt;&#10;                    &lt;/DropdownMenuItem&gt;&#10;                    &lt;DropdownMenuItem&gt;&#10;                      &lt;Link href=&quot;/marketplace?category=tools&quot;&gt;Farm Tools&lt;/Link&gt;&#10;                    &lt;/DropdownMenuItem&gt;&#10;                    &lt;DropdownMenuItem&gt;&#10;                      &lt;Link href=&quot;/marketplace?category=medications&quot;&gt;Medications&lt;/Link&gt;&#10;                    &lt;/DropdownMenuItem&gt;&#10;                  &lt;/DropdownMenuContent&gt;&#10;                &lt;/DropdownMenu&gt;&#10;                &lt;Link &#10;                  href=&quot;/marketplace&quot; &#10;                  className={`text-dark-green hover:text-forest-green font-medium transition-colors ${location === '/marketplace' ? 'text-forest-green' : ''}`}&#10;                  data-testid=&quot;nav-marketplace&quot;&#10;                &gt;&#10;                  Marketplace&#10;                &lt;/Link&gt;&#10;                {user &amp;&amp; (&#10;                  &lt;Link &#10;                    href=&quot;/dashboard&quot; &#10;                    className={`text-dark-green hover:text-forest-green font-medium transition-colors ${location === '/dashboard' ? 'text-forest-green' : ''}`}&#10;                    data-testid=&quot;nav-dashboard&quot;&#10;                  &gt;&#10;                    Dashboard&#10;                  &lt;/Link&gt;&#10;                )}&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              {user ? (&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;span className=&quot;text-dark-green&quot; data-testid=&quot;user-greeting&quot;&gt;&#10;                    Hello, {user.firstName}&#10;                  &lt;/span&gt;&#10;                  &lt;DropdownMenu&gt;&#10;                    &lt;DropdownMenuTrigger asChild&gt;&#10;                      &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; data-testid=&quot;user-menu&quot;&gt;&#10;                        &lt;User className=&quot;w-4 h-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/DropdownMenuTrigger&gt;&#10;                    &lt;DropdownMenuContent&gt;&#10;                      &lt;DropdownMenuItem&gt;&#10;                        &lt;Link href=&quot;/dashboard&quot; className=&quot;flex items-center&quot;&gt;&#10;                          &lt;User className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                          Dashboard&#10;                        &lt;/Link&gt;&#10;                      &lt;/DropdownMenuItem&gt;&#10;                      &lt;DropdownMenuItem onClick={logout} data-testid=&quot;logout-button&quot;&gt;&#10;                        &lt;LogOut className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                        Logout&#10;                      &lt;/DropdownMenuItem&gt;&#10;                    &lt;/DropdownMenuContent&gt;&#10;                  &lt;/DropdownMenu&gt;&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;Button &#10;                  className=&quot;bg-forest-green text-white hover:bg-forest-green/90&quot;&#10;                  onClick={() =&gt; setShowAuthModal(true)}&#10;                  data-testid=&quot;login-button&quot;&#10;                &gt;&#10;                  Login / Register&#10;                &lt;/Button&gt;&#10;              )}&#10;              &#10;              {user?.accountType === 'farmer' &amp;&amp; (&#10;                &lt;Link href=&quot;/dashboard&quot;&gt;&#10;                  &lt;Button className=&quot;bg-harvest-orange text-white hover:bg-harvest-orange/90&quot; data-testid=&quot;sell-products-button&quot;&gt;&#10;                    Sell Products&#10;                  &lt;/Button&gt;&#10;                &lt;/Link&gt;&#10;              )}&#10;              &#10;              &lt;Button&#10;                variant=&quot;ghost&quot;&#10;                className=&quot;md:hidden text-forest-green&quot;&#10;                onClick={() =&gt; setMobileMenuOpen(!mobileMenuOpen)}&#10;                data-testid=&quot;mobile-menu-button&quot;&#10;              &gt;&#10;                &lt;Menu /&gt;&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Search Bar */}&#10;          &lt;div className=&quot;pb-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center bg-gray-50 rounded-lg p-3&quot;&gt;&#10;              &lt;Search className=&quot;text-gray-400 mr-3&quot; /&gt;&#10;              &lt;Input&#10;                type=&quot;text&quot;&#10;                placeholder=&quot;Search for crops, tools, medications...&quot;&#10;                className=&quot;flex-1 bg-transparent border-none outline-none text-dark-green&quot;&#10;                value={searchTerm}&#10;                onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                onKeyPress={handleKeyPress}&#10;                data-testid=&quot;search-input&quot;&#10;              /&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2 ml-4&quot;&gt;&#10;                &lt;Select value={searchCategory} onValueChange={setSearchCategory}&gt;&#10;                  &lt;SelectTrigger className=&quot;w-40 bg-transparent border-none&quot; data-testid=&quot;search-category&quot;&gt;&#10;                    &lt;SelectValue /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;all&quot;&gt;All Categories&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;crops&quot;&gt;Crops&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;tools&quot;&gt;Farm Tools&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;medications&quot;&gt;Medications&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;                &lt;Button &#10;                  className=&quot;bg-forest-green text-white hover:bg-forest-green/90&quot;&#10;                  onClick={handleSearch}&#10;                  data-testid=&quot;search-button&quot;&#10;                &gt;&#10;                  Search&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Mobile Menu */}&#10;          {mobileMenuOpen &amp;&amp; (&#10;            &lt;div className=&quot;md:hidden border-t border-gray-200 py-4&quot; data-testid=&quot;mobile-menu&quot;&gt;&#10;              &lt;nav className=&quot;flex flex-col space-y-4&quot;&gt;&#10;                &lt;Link href=&quot;/&quot; className=&quot;text-dark-green hover:text-forest-green font-medium&quot;&gt;Home&lt;/Link&gt;&#10;                &lt;Link href=&quot;/marketplace&quot; className=&quot;text-dark-green hover:text-forest-green font-medium&quot;&gt;Marketplace&lt;/Link&gt;&#10;                {user &amp;&amp; (&#10;                  &lt;Link href=&quot;/dashboard&quot; className=&quot;text-dark-green hover:text-forest-green font-medium&quot;&gt;Dashboard&lt;/Link&gt;&#10;                )}&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/header&gt;&#10;&#10;      {showAuthModal &amp;&amp; (&#10;        &lt;AuthModal onClose={() =&gt; setShowAuthModal(false)} /&gt;&#10;      )}&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useState } from 'react';&#10;import { Link, useLocation } from 'wouter';&#10;import { useAuth } from '@/lib/auth';&#10;import { AuthModal } from './auth-modal';&#10;import { Button } from '@/components/ui/button';&#10;import { Input } from '@/components/ui/input';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { useQuery } from '@tanstack/react-query';&#10;import { Leaf, Phone, CloudSun, Menu, Search, User, LogOut } from 'lucide-react';&#10;import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';&#10;import { AgroConnectLogo } from './agroconnect-logo';&#10;&#10;interface WeatherData {&#10;  temperature: number;&#10;  description: string;&#10;}&#10;&#10;export function Header() {&#10;  const [location] = useLocation();&#10;  const { user, logout } = useAuth();&#10;  const [showAuthModal, setShowAuthModal] = useState(false);&#10;  const [searchTerm, setSearchTerm] = useState('');&#10;  const [searchCategory, setSearchCategory] = useState('all');&#10;  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);&#10;&#10;  const { data: weather } = useQuery&lt;WeatherData&gt;({&#10;    queryKey: ['/api/weather'],&#10;    staleTime: 10 * 60 * 1000, // 10 minutes&#10;  });&#10;&#10;  const handleSearch = () =&gt; {&#10;    if (searchTerm.trim()) {&#10;      const params = new URLSearchParams();&#10;      params.set('search', searchTerm);&#10;      if (searchCategory !== 'all') {&#10;        params.set('category', searchCategory);&#10;      }&#10;      window.location.href = `/marketplace?${params.toString()}`;&#10;    }&#10;  };&#10;&#10;  const handleKeyPress = (e: React.KeyboardEvent) =&gt; {&#10;    if (e.key === 'Enter') {&#10;      handleSearch();&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;header className=&quot;bg-white shadow-md sticky top-0 z-50&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          {/* Top Bar */}&#10;          &lt;div className=&quot;flex justify-between items-center py-2 text-sm border-b border-gray-200&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              &lt;span className=&quot;text-dark-green&quot; data-testid=&quot;welcome-message&quot;&gt;&#10;                Welcome to Ghana's Premier Agricultural Marketplace&#10;              &lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              {weather &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center space-x-2&quot; data-testid=&quot;weather-info&quot;&gt;&#10;                  &lt;CloudSun className=&quot;text-forest-green w-4 h-4&quot; /&gt;&#10;                  &lt;span className=&quot;text-dark-green&quot;&gt;{weather.temperature}°C&lt;/span&gt;&#10;                  &lt;span className=&quot;text-gray-500&quot;&gt;{weather.description}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;Phone className=&quot;text-forest-green w-4 h-4&quot; /&gt;&#10;                &lt;span className=&quot;text-dark-green&quot;&gt;+233 24 123 4567&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Main Navigation */}&#10;          &lt;div className=&quot;flex items-center justify-between py-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-8&quot;&gt;&#10;              &lt;Link href=&quot;/&quot; className=&quot;flex items-center space-x-3&quot; data-testid=&quot;logo-link&quot;&gt;&#10;                &lt;AgroConnectLogo className=&quot;w-10 h-10&quot; /&gt;&#10;                &lt;h1 className=&quot;text-2xl font-bold text-forest-green&quot;&gt;FarmConnect Ghana&lt;/h1&gt;&#10;              &lt;/Link&gt;&#10;              &#10;              &lt;nav className=&quot;hidden md:flex items-center space-x-6&quot;&gt;&#10;                &lt;Link &#10;                  href=&quot;/&quot; &#10;                  className={`text-dark-green hover:text-forest-green font-medium transition-colors ${location === '/' ? 'text-forest-green' : ''}`}&#10;                  data-testid=&quot;nav-home&quot;&#10;                &gt;&#10;                  Home&#10;                &lt;/Link&gt;&#10;                &lt;DropdownMenu&gt;&#10;                  &lt;DropdownMenuTrigger className=&quot;text-dark-green hover:text-forest-green font-medium transition-colors flex items-center&quot; data-testid=&quot;nav-categories&quot;&gt;&#10;                    Categories&#10;                  &lt;/DropdownMenuTrigger&gt;&#10;                  &lt;DropdownMenuContent&gt;&#10;                    &lt;DropdownMenuItem&gt;&#10;                      &lt;Link href=&quot;/marketplace?category=crops&quot;&gt;Crops&lt;/Link&gt;&#10;                    &lt;/DropdownMenuItem&gt;&#10;                    &lt;DropdownMenuItem&gt;&#10;                      &lt;Link href=&quot;/marketplace?category=tools&quot;&gt;Farm Tools&lt;/Link&gt;&#10;                    &lt;/DropdownMenuItem&gt;&#10;                    &lt;DropdownMenuItem&gt;&#10;                      &lt;Link href=&quot;/marketplace?category=medications&quot;&gt;Medications&lt;/Link&gt;&#10;                    &lt;/DropdownMenuItem&gt;&#10;                  &lt;/DropdownMenuContent&gt;&#10;                &lt;/DropdownMenu&gt;&#10;                &lt;Link &#10;                  href=&quot;/marketplace&quot; &#10;                  className={`text-dark-green hover:text-forest-green font-medium transition-colors ${location === '/marketplace' ? 'text-forest-green' : ''}`}&#10;                  data-testid=&quot;nav-marketplace&quot;&#10;                &gt;&#10;                  Marketplace&#10;                &lt;/Link&gt;&#10;                {user &amp;&amp; (&#10;                  &lt;Link &#10;                    href=&quot;/dashboard&quot; &#10;                    className={`text-dark-green hover:text-forest-green font-medium transition-colors ${location === '/dashboard' ? 'text-forest-green' : ''}`}&#10;                    data-testid=&quot;nav-dashboard&quot;&#10;                  &gt;&#10;                    Dashboard&#10;                  &lt;/Link&gt;&#10;                )}&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              {user ? (&#10;                &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                  &lt;span className=&quot;text-dark-green&quot; data-testid=&quot;user-greeting&quot;&gt;&#10;                    Hello, {user.firstName}&#10;                  &lt;/span&gt;&#10;                  &lt;DropdownMenu&gt;&#10;                    &lt;DropdownMenuTrigger asChild&gt;&#10;                      &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; data-testid=&quot;user-menu&quot;&gt;&#10;                        &lt;User className=&quot;w-4 h-4&quot; /&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/DropdownMenuTrigger&gt;&#10;                    &lt;DropdownMenuContent&gt;&#10;                      &lt;DropdownMenuItem&gt;&#10;                        &lt;Link href=&quot;/dashboard&quot; className=&quot;flex items-center&quot;&gt;&#10;                          &lt;User className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                          Dashboard&#10;                        &lt;/Link&gt;&#10;                      &lt;/DropdownMenuItem&gt;&#10;                      &lt;DropdownMenuItem onClick={logout} data-testid=&quot;logout-button&quot;&gt;&#10;                        &lt;LogOut className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                        Logout&#10;                      &lt;/DropdownMenuItem&gt;&#10;                    &lt;/DropdownMenuContent&gt;&#10;                  &lt;/DropdownMenu&gt;&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;Button &#10;                  className=&quot;bg-forest-green text-white hover:bg-forest-green/90&quot;&#10;                  onClick={() =&gt; setShowAuthModal(true)}&#10;                  data-testid=&quot;login-button&quot;&#10;                &gt;&#10;                  Login / Register&#10;                &lt;/Button&gt;&#10;              )}&#10;              &#10;              {user?.accountType === 'farmer' &amp;&amp; (&#10;                &lt;Link href=&quot;/dashboard&quot;&gt;&#10;                  &lt;Button className=&quot;bg-harvest-orange text-white hover:bg-harvest-orange/90&quot; data-testid=&quot;sell-products-button&quot;&gt;&#10;                    Sell Products&#10;                  &lt;/Button&gt;&#10;                &lt;/Link&gt;&#10;              )}&#10;              &#10;              &lt;Button&#10;                variant=&quot;ghost&quot;&#10;                className=&quot;md:hidden text-forest-green&quot;&#10;                onClick={() =&gt; setMobileMenuOpen(!mobileMenuOpen)}&#10;                data-testid=&quot;mobile-menu-button&quot;&#10;              &gt;&#10;                &lt;Menu /&gt;&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Search Bar */}&#10;          &lt;div className=&quot;pb-4&quot;&gt;&#10;            &lt;div className=&quot;flex items-center bg-gray-50 rounded-lg p-3&quot;&gt;&#10;              &lt;Search className=&quot;text-gray-400 mr-3&quot; /&gt;&#10;              &lt;Input&#10;                type=&quot;text&quot;&#10;                placeholder=&quot;Search for crops, tools, medications...&quot;&#10;                className=&quot;flex-1 bg-transparent border-none outline-none text-dark-green&quot;&#10;                value={searchTerm}&#10;                onChange={(e) =&gt; setSearchTerm(e.target.value)}&#10;                onKeyPress={handleKeyPress}&#10;                data-testid=&quot;search-input&quot;&#10;              /&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2 ml-4&quot;&gt;&#10;                &lt;Select value={searchCategory} onValueChange={setSearchCategory}&gt;&#10;                  &lt;SelectTrigger className=&quot;w-40 bg-transparent border-none&quot; data-testid=&quot;search-category&quot;&gt;&#10;                    &lt;SelectValue /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;all&quot;&gt;All Categories&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;crops&quot;&gt;Crops&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;tools&quot;&gt;Farm Tools&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;medications&quot;&gt;Medications&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;                &lt;Button &#10;                  className=&quot;bg-forest-green text-white hover:bg-forest-green/90&quot;&#10;                  onClick={handleSearch}&#10;                  data-testid=&quot;search-button&quot;&#10;                &gt;&#10;                  Search&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Mobile Menu */}&#10;          {mobileMenuOpen &amp;&amp; (&#10;            &lt;div className=&quot;md:hidden border-t border-gray-200 py-4&quot; data-testid=&quot;mobile-menu&quot;&gt;&#10;              &lt;nav className=&quot;flex flex-col space-y-4&quot;&gt;&#10;                &lt;Link href=&quot;/&quot; className=&quot;text-dark-green hover:text-forest-green font-medium&quot;&gt;Home&lt;/Link&gt;&#10;                &lt;Link href=&quot;/marketplace&quot; className=&quot;text-dark-green hover:text-forest-green font-medium&quot;&gt;Marketplace&lt;/Link&gt;&#10;                {user &amp;&amp; (&#10;                  &lt;Link href=&quot;/dashboard&quot; className=&quot;text-dark-green hover:text-forest-green font-medium&quot;&gt;Dashboard&lt;/Link&gt;&#10;                )}&#10;              &lt;/nav&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/header&gt;&#10;&#10;      {showAuthModal &amp;&amp; (&#10;        &lt;AuthModal onClose={() =&gt; setShowAuthModal(false)} /&gt;&#10;      )}&#10;    &lt;/&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/components/seller-card.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/components/seller-card.tsx" />
              <option name="updatedContent" value="import { User } from '@shared/schema';&#10;import { Card, CardContent } from '@/components/ui/card';&#10;import { Button } from '@/components/ui/button';&#10;import { Badge } from '@/components/ui/badge';&#10;import { MapPin, Calendar, Shield } from 'lucide-react';&#10;&#10;interface SellerCardProps {&#10;  seller: User;&#10;}&#10;&#10;export function SellerCard({ seller }: SellerCardProps) {&#10;  const getSpecialization = (accountType: string) =&gt; {&#10;    switch (accountType) {&#10;      case 'farmer':&#10;        return 'Farmer';&#10;      case 'buyer':&#10;        return 'Buyer';&#10;      default:&#10;        return 'User';&#10;    }&#10;  };&#10;&#10;  const getJoinDate = (createdAt: string | Date) =&gt; {&#10;    const date = new Date(createdAt);&#10;    return date.toLocaleDateString('en-US', { &#10;      year: 'numeric', &#10;      month: 'short' &#10;    });&#10;  };&#10;&#10;  return (&#10;    &lt;Card className=&quot;text-center hover:shadow-lg transition-all duration-300&quot; data-testid={`seller-card-${seller.id}`}&gt;&#10;      &lt;CardContent className=&quot;p-6&quot;&gt;&#10;        &lt;div className=&quot;w-20 h-20 rounded-full mx-auto mb-4 bg-gradient-to-br from-green-100 to-green-200 flex items-center justify-center&quot;&gt;&#10;          &lt;span className=&quot;text-2xl font-bold text-green-700&quot;&gt;&#10;            {seller.firstName[0]}{seller.lastName[0]}&#10;          &lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &#10;        &lt;h3 className=&quot;text-xl font-bold text-gray-900 mb-2&quot; data-testid={`seller-name-${seller.id}`}&gt;&#10;          {seller.firstName} {seller.lastName}&#10;        &lt;/h3&gt;&#10;        &#10;        &lt;div className=&quot;flex items-center justify-center mb-3&quot;&gt;&#10;          &lt;Badge variant=&quot;secondary&quot; className=&quot;text-xs&quot;&gt;&#10;            {getSpecialization(seller.accountType)}&#10;          &lt;/Badge&gt;&#10;          {seller.verified &amp;&amp; (&#10;            &lt;Badge variant=&quot;default&quot; className=&quot;text-xs ml-2 bg-green-600&quot;&gt;&#10;              &lt;Shield className=&quot;w-3 h-3 mr-1&quot; /&gt;&#10;              Verified&#10;            &lt;/Badge&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;        &#10;        {seller.location &amp;&amp; (&#10;          &lt;div className=&quot;flex items-center justify-center text-sm text-gray-500 mb-3&quot;&gt;&#10;            &lt;MapPin className=&quot;w-4 h-4 mr-1&quot; /&gt;&#10;            {seller.location}&#10;          &lt;/div&gt;&#10;        )}&#10;        &#10;        &lt;div className=&quot;flex items-center justify-center text-sm text-gray-500 mb-4&quot;&gt;&#10;          &lt;Calendar className=&quot;w-4 h-4 mr-1&quot; /&gt;&#10;          Member since {getJoinDate(seller.createdAt)}&#10;        &lt;/div&gt;&#10;        &#10;        &lt;Button &#10;          variant=&quot;outline&quot; &#10;          size=&quot;sm&quot;&#10;          className=&quot;w-full&quot;&#10;          onClick={() =&gt; {&#10;            // Navigate to seller profile or contact&#10;            console.log(`View seller: ${seller.id}`);&#10;          }}&#10;        &gt;&#10;          View Profile&#10;        &lt;/Button&gt;&#10;      &lt;/CardContent&gt;&#10;    &lt;/Card&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/lib/auth.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/lib/auth.tsx" />
              <option name="originalContent" value="import { createContext, useContext, useState, useEffect, ReactNode } from 'react';&#10;import { User } from '@shared/schema';&#10;import { apiRequest } from './queryClient';&#10;&#10;interface AuthContextType {&#10;  user: User | null;&#10;  login: (email: string, password: string) =&gt; Promise&lt;void&gt;;&#10;  register: (userData: any) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; void;&#10;  isLoading: boolean;&#10;}&#10;&#10;const AuthContext = createContext&lt;AuthContextType | null&gt;(null);&#10;&#10;export function useAuth() {&#10;  const context = useContext(AuthContext);&#10;  if (!context) {&#10;    throw new Error('useAuth must be used within an AuthProvider');&#10;  }&#10;  return context;&#10;}&#10;&#10;interface AuthProviderProps {&#10;  children: ReactNode;&#10;}&#10;&#10;export function AuthProvider({ children }: AuthProviderProps) {&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    // Check if user is logged in on app start&#10;    const token = localStorage.getItem('token');&#10;    if (token) {&#10;      fetchUser();&#10;    } else {&#10;      setIsLoading(false);&#10;    }&#10;  }, []);&#10;&#10;  const fetchUser = async () =&gt; {&#10;    try {&#10;      const response = await apiRequest('GET', '/api/auth/me');&#10;      const userData = await response.json();&#10;      setUser(userData);&#10;    } catch (error) {&#10;      localStorage.removeItem('token');&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  const login = async (email: string, password: string) =&gt; {&#10;    const response = await apiRequest('POST', '/api/auth/login', { email, password });&#10;    const { user, token } = await response.json();&#10;    &#10;    localStorage.setItem('token', token);&#10;    setUser(user);&#10;  };&#10;&#10;  const register = async (userData: any) =&gt; {&#10;    const response = await apiRequest('POST', '/api/auth/register', userData);&#10;    const { user, token } = await response.json();&#10;    &#10;    localStorage.setItem('token', token);&#10;    setUser(user);&#10;  };&#10;&#10;  const logout = () =&gt; {&#10;    localStorage.removeItem('token');&#10;    setUser(null);&#10;  };&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={{ user, login, register, logout, isLoading }}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { createContext, useContext, useState, useEffect, ReactNode } from 'react';&#10;import { User } from '@shared/schema';&#10;import { apiRequest } from './queryClient';&#10;&#10;interface AuthContextType {&#10;  user: User | null;&#10;  login: (email: string, password: string) =&gt; Promise&lt;void&gt;;&#10;  register: (userData: any) =&gt; Promise&lt;void&gt;;&#10;  logout: () =&gt; void;&#10;  isLoading: boolean;&#10;}&#10;&#10;const AuthContext = createContext&lt;AuthContextType | null&gt;(null);&#10;&#10;export function useAuth() {&#10;  const context = useContext(AuthContext);&#10;  if (!context) {&#10;    throw new Error('useAuth must be used within an AuthProvider');&#10;  }&#10;  return context;&#10;}&#10;&#10;interface AuthProviderProps {&#10;  children: ReactNode;&#10;}&#10;&#10;export function AuthProvider({ children }: AuthProviderProps) {&#10;  const [user, setUser] = useState&lt;User | null&gt;(null);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;&#10;  useEffect(() =&gt; {&#10;    // Check if user is logged in on app start&#10;    const token = localStorage.getItem('auth-token');&#10;    if (token) {&#10;      fetchUser();&#10;    } else {&#10;      setIsLoading(false);&#10;    }&#10;  }, []);&#10;&#10;  const fetchUser = async () =&gt; {&#10;    try {&#10;      const response = await apiRequest('GET', '/api/auth/me');&#10;      const userData = await response.json();&#10;      setUser(userData);&#10;    } catch (error) {&#10;      localStorage.removeItem('auth-token');&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  const login = async (email: string, password: string) =&gt; {&#10;    const response = await apiRequest('POST', '/api/auth/login', { email, password });&#10;    const { user, token } = await response.json();&#10;    &#10;    localStorage.setItem('auth-token', token);&#10;    setUser(user);&#10;  };&#10;&#10;  const register = async (userData: any) =&gt; {&#10;    const response = await apiRequest('POST', '/api/auth/register', userData);&#10;    const { user, token } = await response.json();&#10;    &#10;    localStorage.setItem('auth-token', token);&#10;    setUser(user);&#10;  };&#10;&#10;  const logout = () =&gt; {&#10;    localStorage.removeItem('auth-token');&#10;    setUser(null);&#10;  };&#10;&#10;  return (&#10;    &lt;AuthContext.Provider value={{ user, login, register, logout, isLoading }}&gt;&#10;      {children}&#10;    &lt;/AuthContext.Provider&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/lib/queryClient.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/lib/queryClient.ts" />
              <option name="originalContent" value="import { QueryClient, QueryFunction } from &quot;@tanstack/react-query&quot;;&#10;&#10;async function throwIfResNotOk(res: Response) {&#10;  if (!res.ok) {&#10;    const text = (await res.text()) || res.statusText;&#10;    throw new Error(`${res.status}: ${text}`);&#10;  }&#10;}&#10;&#10;export async function apiRequest(&#10;  method: string,&#10;  url: string,&#10;  data?: unknown | undefined,&#10;): Promise&lt;Response&gt; {&#10;  const headers: Record&lt;string, string&gt; = {};&#10;  &#10;  // Add authorization header if token exists&#10;y  const token = localStorage.getItem('auth-token');&#10;  if (token) {&#10;    headers.Authorization = `Bearer ${token}`;&#10;  }&#10;  &#10;  // Add content type for requests with data&#10;  if (data) {&#10;    headers['Content-Type'] = 'application/json';&#10;  }&#10;&#10;  const res = await fetch(url, {&#10;    method,&#10;    headers,&#10;    body: data ? JSON.stringify(data) : undefined,&#10;    credentials: &quot;include&quot;,&#10;  });&#10;&#10;  await throwIfResNotOk(res);&#10;  return res;&#10;}&#10;&#10;type UnauthorizedBehavior = &quot;returnNull&quot; | &quot;throw&quot;;&#10;export const getQueryFn: &lt;T&gt;(options: {&#10;  on401: UnauthorizedBehavior;&#10;}) =&gt; QueryFunction&lt;T&gt; =&#10;  ({ on401: unauthorizedBehavior }) =&gt;&#10;  async ({ queryKey }) =&gt; {&#10;    const headers: Record&lt;string, string&gt; = {};&#10;    &#10;    // Add authorization header if token exists&#10;    const token = localStorage.getItem('auth-token');&#10;    if (token) {&#10;      headers.Authorization = `Bearer ${token}`;&#10;    }&#10;&#10;    const res = await fetch(queryKey.join(&quot;/&quot;) as string, {&#10;      headers,&#10;      credentials: &quot;include&quot;,&#10;    });&#10;&#10;    if (unauthorizedBehavior === &quot;returnNull&quot; &amp;&amp; res.status === 401) {&#10;      return null;&#10;    }&#10;&#10;    await throwIfResNotOk(res);&#10;    return await res.json();&#10;  };&#10;&#10;export const queryClient = new QueryClient({&#10;  defaultOptions: {&#10;    queries: {&#10;      queryFn: getQueryFn({ on401: &quot;throw&quot; }),&#10;      refetchInterval: false,&#10;      refetchOnWindowFocus: false,&#10;      staleTime: Infinity,&#10;      retry: false,&#10;    },&#10;    mutations: {&#10;      retry: false,&#10;    },&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import { QueryClient, QueryFunction } from &quot;@tanstack/react-query&quot;;&#10;&#10;async function throwIfResNotOk(res: Response) {&#10;  if (!res.ok) {&#10;    const text = (await res.text()) || res.statusText;&#10;    throw new Error(`${res.status}: ${text}`);&#10;  }&#10;}&#10;&#10;export async function apiRequest(&#10;  method: string,&#10;  url: string,&#10;  data?: unknown | undefined,&#10;): Promise&lt;Response&gt; {&#10;  const headers: Record&lt;string, string&gt; = {};&#10;  &#10;  // Add authorization header if token exists&#10;  const token = localStorage.getItem('auth-token');&#10;  if (token) {&#10;    headers.Authorization = `Bearer ${token}`;&#10;  }&#10;  &#10;  // Add content type for requests with data&#10;  if (data) {&#10;    headers['Content-Type'] = 'application/json';&#10;  }&#10;&#10;  const res = await fetch(url, {&#10;    method,&#10;    headers,&#10;    body: data ? JSON.stringify(data) : undefined,&#10;    credentials: &quot;include&quot;,&#10;  });&#10;&#10;  await throwIfResNotOk(res);&#10;  return res;&#10;}&#10;&#10;type UnauthorizedBehavior = &quot;returnNull&quot; | &quot;throw&quot;;&#10;export const getQueryFn: &lt;T&gt;(options: {&#10;  on401: UnauthorizedBehavior;&#10;}) =&gt; QueryFunction&lt;T&gt; =&#10;  ({ on401: unauthorizedBehavior }) =&gt;&#10;  async ({ queryKey }) =&gt; {&#10;    const headers: Record&lt;string, string&gt; = {};&#10;    &#10;    // Add authorization header if token exists&#10;    const token = localStorage.getItem('auth-token');&#10;    if (token) {&#10;      headers.Authorization = `Bearer ${token}`;&#10;    }&#10;&#10;    const res = await fetch(queryKey.join(&quot;/&quot;) as string, {&#10;      headers,&#10;      credentials: &quot;include&quot;,&#10;    });&#10;&#10;    if (unauthorizedBehavior === &quot;returnNull&quot; &amp;&amp; res.status === 401) {&#10;      return null;&#10;    }&#10;&#10;    await throwIfResNotOk(res);&#10;    return await res.json();&#10;  };&#10;&#10;export const queryClient = new QueryClient({&#10;  defaultOptions: {&#10;    queries: {&#10;      queryFn: getQueryFn({ on401: &quot;throw&quot; }),&#10;      refetchInterval: false,&#10;      refetchOnWindowFocus: false,&#10;      staleTime: Infinity,&#10;      retry: false,&#10;    },&#10;    mutations: {&#10;      retry: false,&#10;    },&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/pages/dashboard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/pages/dashboard.tsx" />
              <option name="originalContent" value="import { useState } from 'react';&#10;import { useQuery, useMutation } from '@tanstack/react-query';&#10;import { useAuth } from '@/lib/auth';&#10;import { useForm } from 'react-hook-form';&#10;import { zodResolver } from '@hookform/resolvers/zod';&#10;import { useLocation } from 'wouter';&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';&#10;import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';&#10;import { Input } from '@/components/ui/input';&#10;import { Textarea } from '@/components/ui/textarea';&#10;import { Button } from '@/components/ui/button';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';&#10;import { Badge } from '@/components/ui/badge';&#10;import { useToast } from '@/hooks/use-toast';&#10;import { queryClient } from '@/lib/queryClient';&#10;import { z } from 'zod';&#10;import {&#10;  Plus, Edit, Trash2, Package, DollarSign, TrendingUp, Users,&#10;  Home, ShoppingBag, MessageSquare, Settings, LogOut, BarChart3,&#10;  User, MapPin, Bell, Star, Calendar, ExternalLink&#10;} from 'lucide-react';&#10;&#10;const productFormSchema = z.object({&#10;  name: z.string().min(1, 'Product name is required'),&#10;  description: z.string().min(1, 'Description is required'),&#10;  category: z.enum([&quot;crops&quot;, &quot;livestock&quot;, &quot;farm-tools&quot;, &quot;seeds&quot;, &quot;fertilizers&quot;]),&#10;  price: z.string().min(1, 'Price is required'),&#10;  quantity: z.string().min(1, 'Quantity is required'),&#10;  unit: z.string().min(1, 'Unit is required'),&#10;  location: z.string().min(1, 'Location is required'),&#10;  imageUrl: z.string().optional(),&#10;  stock: z.string().optional(),&#10;});&#10;&#10;type ProductFormData = z.infer&lt;typeof productFormSchema&gt;;&#10;&#10;interface Product {&#10;  id: string;&#10;  name: string;&#10;  description: string;&#10;  price: string;&#10;  category: string;&#10;  quantity: number;&#10;  unit: string;&#10;  location: string;&#10;  imageUrl?: string;&#10;  sellerId: string;&#10;  stock?: number;&#10;  featured: boolean;&#10;  createdAt: string;&#10;}&#10;&#10;interface DashboardStats {&#10;  totalProducts: number;&#10;  activeProducts: number;&#10;  totalViews: number;&#10;  totalInquiries: number;&#10;}&#10;&#10;export default function Dashboard() {&#10;  const { user, logout } = useAuth();&#10;  const { toast } = useToast();&#10;  const [, setLocation] = useLocation();&#10;  const [editingProduct, setEditingProduct] = useState&lt;Product | null&gt;(null);&#10;  const [isFormOpen, setIsFormOpen] = useState(false);&#10;  const [activeTab, setActiveTab] = useState('overview');&#10;&#10;  // Navigation items&#10;  const navigationItems = [&#10;    { id: 'overview', label: 'Overview', icon: Home },&#10;    { id: 'products', label: 'My Products', icon: Package },&#10;    { id: 'analytics', label: 'Analytics', icon: BarChart3 },&#10;    { id: 'messages', label: 'Messages', icon: MessageSquare },&#10;    { id: 'orders', label: 'Orders', icon: ShoppingBag },&#10;    { id: 'profile', label: 'Profile', icon: User },&#10;    { id: 'settings', label: 'Settings', icon: Settings },&#10;  ];&#10;&#10;  // Fetch user's products&#10;  const { data: products = [], isLoading: productsLoading, refetch } = useQuery&lt;Product[]&gt;({&#10;    queryKey: ['user-products'],&#10;    queryFn: async () =&gt; {&#10;      const token = localStorage.getItem('auth-token');&#10;      const response = await fetch(`/api/products?sellerId=${user?.id}`, {&#10;        headers: {&#10;          'Authorization': `Bearer ${token}`&#10;        }&#10;      });&#10;      if (!response.ok) throw new Error('Failed to fetch products');&#10;      return response.json();&#10;    },&#10;    enabled: !!user?.id,&#10;  });&#10;&#10;  // Real dashboard stats based on actual data&#10;  const dashboardStats: DashboardStats = {&#10;    totalProducts: products.length,&#10;    activeProducts: products.filter(p =&gt; p.active).length,&#10;    totalViews: 0, // Will be implemented when we add view tracking&#10;    totalInquiries: 0, // Will be implemented when we add message tracking for this user&#10;  };&#10;&#10;  // Create product mutation&#10;  const createProductMutation = useMutation({&#10;    mutationFn: async (data: ProductFormData) =&gt; {&#10;      const token = localStorage.getItem('auth-token');&#10;&#10;      // Transform the data to match the database schema&#10;      const productData = {&#10;        name: data.name,&#10;        description: data.description,&#10;        category: data.category,&#10;        price: data.price, // Keep as string, backend will handle conversion&#10;        quantity: data.quantity, // Keep as string, backend will handle conversion&#10;        unit: data.unit,&#10;        stock: data.stock ? parseInt(data.stock) : 0,&#10;        location: data.location || '',&#10;        imageUrl: data.imageUrl || '',&#10;      };&#10;&#10;      const response = await fetch('/api/products', {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          'Authorization': `Bearer ${token}`&#10;        },&#10;        body: JSON.stringify(productData),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json();&#10;        throw new Error(errorData.message || 'Failed to create product');&#10;      }&#10;      return response.json();&#10;    },&#10;    onSuccess: () =&gt; {&#10;      toast({ title: &quot;Success&quot;, description: &quot;Product created successfully!&quot; });&#10;      queryClient.invalidateQueries({ queryKey: ['user-products'] });&#10;      setIsFormOpen(false);&#10;      form.reset();&#10;    },&#10;    onError: (error: any) =&gt; {&#10;      console.error('Product creation error:', error);&#10;      toast({&#10;        title: &quot;Error&quot;,&#10;        description: error.message || &quot;Failed to create product&quot;,&#10;        variant: &quot;destructive&quot;&#10;      });&#10;    },&#10;  });&#10;&#10;  // Update product mutation&#10;  const updateProductMutation = useMutation({&#10;    mutationFn: async (data: ProductFormData) =&gt; {&#10;      const token = localStorage.getItem('auth-token');&#10;      const response = await fetch(`/api/products/${editingProduct?.id}`, {&#10;        method: 'PUT',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          'Authorization': `Bearer ${token}`&#10;        },&#10;        body: JSON.stringify({&#10;          ...data,&#10;          price: parseFloat(data.price).toFixed(2),&#10;          stock: data.stock ? parseInt(data.stock) : undefined&#10;        }),&#10;      });&#10;      if (!response.ok) throw new Error('Failed to update product');&#10;      return response.json();&#10;    },&#10;    onSuccess: () =&gt; {&#10;      toast({ title: &quot;Success&quot;, description: &quot;Product updated successfully!&quot; });&#10;      queryClient.invalidateQueries({ queryKey: ['user-products'] });&#10;      setEditingProduct(null);&#10;      setIsFormOpen(false);&#10;      form.reset();&#10;    },&#10;    onError: () =&gt; {&#10;      toast({ title: &quot;Error&quot;, description: &quot;Failed to update product&quot;, variant: &quot;destructive&quot; });&#10;    },&#10;  });&#10;&#10;  // Delete product mutation&#10;  const deleteProductMutation = useMutation({&#10;    mutationFn: async (productId: string) =&gt; {&#10;      const token = localStorage.getItem('auth-token');&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: 'DELETE',&#10;        headers: {&#10;          'Authorization': `Bearer ${token}`&#10;        },&#10;      });&#10;      if (!response.ok) throw new Error('Failed to delete product');&#10;      return response.json();&#10;    },&#10;    onSuccess: () =&gt; {&#10;      toast({ title: &quot;Success&quot;, description: &quot;Product deleted successfully!&quot; });&#10;      queryClient.invalidateQueries({ queryKey: ['user-products'] });&#10;    },&#10;    onError: () =&gt; {&#10;      toast({ title: &quot;Error&quot;, description: &quot;Failed to delete product&quot;, variant: &quot;destructive&quot; });&#10;    },&#10;  });&#10;&#10;  const form = useForm&lt;ProductFormData&gt;({&#10;    resolver: zodResolver(productFormSchema),&#10;    defaultValues: {&#10;      name: '',&#10;      description: '',&#10;      price: '',&#10;      category: '',&#10;      quantity: '',&#10;      unit: '',&#10;      location: '',&#10;      imageUrl: '',&#10;      stock: '',&#10;    },&#10;  });&#10;&#10;  const onSubmit = (data: ProductFormData) =&gt; {&#10;    console.log('Form submitted with data:', data);&#10;    console.log('Form validation errors:', form.formState.errors);&#10;&#10;    if (editingProduct) {&#10;      updateProductMutation.mutate(data);&#10;    } else {&#10;      createProductMutation.mutate(data);&#10;    }&#10;  };&#10;&#10;  const handleEditProduct = (product: Product) =&gt; {&#10;    setEditingProduct(product);&#10;    form.reset({&#10;      name: product.name,&#10;      description: product.description,&#10;      price: product.price,&#10;      category: product.category,&#10;      quantity: product.quantity.toString(),&#10;      unit: product.unit,&#10;      location: product.location,&#10;      imageUrl: product.imageUrl,&#10;      stock: product.stock?.toString(),&#10;    });&#10;    setIsFormOpen(true);&#10;  };&#10;&#10;  const handleDeleteProduct = (productId: string) =&gt; {&#10;    deleteProductMutation.mutate(productId);&#10;  };&#10;&#10;  const handleAddProduct = () =&gt; {&#10;    setEditingProduct(null);&#10;    form.reset();&#10;    setIsFormOpen(true);&#10;  };&#10;&#10;  if (!user) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold mb-4&quot;&gt;Please log in to access your dashboard&lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;You need to be logged in to manage your products.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 flex&quot;&gt;&#10;      {/* Sidebar Navigation */}&#10;      &lt;div className=&quot;w-64 bg-white shadow-lg border-r border-gray-200 fixed h-full&quot;&gt;&#10;        &lt;div className=&quot;p-6 border-b border-gray-200&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;w-10 h-10 bg-green-600 rounded-lg flex items-center justify-center&quot;&gt;&#10;              &lt;User className=&quot;w-6 h-6 text-white&quot; /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;h3 className=&quot;font-semibold text-gray-900&quot;&gt;{user?.name}&lt;/h3&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600&quot;&gt;Farmer&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;nav className=&quot;mt-6 px-3&quot;&gt;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#10;            {navigationItems.map((item) =&gt; {&#10;              const Icon = item.icon;&#10;              return (&#10;                &lt;button&#10;                  key={item.id}&#10;                  onClick={() =&gt; setActiveTab(item.id)}&#10;                  className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${&#10;                    activeTab === item.id&#10;                      ? 'bg-green-100 text-green-700 border-r-2 border-green-700'&#10;                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'&#10;                  }`}&#10;                &gt;&#10;                  &lt;Icon className=&quot;mr-3 h-5 w-5&quot; /&gt;&#10;                  {item.label}&#10;                &lt;/button&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;        &lt;/nav&gt;&#10;&#10;        &lt;div className=&quot;absolute bottom-0 left-0 right-0 p-3 border-t border-gray-200&quot;&gt;&#10;          &lt;button&#10;            onClick={logout}&#10;            className=&quot;w-full flex items-center px-3 py-2 text-sm font-medium text-red-600 hover:text-red-900 hover:bg-red-50 rounded-lg transition-colors&quot;&#10;          &gt;&#10;            &lt;LogOut className=&quot;mr-3 h-5 w-5&quot; /&gt;&#10;            Sign Out&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Main Content */}&#10;      &lt;div className=&quot;flex-1 ml-64&quot;&gt;&#10;        &lt;div className=&quot;p-8&quot;&gt;&#10;          {/* Header */}&#10;          &lt;div className=&quot;mb-8 flex justify-between items-center&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;&#10;                {navigationItems.find(item =&gt; item.id === activeTab)?.label || 'Dashboard'}&#10;              &lt;/h1&gt;&#10;              &lt;p className=&quot;text-gray-600 mt-1&quot;&gt;&#10;                {activeTab === 'overview' &amp;&amp; 'Track your performance and manage your farm business'}&#10;                {activeTab === 'products' &amp;&amp; 'Manage your product listings and inventory'}&#10;                {activeTab === 'analytics' &amp;&amp; 'View detailed insights and performance metrics'}&#10;                {activeTab === 'messages' &amp;&amp; 'Communicate with buyers and other farmers'}&#10;                {activeTab === 'orders' &amp;&amp; 'Track and manage your orders'}&#10;                {activeTab === 'profile' &amp;&amp; 'Update your profile and farm information'}&#10;                {activeTab === 'settings' &amp;&amp; 'Configure your account preferences'}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            {activeTab === 'products' &amp;&amp; (&#10;              &lt;Button onClick={handleAddProduct} className=&quot;bg-green-600 hover:bg-green-700&quot;&gt;&#10;                &lt;Plus className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                Add Product&#10;              &lt;/Button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Content Area */}&#10;          {activeTab === 'overview' &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              {/* Stats Cards */}&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#10;                    &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Total Products&lt;/CardTitle&gt;&#10;                    &lt;Package className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold&quot;&gt;{dashboardStats.totalProducts}&lt;/div&gt;&#10;                    &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;Products listed&lt;/p&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#10;                    &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Active Products&lt;/CardTitle&gt;&#10;                    &lt;TrendingUp className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold&quot;&gt;{dashboardStats.activeProducts}&lt;/div&gt;&#10;                    &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;Currently available&lt;/p&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#10;                    &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Total Views&lt;/CardTitle&gt;&#10;                    &lt;Users className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold&quot;&gt;{dashboardStats.totalViews}&lt;/div&gt;&#10;                    &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;Product views&lt;/p&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#10;                    &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Inquiries&lt;/CardTitle&gt;&#10;                    &lt;MessageSquare className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold&quot;&gt;{dashboardStats.totalInquiries}&lt;/div&gt;&#10;                    &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;Customer inquiries&lt;/p&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Quick Actions */}&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader&gt;&#10;                    &lt;CardTitle&gt;Quick Actions&lt;/CardTitle&gt;&#10;                    &lt;CardDescription&gt;Common tasks&lt;/CardDescription&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;                    &lt;Button&#10;                      onClick={handleAddProduct}&#10;                      className=&quot;w-full justify-start&quot;&#10;                      variant=&quot;outline&quot;&#10;                    &gt;&#10;                      &lt;Plus className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      Add New Product&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      onClick={() =&gt; setLocation('/marketplace')}&#10;                      className=&quot;w-full justify-start&quot;&#10;                      variant=&quot;outline&quot;&#10;                    &gt;&#10;                      &lt;ShoppingBag className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      Browse Marketplace&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      onClick={() =&gt; setActiveTab('messages')}&#10;                      className=&quot;w-full justify-start&quot;&#10;                      variant=&quot;outline&quot;&#10;                    &gt;&#10;                      &lt;MessageSquare className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      View Messages&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      onClick={() =&gt; setActiveTab('analytics')}&#10;                      className=&quot;w-full justify-start&quot;&#10;                      variant=&quot;outline&quot;&#10;                    &gt;&#10;                      &lt;BarChart3 className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      View Analytics&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      onClick={() =&gt; setActiveTab('profile')}&#10;                      className=&quot;w-full justify-start&quot;&#10;                      variant=&quot;outline&quot;&#10;                    &gt;&#10;                      &lt;User className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      Update Profile&#10;                    &lt;/Button&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader&gt;&#10;                    &lt;CardTitle&gt;Farm Activity&lt;/CardTitle&gt;&#10;                    &lt;CardDescription&gt;Recent activity on your farm&lt;/CardDescription&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;div className=&quot;w-8 h-8 bg-green-100 rounded-full flex items-center justify-center&quot;&gt;&#10;                          &lt;Package className=&quot;w-4 h-4 text-green-600&quot; /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                          &lt;p className=&quot;text-sm font-medium&quot;&gt;Products listed: {dashboardStats.totalProducts}&lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Total products in your inventory&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;div className=&quot;w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center&quot;&gt;&#10;                          &lt;TrendingUp className=&quot;w-4 h-4 text-blue-600&quot; /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                          &lt;p className=&quot;text-sm font-medium&quot;&gt;Active listings: {dashboardStats.activeProducts}&lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Products currently available for sale&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;div className=&quot;w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center&quot;&gt;&#10;                          &lt;Calendar className=&quot;w-4 h-4 text-purple-600&quot; /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                          &lt;p className=&quot;text-sm font-medium&quot;&gt;Account created&lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Welcome to FarmConnect Ghana!&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'products' &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;&#10;              {productsLoading ? (&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {[...Array(6)].map((_, i) =&gt; (&#10;                    &lt;Card key={i} className=&quot;animate-pulse&quot;&gt;&#10;                      &lt;div className=&quot;h-48 bg-gray-200&quot; /&gt;&#10;                      &lt;CardContent className=&quot;p-4&quot;&gt;&#10;                        &lt;div className=&quot;h-4 bg-gray-200 rounded mb-2&quot; /&gt;&#10;                        &lt;div className=&quot;h-3 bg-gray-200 rounded mb-4&quot; /&gt;&#10;                        &lt;div className=&quot;h-8 bg-gray-200 rounded&quot; /&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : products.length &gt; 0 ? (&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {products.map((product) =&gt; (&#10;                    &lt;Card key={product.id} className=&quot;overflow-hidden&quot;&gt;&#10;                      &lt;div className=&quot;h-48 bg-cover bg-center relative&quot;&gt;&#10;                        &lt;img&#10;                          src={product.imageUrl || '/placeholder.png'}&#10;                          alt={product.name}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                        /&gt;&#10;                        &lt;Badge&#10;                          className=&quot;absolute top-2 right-2&quot;&#10;                          variant={product.active ? &quot;default&quot; : &quot;secondary&quot;}&#10;                        &gt;&#10;                          {product.active ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                        &lt;/Badge&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;CardContent className=&quot;p-4&quot;&gt;&#10;                        &lt;h3 className=&quot;font-semibold text-lg mb-2&quot;&gt;{product.name}&lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 text-sm mb-3 line-clamp-2&quot;&gt;{product.description}&lt;/p&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                          &lt;span className=&quot;text-lg font-bold text-green-600&quot;&gt;&#10;                            GH₵{product.price}&#10;                          &lt;/span&gt;&#10;                          &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                            {product.stock} {product.unit}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;Button&#10;                            variant=&quot;outline&quot;&#10;                            size=&quot;sm&quot;&#10;                            onClick={() =&gt; handleEditProduct(product)}&#10;                            className=&quot;flex-1&quot;&#10;                          &gt;&#10;                            &lt;Edit className=&quot;w-4 h-4 mr-1&quot; /&gt;&#10;                            Edit&#10;                          &lt;/Button&gt;&#10;                          &lt;AlertDialog&gt;&#10;                            &lt;AlertDialogTrigger asChild&gt;&#10;                              &lt;Button variant=&quot;destructive&quot; size=&quot;sm&quot;&gt;&#10;                                &lt;Trash2 className=&quot;w-4 h-4&quot; /&gt;&#10;                              &lt;/Button&gt;&#10;                            &lt;/AlertDialogTrigger&gt;&#10;                            &lt;AlertDialogContent&gt;&#10;                              &lt;AlertDialogHeader&gt;&#10;                                &lt;AlertDialogTitle&gt;Delete Product&lt;/AlertDialogTitle&gt;&#10;                                &lt;AlertDialogDescription&gt;&#10;                                  Are you sure you want to delete &quot;{product.name}&quot;? This action cannot be undone.&#10;                                &lt;/AlertDialogDescription&gt;&#10;                              &lt;/AlertDialogHeader&gt;&#10;                              &lt;AlertDialogFooter&gt;&#10;                                &lt;AlertDialogCancel&gt;Cancel&lt;/AlertDialogCancel&gt;&#10;                                &lt;AlertDialogAction&#10;                                  onClick={() =&gt; handleDeleteProduct(product.id)}&#10;                                  className=&quot;bg-red-600 hover:bg-red-700&quot;&#10;                                &gt;&#10;                                  Delete&#10;                                &lt;/AlertDialogAction&gt;&#10;                              &lt;/AlertDialogFooter&gt;&#10;                            &lt;/AlertDialogContent&gt;&#10;                          &lt;/AlertDialog&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;Package className=&quot;w-24 h-24 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-700 mb-2&quot;&gt;No products yet&lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-500 mb-6&quot;&gt;Start selling by adding your first product&lt;/p&gt;&#10;                  &lt;Button onClick={handleAddProduct}&gt;&#10;                    &lt;Plus className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                    Add Your First Product&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'analytics' &amp;&amp; (&#10;            &lt;Card&gt;&#10;              &lt;CardHeader&gt;&#10;                &lt;CardTitle&gt;Analytics&lt;/CardTitle&gt;&#10;                &lt;CardDescription&gt;Track your performance and insights&lt;/CardDescription&gt;&#10;              &lt;/CardHeader&gt;&#10;              &lt;CardContent&gt;&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;TrendingUp className=&quot;w-24 h-24 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-700 mb-2&quot;&gt;Analytics Coming Soon&lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-500&quot;&gt;&#10;                    We're working on detailed analytics to help you track your sales and performance.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Product Form Dialog */}&#10;      {isFormOpen &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;          &lt;Card className=&quot;w-full max-w-2xl max-h-[90vh] overflow-y-auto&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;              &lt;CardTitle&gt;&#10;                {editingProduct ? 'Edit Product' : 'Add New Product'}&#10;              &lt;/CardTitle&gt;&#10;              &lt;CardDescription&gt;&#10;                {editingProduct ? 'Update your product details' : 'Fill in the details for your new product'}&#10;              &lt;/CardDescription&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent&gt;&#10;              &lt;Form {...form}&gt;&#10;                &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt;&#10;                  &lt;FormField&#10;                    control={form.control}&#10;                    name=&quot;name&quot;&#10;                    render={({ field }) =&gt; (&#10;                      &lt;FormItem&gt;&#10;                        &lt;FormLabel&gt;Product Name&lt;/FormLabel&gt;&#10;                        &lt;FormControl&gt;&#10;                          &lt;Input placeholder=&quot;Enter product name&quot; {...field} /&gt;&#10;                        &lt;/FormControl&gt;&#10;                        &lt;FormMessage /&gt;&#10;                      &lt;/FormItem&gt;&#10;                    )}&#10;                  /&gt;&#10;&#10;                  &lt;FormField&#10;                    control={form.control}&#10;                    name=&quot;description&quot;&#10;                    render={({ field }) =&gt; (&#10;                      &lt;FormItem&gt;&#10;                        &lt;FormLabel&gt;Description&lt;/FormLabel&gt;&#10;                        &lt;FormControl&gt;&#10;                          &lt;Textarea placeholder=&quot;Describe your product&quot; {...field} /&gt;&#10;                        &lt;/FormControl&gt;&#10;                        &lt;FormMessage /&gt;&#10;                      &lt;/FormItem&gt;&#10;                    )}&#10;                  /&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;price&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Price (GH₵)&lt;/FormLabel&gt;&#10;                          &lt;FormControl&gt;&#10;                            &lt;Input type=&quot;number&quot; step=&quot;0.01&quot; placeholder=&quot;0.00&quot; {...field} /&gt;&#10;                          &lt;/FormControl&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;quantity&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Quantity&lt;/FormLabel&gt;&#10;                          &lt;FormControl&gt;&#10;                            &lt;Input type=&quot;number&quot; placeholder=&quot;e.g., 50&quot; {...field} /&gt;&#10;                          &lt;/FormControl&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;unit&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Unit&lt;/FormLabel&gt;&#10;                          &lt;Select onValueChange={field.onChange} value={field.value}&gt;&#10;                            &lt;FormControl&gt;&#10;                              &lt;SelectTrigger&gt;&#10;                                &lt;SelectValue placeholder=&quot;Select unit&quot; /&gt;&#10;                              &lt;/SelectTrigger&gt;&#10;                            &lt;/FormControl&gt;&#10;                            &lt;SelectContent&gt;&#10;                              &lt;SelectItem value=&quot;kg&quot;&gt;Kilograms (kg)&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;g&quot;&gt;Grams (g)&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;lbs&quot;&gt;Pounds (lbs)&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;tons&quot;&gt;Tons&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;bags&quot;&gt;Bags&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;boxes&quot;&gt;Boxes&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;pieces&quot;&gt;Pieces&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;liters&quot;&gt;Liters&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;gallons&quot;&gt;Gallons&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;bunches&quot;&gt;Bunches&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;dozen&quot;&gt;Dozen&lt;/SelectItem&gt;&#10;                            &lt;/SelectContent&gt;&#10;                          &lt;/Select&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;stock&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Available Stock&lt;/FormLabel&gt;&#10;                          &lt;FormControl&gt;&#10;                            &lt;Input type=&quot;number&quot; placeholder=&quot;Stock quantity&quot; {...field} /&gt;&#10;                          &lt;/FormControl&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;location&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Location&lt;/FormLabel&gt;&#10;                          &lt;FormControl&gt;&#10;                            &lt;Input placeholder=&quot;City, Region&quot; {...field} /&gt;&#10;                          &lt;/FormControl&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;category&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                          &lt;Select onValueChange={field.onChange} value={field.value}&gt;&#10;                            &lt;FormControl&gt;&#10;                              &lt;SelectTrigger&gt;&#10;                                &lt;SelectValue placeholder=&quot;Select category&quot; /&gt;&#10;                              &lt;/SelectTrigger&gt;&#10;                            &lt;/FormControl&gt;&#10;                            &lt;SelectContent&gt;&#10;                              &lt;SelectItem value=&quot;crops&quot;&gt;Crops&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;livestock&quot;&gt;Livestock&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;farm-tools&quot;&gt;Farm Tools&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;seeds&quot;&gt;Seeds&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;fertilizers&quot;&gt;Fertilizers&lt;/SelectItem&gt;&#10;                            &lt;/SelectContent&gt;&#10;                          &lt;/Select&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;FormField&#10;                    control={form.control}&#10;                    name=&quot;imageUrl&quot;&#10;                    render={({ field }) =&gt; (&#10;                      &lt;FormItem&gt;&#10;                        &lt;FormLabel&gt;Image URL&lt;/FormLabel&gt;&#10;                        &lt;FormControl&gt;&#10;                          &lt;Input placeholder=&quot;https://example.com/image.jpg&quot; {...field} /&gt;&#10;                        &lt;/FormControl&gt;&#10;                        &lt;FormMessage /&gt;&#10;                      &lt;/FormItem&gt;&#10;                    )}&#10;                  /&gt;&#10;&#10;                  &lt;div className=&quot;flex gap-4 pt-4&quot;&gt;&#10;                    &lt;Button&#10;                      type=&quot;button&quot;&#10;                      variant=&quot;outline&quot;&#10;                      onClick={() =&gt; setIsFormOpen(false)}&#10;                      className=&quot;flex-1&quot;&#10;                    &gt;&#10;                      Cancel&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      type=&quot;submit&quot;&#10;                      disabled={createProductMutation.isPending || updateProductMutation.isPending}&#10;                      className=&quot;flex-1&quot;&#10;                    &gt;&#10;                      {createProductMutation.isPending || updateProductMutation.isPending&#10;                        ? 'Saving...'&#10;                        : editingProduct&#10;                        ? 'Update Product'&#10;                        : 'Create Product'&#10;                      }&#10;                    &lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/form&gt;&#10;              &lt;/Form&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useState } from 'react';&#10;import { useQuery, useMutation } from '@tanstack/react-query';&#10;import { useAuth } from '@/lib/auth';&#10;import { useForm } from 'react-hook-form';&#10;import { zodResolver } from '@hookform/resolvers/zod';&#10;import { useLocation } from 'wouter';&#10;import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';&#10;import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';&#10;import { Input } from '@/components/ui/input';&#10;import { Textarea } from '@/components/ui/textarea';&#10;import { Button } from '@/components/ui/button';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';&#10;import { Badge } from '@/components/ui/badge';&#10;import { useToast } from '@/hooks/use-toast';&#10;import { queryClient } from '@/lib/queryClient';&#10;import { z } from 'zod';&#10;import {&#10;  Plus, Edit, Trash2, Package, DollarSign, TrendingUp, Users,&#10;  Home, ShoppingBag, MessageSquare, Settings, LogOut, BarChart3,&#10;  User, MapPin, Bell, Star, Calendar, ExternalLink&#10;} from 'lucide-react';&#10;&#10;const productFormSchema = z.object({&#10;  name: z.string().min(1, 'Product name is required'),&#10;  description: z.string().min(1, 'Description is required'),&#10;  category: z.enum([&quot;crops&quot;, &quot;livestock&quot;, &quot;farm-tools&quot;, &quot;seeds&quot;, &quot;fertilizers&quot;]),&#10;  price: z.string().min(1, 'Price is required'),&#10;  quantity: z.string().min(1, 'Quantity is required'),&#10;  unit: z.string().min(1, 'Unit is required'),&#10;  location: z.string().min(1, 'Location is required'),&#10;  imageUrl: z.string().optional(),&#10;  stock: z.string().optional(),&#10;});&#10;&#10;type ProductFormData = z.infer&lt;typeof productFormSchema&gt;;&#10;&#10;interface Product {&#10;  id: string;&#10;  name: string;&#10;  description: string;&#10;  price: string;&#10;  category: string;&#10;  quantity: number;&#10;  unit: string;&#10;  location: string;&#10;  imageUrl?: string;&#10;  sellerId: string;&#10;  stock?: number;&#10;  featured: boolean;&#10;  createdAt: string;&#10;}&#10;&#10;interface DashboardStats {&#10;  totalProducts: number;&#10;  activeProducts: number;&#10;  totalViews: number;&#10;  totalInquiries: number;&#10;}&#10;&#10;export default function Dashboard() {&#10;  const { user, logout } = useAuth();&#10;  const { toast } = useToast();&#10;  const [, setLocation] = useLocation();&#10;  const [editingProduct, setEditingProduct] = useState&lt;Product | null&gt;(null);&#10;  const [isFormOpen, setIsFormOpen] = useState(false);&#10;  const [activeTab, setActiveTab] = useState('overview');&#10;&#10;  // Navigation items&#10;  const navigationItems = [&#10;    { id: 'overview', label: 'Overview', icon: Home },&#10;    { id: 'products', label: 'My Products', icon: Package },&#10;    { id: 'analytics', label: 'Analytics', icon: BarChart3 },&#10;    { id: 'messages', label: 'Messages', icon: MessageSquare },&#10;    { id: 'orders', label: 'Orders', icon: ShoppingBag },&#10;    { id: 'profile', label: 'Profile', icon: User },&#10;    { id: 'settings', label: 'Settings', icon: Settings },&#10;  ];&#10;&#10;  // Fetch user's products&#10;  const { data: products = [], isLoading: productsLoading, refetch } = useQuery&lt;Product[]&gt;({&#10;    queryKey: ['user-products'],&#10;    queryFn: async () =&gt; {&#10;      const token = localStorage.getItem('auth-token');&#10;      const response = await fetch(`/api/products?sellerId=${user?.id}`, {&#10;        headers: {&#10;          'Authorization': `Bearer ${token}`&#10;        }&#10;      });&#10;      if (!response.ok) throw new Error('Failed to fetch products');&#10;      return response.json();&#10;    },&#10;    enabled: !!user?.id,&#10;  });&#10;&#10;  // Real dashboard stats based on actual data&#10;  const dashboardStats: DashboardStats = {&#10;    totalProducts: products.length,&#10;    activeProducts: products.filter(p =&gt; p.active).length,&#10;    totalViews: 0, // Will be implemented when we add view tracking&#10;    totalInquiries: 0, // Will be implemented when we add message tracking for this user&#10;  };&#10;&#10;  // Create product mutation&#10;  const createProductMutation = useMutation({&#10;    mutationFn: async (data: ProductFormData) =&gt; {&#10;      const token = localStorage.getItem('auth-token');&#10;&#10;      // Transform the data to match the database schema&#10;      const productData = {&#10;        name: data.name,&#10;        description: data.description,&#10;        category: data.category,&#10;        price: data.price, // Keep as string, backend will handle conversion&#10;        quantity: data.quantity, // Keep as string, backend will handle conversion&#10;        unit: data.unit,&#10;        stock: data.stock ? parseInt(data.stock) : 0,&#10;        location: data.location || '',&#10;        imageUrl: data.imageUrl || '',&#10;      };&#10;&#10;      const response = await fetch('/api/products', {&#10;        method: 'POST',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          'Authorization': `Bearer ${token}`&#10;        },&#10;        body: JSON.stringify(productData),&#10;      });&#10;&#10;      if (!response.ok) {&#10;        const errorData = await response.json();&#10;        throw new Error(errorData.message || 'Failed to create product');&#10;      }&#10;      return response.json();&#10;    },&#10;    onSuccess: () =&gt; {&#10;      toast({ title: &quot;Success&quot;, description: &quot;Product created successfully!&quot; });&#10;      queryClient.invalidateQueries({ queryKey: ['user-products'] });&#10;      setIsFormOpen(false);&#10;      form.reset();&#10;    },&#10;    onError: (error: any) =&gt; {&#10;      console.error('Product creation error:', error);&#10;      toast({&#10;        title: &quot;Error&quot;,&#10;        description: error.message || &quot;Failed to create product&quot;,&#10;        variant: &quot;destructive&quot;&#10;      });&#10;    },&#10;  });&#10;&#10;  // Update product mutation&#10;  const updateProductMutation = useMutation({&#10;    mutationFn: async (data: ProductFormData) =&gt; {&#10;      const token = localStorage.getItem('auth-token');&#10;      const response = await fetch(`/api/products/${editingProduct?.id}`, {&#10;        method: 'PUT',&#10;        headers: {&#10;          'Content-Type': 'application/json',&#10;          'Authorization': `Bearer ${token}`&#10;        },&#10;        body: JSON.stringify({&#10;          ...data,&#10;          price: parseFloat(data.price).toFixed(2),&#10;          stock: data.stock ? parseInt(data.stock) : undefined&#10;        }),&#10;      });&#10;      if (!response.ok) throw new Error('Failed to update product');&#10;      return response.json();&#10;    },&#10;    onSuccess: () =&gt; {&#10;      toast({ title: &quot;Success&quot;, description: &quot;Product updated successfully!&quot; });&#10;      queryClient.invalidateQueries({ queryKey: ['user-products'] });&#10;      setEditingProduct(null);&#10;      setIsFormOpen(false);&#10;      form.reset();&#10;    },&#10;    onError: () =&gt; {&#10;      toast({ title: &quot;Error&quot;, description: &quot;Failed to update product&quot;, variant: &quot;destructive&quot; });&#10;    },&#10;  });&#10;&#10;  // Delete product mutation&#10;  const deleteProductMutation = useMutation({&#10;    mutationFn: async (productId: string) =&gt; {&#10;      const token = localStorage.getItem('auth-token');&#10;      const response = await fetch(`/api/products/${productId}`, {&#10;        method: 'DELETE',&#10;        headers: {&#10;          'Authorization': `Bearer ${token}`&#10;        },&#10;      });&#10;      if (!response.ok) throw new Error('Failed to delete product');&#10;      return response.json();&#10;    },&#10;    onSuccess: () =&gt; {&#10;      toast({ title: &quot;Success&quot;, description: &quot;Product deleted successfully!&quot; });&#10;      queryClient.invalidateQueries({ queryKey: ['user-products'] });&#10;    },&#10;    onError: () =&gt; {&#10;      toast({ title: &quot;Error&quot;, description: &quot;Failed to delete product&quot;, variant: &quot;destructive&quot; });&#10;    },&#10;  });&#10;&#10;  const form = useForm&lt;ProductFormData&gt;({&#10;    resolver: zodResolver(productFormSchema),&#10;    defaultValues: {&#10;      name: '',&#10;      description: '',&#10;      price: '',&#10;      category: '',&#10;      quantity: '',&#10;      unit: '',&#10;      location: '',&#10;      imageUrl: '',&#10;      stock: '',&#10;    },&#10;  });&#10;&#10;  const onSubmit = (data: ProductFormData) =&gt; {&#10;    console.log('Form submitted with data:', data);&#10;    console.log('Form validation errors:', form.formState.errors);&#10;&#10;    if (editingProduct) {&#10;      updateProductMutation.mutate(data);&#10;    } else {&#10;      createProductMutation.mutate(data);&#10;    }&#10;  };&#10;&#10;  const handleEditProduct = (product: Product) =&gt; {&#10;    setEditingProduct(product);&#10;    form.reset({&#10;      name: product.name,&#10;      description: product.description,&#10;      price: product.price,&#10;      category: product.category,&#10;      quantity: product.quantity.toString(),&#10;      unit: product.unit,&#10;      location: product.location,&#10;      imageUrl: product.imageUrl,&#10;      stock: product.stock?.toString(),&#10;    });&#10;    setIsFormOpen(true);&#10;  };&#10;&#10;  const handleDeleteProduct = (productId: string) =&gt; {&#10;    deleteProductMutation.mutate(productId);&#10;  };&#10;&#10;  const handleAddProduct = () =&gt; {&#10;    setEditingProduct(null);&#10;    form.reset();&#10;    setIsFormOpen(true);&#10;  };&#10;&#10;  if (!user) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold mb-4&quot;&gt;Please log in to access your dashboard&lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;You need to be logged in to manage your products.&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 flex&quot;&gt;&#10;      {/* Sidebar Navigation */}&#10;      &lt;div className=&quot;w-64 bg-white shadow-lg border-r border-gray-200 fixed h-full&quot;&gt;&#10;        &lt;div className=&quot;p-6 border-b border-gray-200&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;w-10 h-10 bg-green-600 rounded-lg flex items-center justify-center&quot;&gt;&#10;              &lt;User className=&quot;w-6 h-6 text-white&quot; /&gt;&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;h3 className=&quot;font-semibold text-gray-900&quot;&gt;{user?.name}&lt;/h3&gt;&#10;              &lt;p className=&quot;text-sm text-gray-600&quot;&gt;Farmer&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;nav className=&quot;mt-6 px-3&quot;&gt;&#10;          &lt;div className=&quot;space-y-1&quot;&gt;&#10;            {navigationItems.map((item) =&gt; {&#10;              const Icon = item.icon;&#10;              return (&#10;                &lt;button&#10;                  key={item.id}&#10;                  onClick={() =&gt; setActiveTab(item.id)}&#10;                  className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${&#10;                    activeTab === item.id&#10;                      ? 'bg-green-100 text-green-700 border-r-2 border-green-700'&#10;                      : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'&#10;                  }`}&#10;                &gt;&#10;                  &lt;Icon className=&quot;mr-3 h-5 w-5&quot; /&gt;&#10;                  {item.label}&#10;                &lt;/button&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;          &#10;          {/* External Navigation */}&#10;          &lt;div className=&quot;mt-6 pt-6 border-t border-gray-200&quot;&gt;&#10;            &lt;p className=&quot;px-3 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-3&quot;&gt;&#10;              Navigate&#10;            &lt;/p&gt;&#10;            &lt;div className=&quot;space-y-1&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setLocation('/')}&#10;                className=&quot;w-full flex items-center px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded-lg transition-colors&quot;&#10;              &gt;&#10;                &lt;Home className=&quot;mr-3 h-5 w-5&quot; /&gt;&#10;                Homepage&#10;                &lt;ExternalLink className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;              &lt;button&#10;                onClick={() =&gt; setLocation('/marketplace')}&#10;                className=&quot;w-full flex items-center px-3 py-2 text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded-lg transition-colors&quot;&#10;              &gt;&#10;                &lt;ShoppingBag className=&quot;mr-3 h-5 w-5&quot; /&gt;&#10;                Marketplace&#10;                &lt;ExternalLink className=&quot;ml-auto h-4 w-4&quot; /&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/nav&gt;&#10;&#10;        &lt;div className=&quot;absolute bottom-0 left-0 right-0 p-3 border-t border-gray-200&quot;&gt;&#10;          &lt;button&#10;            onClick={logout}&#10;            className=&quot;w-full flex items-center px-3 py-2 text-sm font-medium text-red-600 hover:text-red-900 hover:bg-red-50 rounded-lg transition-colors&quot;&#10;          &gt;&#10;            &lt;LogOut className=&quot;mr-3 h-5 w-5&quot; /&gt;&#10;            Sign Out&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Main Content */}&#10;      &lt;div className=&quot;flex-1 ml-64&quot;&gt;&#10;        &lt;div className=&quot;p-8&quot;&gt;&#10;          {/* Header */}&#10;          &lt;div className=&quot;mb-8 flex justify-between items-center&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;&#10;                {navigationItems.find(item =&gt; item.id === activeTab)?.label || 'Dashboard'}&#10;              &lt;/h1&gt;&#10;              &lt;p className=&quot;text-gray-600 mt-1&quot;&gt;&#10;                {activeTab === 'overview' &amp;&amp; 'Track your performance and manage your farm business'}&#10;                {activeTab === 'products' &amp;&amp; 'Manage your product listings and inventory'}&#10;                {activeTab === 'analytics' &amp;&amp; 'View detailed insights and performance metrics'}&#10;                {activeTab === 'messages' &amp;&amp; 'Communicate with buyers and other farmers'}&#10;                {activeTab === 'orders' &amp;&amp; 'Track and manage your orders'}&#10;                {activeTab === 'profile' &amp;&amp; 'Update your profile and farm information'}&#10;                {activeTab === 'settings' &amp;&amp; 'Configure your account preferences'}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;&#10;            {activeTab === 'products' &amp;&amp; (&#10;              &lt;Button onClick={handleAddProduct} className=&quot;bg-green-600 hover:bg-green-700&quot;&gt;&#10;                &lt;Plus className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                Add Product&#10;              &lt;/Button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Content Area */}&#10;          {activeTab === 'overview' &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;              {/* Stats Cards */}&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6&quot;&gt;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#10;                    &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Total Products&lt;/CardTitle&gt;&#10;                    &lt;Package className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold&quot;&gt;{dashboardStats.totalProducts}&lt;/div&gt;&#10;                    &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;Products listed&lt;/p&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#10;                    &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Active Products&lt;/CardTitle&gt;&#10;                    &lt;TrendingUp className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold&quot;&gt;{dashboardStats.activeProducts}&lt;/div&gt;&#10;                    &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;Currently available&lt;/p&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#10;                    &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Total Views&lt;/CardTitle&gt;&#10;                    &lt;Users className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold&quot;&gt;{dashboardStats.totalViews}&lt;/div&gt;&#10;                    &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;Product views&lt;/p&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader className=&quot;flex flex-row items-center justify-between space-y-0 pb-2&quot;&gt;&#10;                    &lt;CardTitle className=&quot;text-sm font-medium&quot;&gt;Inquiries&lt;/CardTitle&gt;&#10;                    &lt;MessageSquare className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent&gt;&#10;                    &lt;div className=&quot;text-2xl font-bold&quot;&gt;{dashboardStats.totalInquiries}&lt;/div&gt;&#10;                    &lt;p className=&quot;text-xs text-muted-foreground&quot;&gt;Customer inquiries&lt;/p&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;              &lt;/div&gt;&#10;&#10;              {/* Quick Actions */}&#10;              &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader&gt;&#10;                    &lt;CardTitle&gt;Quick Actions&lt;/CardTitle&gt;&#10;                    &lt;CardDescription&gt;Common tasks&lt;/CardDescription&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent className=&quot;space-y-3&quot;&gt;&#10;                    &lt;Button&#10;                      onClick={handleAddProduct}&#10;                      className=&quot;w-full justify-start&quot;&#10;                      variant=&quot;outline&quot;&#10;                    &gt;&#10;                      &lt;Plus className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      Add New Product&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      onClick={() =&gt; setLocation('/marketplace')}&#10;                      className=&quot;w-full justify-start&quot;&#10;                      variant=&quot;outline&quot;&#10;                    &gt;&#10;                      &lt;ShoppingBag className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      Browse Marketplace&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      onClick={() =&gt; setActiveTab('messages')}&#10;                      className=&quot;w-full justify-start&quot;&#10;                      variant=&quot;outline&quot;&#10;                    &gt;&#10;                      &lt;MessageSquare className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      View Messages&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      onClick={() =&gt; setActiveTab('analytics')}&#10;                      className=&quot;w-full justify-start&quot;&#10;                      variant=&quot;outline&quot;&#10;                    &gt;&#10;                      &lt;BarChart3 className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      View Analytics&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      onClick={() =&gt; setActiveTab('profile')}&#10;                      className=&quot;w-full justify-start&quot;&#10;                      variant=&quot;outline&quot;&#10;                    &gt;&#10;                      &lt;User className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                      Update Profile&#10;                    &lt;/Button&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;&#10;                &lt;Card&gt;&#10;                  &lt;CardHeader&gt;&#10;                    &lt;CardTitle&gt;Farm Activity&lt;/CardTitle&gt;&#10;                    &lt;CardDescription&gt;Recent activity on your farm&lt;/CardDescription&gt;&#10;                  &lt;/CardHeader&gt;&#10;                  &lt;CardContent&gt;&#10;                    &lt;div className=&quot;space-y-4&quot;&gt;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;div className=&quot;w-8 h-8 bg-green-100 rounded-full flex items-center justify-center&quot;&gt;&#10;                          &lt;Package className=&quot;w-4 h-4 text-green-600&quot; /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                          &lt;p className=&quot;text-sm font-medium&quot;&gt;Products listed: {dashboardStats.totalProducts}&lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Total products in your inventory&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;div className=&quot;w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center&quot;&gt;&#10;                          &lt;TrendingUp className=&quot;w-4 h-4 text-blue-600&quot; /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                          &lt;p className=&quot;text-sm font-medium&quot;&gt;Active listings: {dashboardStats.activeProducts}&lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Products currently available for sale&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;&#10;                      &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                        &lt;div className=&quot;w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center&quot;&gt;&#10;                          &lt;Calendar className=&quot;w-4 h-4 text-purple-600&quot; /&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                          &lt;p className=&quot;text-sm font-medium&quot;&gt;Account created&lt;/p&gt;&#10;                          &lt;p className=&quot;text-xs text-gray-600&quot;&gt;Welcome to FarmConnect Ghana!&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'products' &amp;&amp; (&#10;            &lt;div className=&quot;space-y-6&quot;&gt;&#10;&#10;              {productsLoading ? (&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {[...Array(6)].map((_, i) =&gt; (&#10;                    &lt;Card key={i} className=&quot;animate-pulse&quot;&gt;&#10;                      &lt;div className=&quot;h-48 bg-gray-200&quot; /&gt;&#10;                      &lt;CardContent className=&quot;p-4&quot;&gt;&#10;                        &lt;div className=&quot;h-4 bg-gray-200 rounded mb-2&quot; /&gt;&#10;                        &lt;div className=&quot;h-3 bg-gray-200 rounded mb-4&quot; /&gt;&#10;                        &lt;div className=&quot;h-8 bg-gray-200 rounded&quot; /&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : products.length &gt; 0 ? (&#10;                &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                  {products.map((product) =&gt; (&#10;                    &lt;Card key={product.id} className=&quot;overflow-hidden&quot;&gt;&#10;                      &lt;div className=&quot;h-48 bg-cover bg-center relative&quot;&gt;&#10;                        &lt;img&#10;                          src={product.imageUrl || '/placeholder.png'}&#10;                          alt={product.name}&#10;                          className=&quot;w-full h-full object-cover&quot;&#10;                        /&gt;&#10;                        &lt;Badge&#10;                          className=&quot;absolute top-2 right-2&quot;&#10;                          variant={product.active ? &quot;default&quot; : &quot;secondary&quot;}&#10;                        &gt;&#10;                          {product.active ? &quot;Active&quot; : &quot;Inactive&quot;}&#10;                        &lt;/Badge&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;CardContent className=&quot;p-4&quot;&gt;&#10;                        &lt;h3 className=&quot;font-semibold text-lg mb-2&quot;&gt;{product.name}&lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-600 text-sm mb-3 line-clamp-2&quot;&gt;{product.description}&lt;/p&gt;&#10;                        &lt;div className=&quot;flex justify-between items-center mb-4&quot;&gt;&#10;                          &lt;span className=&quot;text-lg font-bold text-green-600&quot;&gt;&#10;                            GH₵{product.price}&#10;                          &lt;/span&gt;&#10;                          &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                            {product.stock} {product.unit}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                          &lt;Button&#10;                            variant=&quot;outline&quot;&#10;                            size=&quot;sm&quot;&#10;                            onClick={() =&gt; handleEditProduct(product)}&#10;                            className=&quot;flex-1&quot;&#10;                          &gt;&#10;                            &lt;Edit className=&quot;w-4 h-4 mr-1&quot; /&gt;&#10;                            Edit&#10;                          &lt;/Button&gt;&#10;                          &lt;AlertDialog&gt;&#10;                            &lt;AlertDialogTrigger asChild&gt;&#10;                              &lt;Button variant=&quot;destructive&quot; size=&quot;sm&quot;&gt;&#10;                                &lt;Trash2 className=&quot;w-4 h-4&quot; /&gt;&#10;                              &lt;/Button&gt;&#10;                            &lt;/AlertDialogTrigger&gt;&#10;                            &lt;AlertDialogContent&gt;&#10;                              &lt;AlertDialogHeader&gt;&#10;                                &lt;AlertDialogTitle&gt;Delete Product&lt;/AlertDialogTitle&gt;&#10;                                &lt;AlertDialogDescription&gt;&#10;                                  Are you sure you want to delete &quot;{product.name}&quot;? This action cannot be undone.&#10;                                &lt;/AlertDialogDescription&gt;&#10;                              &lt;/AlertDialogHeader&gt;&#10;                              &lt;AlertDialogFooter&gt;&#10;                                &lt;AlertDialogCancel&gt;Cancel&lt;/AlertDialogCancel&gt;&#10;                                &lt;AlertDialogAction&#10;                                  onClick={() =&gt; handleDeleteProduct(product.id)}&#10;                                  className=&quot;bg-red-600 hover:bg-red-700&quot;&#10;                                &gt;&#10;                                  Delete&#10;                                &lt;/AlertDialogAction&gt;&#10;                              &lt;/AlertDialogFooter&gt;&#10;                            &lt;/AlertDialogContent&gt;&#10;                          &lt;/AlertDialog&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/CardContent&gt;&#10;                    &lt;/Card&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;Package className=&quot;w-24 h-24 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-700 mb-2&quot;&gt;No products yet&lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-500 mb-6&quot;&gt;Start selling by adding your first product&lt;/p&gt;&#10;                  &lt;Button onClick={handleAddProduct}&gt;&#10;                    &lt;Plus className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                    Add Your First Product&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'analytics' &amp;&amp; (&#10;            &lt;Card&gt;&#10;              &lt;CardHeader&gt;&#10;                &lt;CardTitle&gt;Analytics&lt;/CardTitle&gt;&#10;                &lt;CardDescription&gt;Track your performance and insights&lt;/CardDescription&gt;&#10;              &lt;/CardHeader&gt;&#10;              &lt;CardContent&gt;&#10;                &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                  &lt;TrendingUp className=&quot;w-24 h-24 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;                  &lt;h3 className=&quot;text-xl font-semibold text-gray-700 mb-2&quot;&gt;Analytics Coming Soon&lt;/h3&gt;&#10;                  &lt;p className=&quot;text-gray-500&quot;&gt;&#10;                    We're working on detailed analytics to help you track your sales and performance.&#10;                  &lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Product Form Dialog */}&#10;      {isFormOpen &amp;&amp; (&#10;        &lt;div className=&quot;fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50&quot;&gt;&#10;          &lt;Card className=&quot;w-full max-w-2xl max-h-[90vh] overflow-y-auto&quot;&gt;&#10;            &lt;CardHeader&gt;&#10;              &lt;CardTitle&gt;&#10;                {editingProduct ? 'Edit Product' : 'Add New Product'}&#10;              &lt;/CardTitle&gt;&#10;              &lt;CardDescription&gt;&#10;                {editingProduct ? 'Update your product details' : 'Fill in the details for your new product'}&#10;              &lt;/CardDescription&gt;&#10;            &lt;/CardHeader&gt;&#10;            &lt;CardContent&gt;&#10;              &lt;Form {...form}&gt;&#10;                &lt;form onSubmit={form.handleSubmit(onSubmit)} className=&quot;space-y-4&quot;&gt;&#10;                  &lt;FormField&#10;                    control={form.control}&#10;                    name=&quot;name&quot;&#10;                    render={({ field }) =&gt; (&#10;                      &lt;FormItem&gt;&#10;                        &lt;FormLabel&gt;Product Name&lt;/FormLabel&gt;&#10;                        &lt;FormControl&gt;&#10;                          &lt;Input placeholder=&quot;Enter product name&quot; {...field} /&gt;&#10;                        &lt;/FormControl&gt;&#10;                        &lt;FormMessage /&gt;&#10;                      &lt;/FormItem&gt;&#10;                    )}&#10;                  /&gt;&#10;&#10;                  &lt;FormField&#10;                    control={form.control}&#10;                    name=&quot;description&quot;&#10;                    render={({ field }) =&gt; (&#10;                      &lt;FormItem&gt;&#10;                        &lt;FormLabel&gt;Description&lt;/FormLabel&gt;&#10;                        &lt;FormControl&gt;&#10;                          &lt;Textarea placeholder=&quot;Describe your product&quot; {...field} /&gt;&#10;                        &lt;/FormControl&gt;&#10;                        &lt;FormMessage /&gt;&#10;                      &lt;/FormItem&gt;&#10;                    )}&#10;                  /&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;price&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Price (GH₵)&lt;/FormLabel&gt;&#10;                          &lt;FormControl&gt;&#10;                            &lt;Input type=&quot;number&quot; step=&quot;0.01&quot; placeholder=&quot;0.00&quot; {...field} /&gt;&#10;                          &lt;/FormControl&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;quantity&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Quantity&lt;/FormLabel&gt;&#10;                          &lt;FormControl&gt;&#10;                            &lt;Input type=&quot;number&quot; placeholder=&quot;e.g., 50&quot; {...field} /&gt;&#10;                          &lt;/FormControl&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;unit&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Unit&lt;/FormLabel&gt;&#10;                          &lt;Select onValueChange={field.onChange} value={field.value}&gt;&#10;                            &lt;FormControl&gt;&#10;                              &lt;SelectTrigger&gt;&#10;                                &lt;SelectValue placeholder=&quot;Select unit&quot; /&gt;&#10;                              &lt;/SelectTrigger&gt;&#10;                            &lt;/FormControl&gt;&#10;                            &lt;SelectContent&gt;&#10;                              &lt;SelectItem value=&quot;kg&quot;&gt;Kilograms (kg)&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;g&quot;&gt;Grams (g)&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;lbs&quot;&gt;Pounds (lbs)&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;tons&quot;&gt;Tons&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;bags&quot;&gt;Bags&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;boxes&quot;&gt;Boxes&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;pieces&quot;&gt;Pieces&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;liters&quot;&gt;Liters&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;gallons&quot;&gt;Gallons&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;bunches&quot;&gt;Bunches&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;dozen&quot;&gt;Dozen&lt;/SelectItem&gt;&#10;                            &lt;/SelectContent&gt;&#10;                          &lt;/Select&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;div className=&quot;grid grid-cols-2 gap-4&quot;&gt;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;stock&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Available Stock&lt;/FormLabel&gt;&#10;                          &lt;FormControl&gt;&#10;                            &lt;Input type=&quot;number&quot; placeholder=&quot;Stock quantity&quot; {...field} /&gt;&#10;                          &lt;/FormControl&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;location&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Location&lt;/FormLabel&gt;&#10;                          &lt;FormControl&gt;&#10;                            &lt;Input placeholder=&quot;City, Region&quot; {...field} /&gt;&#10;                          &lt;/FormControl&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;&#10;                    &lt;FormField&#10;                      control={form.control}&#10;                      name=&quot;category&quot;&#10;                      render={({ field }) =&gt; (&#10;                        &lt;FormItem&gt;&#10;                          &lt;FormLabel&gt;Category&lt;/FormLabel&gt;&#10;                          &lt;Select onValueChange={field.onChange} value={field.value}&gt;&#10;                            &lt;FormControl&gt;&#10;                              &lt;SelectTrigger&gt;&#10;                                &lt;SelectValue placeholder=&quot;Select category&quot; /&gt;&#10;                              &lt;/SelectTrigger&gt;&#10;                            &lt;/FormControl&gt;&#10;                            &lt;SelectContent&gt;&#10;                              &lt;SelectItem value=&quot;crops&quot;&gt;Crops&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;livestock&quot;&gt;Livestock&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;farm-tools&quot;&gt;Farm Tools&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;seeds&quot;&gt;Seeds&lt;/SelectItem&gt;&#10;                              &lt;SelectItem value=&quot;fertilizers&quot;&gt;Fertilizers&lt;/SelectItem&gt;&#10;                            &lt;/SelectContent&gt;&#10;                          &lt;/Select&gt;&#10;                          &lt;FormMessage /&gt;&#10;                        &lt;/FormItem&gt;&#10;                      )}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;&#10;                  &lt;FormField&#10;                    control={form.control}&#10;                    name=&quot;imageUrl&quot;&#10;                    render={({ field }) =&gt; (&#10;                      &lt;FormItem&gt;&#10;                        &lt;FormLabel&gt;Image URL&lt;/FormLabel&gt;&#10;                        &lt;FormControl&gt;&#10;                          &lt;Input placeholder=&quot;https://example.com/image.jpg&quot; {...field} /&gt;&#10;                        &lt;/FormControl&gt;&#10;                        &lt;FormMessage /&gt;&#10;                      &lt;/FormItem&gt;&#10;                    )}&#10;                  /&gt;&#10;&#10;                  &lt;div className=&quot;flex gap-4 pt-4&quot;&gt;&#10;                    &lt;Button&#10;                      type=&quot;button&quot;&#10;                      variant=&quot;outline&quot;&#10;                      onClick={() =&gt; setIsFormOpen(false)}&#10;                      className=&quot;flex-1&quot;&#10;                    &gt;&#10;                      Cancel&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      type=&quot;submit&quot;&#10;                      disabled={createProductMutation.isPending || updateProductMutation.isPending}&#10;                      className=&quot;flex-1&quot;&#10;                    &gt;&#10;                      {createProductMutation.isPending || updateProductMutation.isPending&#10;                        ? 'Saving...'&#10;                        : editingProduct&#10;                        ? 'Update Product'&#10;                        : 'Create Product'&#10;                      }&#10;                    &lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/form&gt;&#10;              &lt;/Form&gt;&#10;            &lt;/CardContent&gt;&#10;          &lt;/Card&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/pages/home.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/pages/home.tsx" />
              <option name="originalContent" value="import { useQuery } from &quot;@tanstack/react-query&quot;;&#10;import { Link } from &quot;wouter&quot;;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { ProductCard } from &quot;@/components/product-card&quot;;&#10;import { SellerCard } from &quot;@/components/seller-card&quot;;&#10;import { WeatherWidget } from &quot;@/components/weather-widget&quot;;&#10;import {&#10;  MapPin,&#10;  Star,&#10;  Clock,&#10;  TrendingUp,&#10;  Leaf,&#10;  Shield,&#10;  Truck&#10;} from &quot;lucide-react&quot;;&#10;&#10;interface StatsData {&#10;  Truck&#10;  regions: number;&#10;}&#10;&#10;interface Product {&#10;  id: string;&#10;  name: string;&#10;  description: string;&#10;  price: string;&#10;  unit: string;&#10;  category: string;&#10;  location: string;&#10;  imageUrl: string;&#10;  sellerId: string;&#10;  featured?: boolean;&#10;  active: boolean;&#10;  createdAt: string;&#10;}&#10;&#10;interface User {&#10;  id: string;&#10;  firstName: string;&#10;  lastName: string;&#10;  email: string;&#10;  accountType: string;&#10;  location: string;&#10;  phone: string;&#10;  verified: boolean;&#10;  createdAt: string;&#10;}&#10;&#10;export default function Home() {&#10;  // Fetch platform stats&#10;  const { data: stats } = useQuery&lt;StatsData&gt;({&#10;    queryKey: ['platform-stats'],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch('/api/stats');&#10;      if (!response.ok) throw new Error('Failed to fetch stats');&#10;  // Fetch featured products&#10;  const { data: featuredProducts = [], isLoading: featuredLoading } = useQuery&lt;Product[]&gt;({&#10;    queryKey: ['featured-products'],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch('/api/products/featured');&#10;      if (!response.ok) throw new Error('Failed to fetch featured products');&#10;      return response.json();&#10;    },&#10;  });&#10;&#10;  // Fetch latest products&#10;  const { data: latestProducts = [], isLoading: latestLoading } = useQuery&lt;Product[]&gt;({&#10;    queryKey: ['latest-products'],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch('/api/products/latest?limit=6');&#10;      if (!response.ok) throw new Error('Failed to fetch latest products');&#10;      return response.json();&#10;    },&#10;  });&#10;&#10;  // Fetch trusted sellers (oldest users)&#10;  const { data: trustedSellers = [], isLoading: sellersLoading } = useQuery&lt;User[]&gt;({&#10;    queryKey: ['trusted-sellers'],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch('/api/users/trusted-sellers?limit=6');&#10;      if (!response.ok) throw new Error('Failed to fetch trusted sellers');&#10;      return response.json();&#10;    },&#10;  });&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      {/* Hero Section */}&#10;      &lt;section className=&quot;bg-gradient-to-r from-green-600 to-green-700 text-white py-20&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4 text-center&quot;&gt;&#10;          &lt;h1 className=&quot;text-4xl md:text-6xl font-bold mb-6&quot;&gt;&#10;            Connect Ghana's Farmers&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-xl md:text-2xl mb-8 opacity-90&quot;&gt;&#10;            Bridging the gap between farmers and buyers with fresh produce, tools, and expertise&#10;          &lt;/p&gt;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row gap-4 justify-center&quot;&gt;&#10;            &lt;Link href=&quot;/marketplace&quot;&gt;&#10;              &lt;Button size=&quot;lg&quot; variant=&quot;secondary&quot; className=&quot;text-green-700&quot;&gt;&#10;                Browse Products&#10;              &lt;div className=&quot;bg-purple-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                &lt;MapPin className=&quot;w-8 h-8 text-purple-600&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;h3 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;{stats?.regions || 0}&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;Regions Covered&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Weather Widget Section */}&#10;      &lt;section className=&quot;py-8 bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;WeatherWidget /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Featured Products Section */}&#10;      &lt;section className=&quot;py-16 bg-white&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;&#10;          {featuredLoading ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {[...Array(6)].map((_, i) =&gt; (&#10;                &lt;Card key={i} className=&quot;animate-pulse&quot;&gt;&#10;                  &lt;div className=&quot;h-48 bg-gray-200&quot; /&gt;&#10;                  &lt;CardContent className=&quot;p-4&quot;&gt;&#10;                    &lt;div className=&quot;h-4 bg-gray-200 rounded mb-2&quot; /&gt;&#10;                    &lt;div className=&quot;h-3 bg-gray-200 rounded mb-4&quot; /&gt;&#10;                    &lt;div className=&quot;h-8 bg-gray-200 rounded&quot; /&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : featuredProducts.length &gt; 0 ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {featuredProducts.map((product) =&gt; (&#10;                &lt;div key={product.id} className=&quot;relative&quot;&gt;&#10;                  &lt;Badge className=&quot;absolute top-4 left-4 z-10 bg-yellow-500 text-white&quot;&gt;&#10;                    &lt;Star className=&quot;w-3 h-3 mr-1&quot; /&gt;&#10;                    Featured&#10;                  &lt;/Badge&gt;&#10;                  &lt;ProductCard product={product} /&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#10;              &lt;Package className=&quot;w-16 h-16 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-700 mb-2&quot;&gt;No featured products yet&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Check back soon for featured products from our sellers&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Latest Products Section */}&#10;      &lt;section className=&quot;py-16 bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-3xl font-bold text-gray-900 mb-2&quot;&gt;Latest Products&lt;/h2&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;Fresh listings from the marketplace&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;Link href=&quot;/marketplace&quot;&gt;&#10;              &lt;Button variant=&quot;outline&quot;&gt;&#10;                &lt;TrendingUp className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                Explore Marketplace&#10;              &lt;/Button&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;&#10;          {latestLoading ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {[...Array(6)].map((_, i) =&gt; (&#10;                &lt;Card key={i} className=&quot;animate-pulse&quot;&gt;&#10;                  &lt;div className=&quot;h-48 bg-gray-200&quot; /&gt;&#10;                  &lt;CardContent className=&quot;p-4&quot;&gt;&#10;                    &lt;div className=&quot;h-4 bg-gray-200 rounded mb-2&quot; /&gt;&#10;                    &lt;div className=&quot;h-3 bg-gray-200 rounded mb-4&quot; /&gt;&#10;                    &lt;div className=&quot;h-8 bg-gray-200 rounded&quot; /&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : latestProducts.length &gt; 0 ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {latestProducts.map((product) =&gt; (&#10;                &lt;div key={product.id} className=&quot;relative&quot;&gt;&#10;                  &lt;Badge className=&quot;absolute top-4 left-4 z-10 bg-green-500 text-white&quot;&gt;&#10;                    &lt;Clock className=&quot;w-3 h-3 mr-1&quot; /&gt;&#10;                    New&#10;                  &lt;/Badge&gt;&#10;                  &lt;ProductCard product={product} /&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#10;              &lt;Package className=&quot;w-16 h-16 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-700 mb-2&quot;&gt;No products available&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Be the first to list a product on our marketplace!&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Categories Preview Section */}&#10;      &lt;section className=&quot;py-16 bg-white&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;            &lt;h2 className=&quot;text-3xl font-bold text-gray-900 mb-4&quot;&gt;What You Can Find&lt;/h2&gt;&#10;            &lt;p className=&quot;text-gray-600 max-w-2xl mx-auto&quot;&gt;&#10;              From fresh produce to farming equipment, discover everything you need for a successful farming operation&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-8&quot;&gt;&#10;            {/* Crops Category */}&#10;            &lt;Card className=&quot;overflow-hidden hover:shadow-lg transition-shadow&quot;&gt;&#10;              &lt;div&#10;                className=&quot;h-48 bg-cover bg-center relative&quot;&#10;                style={{&#10;                  backgroundImage: 'url(&quot;https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?ixlib=rb-4.0.3&amp;w=800&amp;h=400&amp;fit=crop&quot;)'&#10;                }}&#10;              &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40&quot; /&gt;&#10;                &lt;div className=&quot;absolute bottom-4 left-4 text-white&quot;&gt;&#10;                  &lt;Leaf className=&quot;w-8 h-8 mb-2&quot; /&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold&quot;&gt;Fresh Crops&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;CardContent className=&quot;p-6&quot;&gt;&#10;                &lt;p className=&quot;text-gray-600 mb-4&quot;&gt;&#10;                  Fresh vegetables, grains, fruits, and cash crops from local farmers across Ghana.&#10;                &lt;/p&gt;&#10;                &lt;Link href=&quot;/marketplace?category=crops&quot;&gt;&#10;                  &lt;Button className=&quot;w-full&quot;&gt;&#10;                    Browse Crops&#10;                  &lt;/Button&gt;&#10;                &lt;/Link&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;&#10;            {/* Tools Category */}&#10;            &lt;Card className=&quot;overflow-hidden hover:shadow-lg transition-shadow&quot;&gt;&#10;              &lt;div&#10;                className=&quot;h-48 bg-cover bg-center relative&quot;&#10;                style={{&#10;                  backgroundImage: 'url(&quot;https://images.unsplash.com/photo-1625246333195-78d9c38ad449?ixlib=rb-4.0.3&amp;w=800&amp;h=400&amp;fit=crop&quot;)'&#10;                }}&#10;              &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40&quot; /&gt;&#10;                &lt;div className=&quot;absolute bottom-4 left-4 text-white&quot;&gt;&#10;                  &lt;Truck className=&quot;w-8 h-8 mb-2&quot; /&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold&quot;&gt;Farm Tools&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;CardContent className=&quot;p-6&quot;&gt;&#10;                &lt;p className=&quot;text-gray-600 mb-4&quot;&gt;&#10;                  Tractors, plows, harvesters, and other essential farming equipment for modern agriculture.&#10;                &lt;/p&gt;&#10;                &lt;Link href=&quot;/marketplace?category=tools&quot;&gt;&#10;                  &lt;Button className=&quot;w-full&quot;&gt;&#10;                    Browse Tools&#10;                  &lt;/Button&gt;&#10;                &lt;/Link&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;&#10;            {/* Medications Category */}&#10;            &lt;Card className=&quot;overflow-hidden hover:shadow-lg transition-shadow&quot;&gt;&#10;              &lt;div&#10;                className=&quot;h-48 bg-cover bg-center relative&quot;&#10;                style={{&#10;                  backgroundImage: 'url(&quot;https://images.unsplash.com/photo-1416879595882-3373a0480b5b?ixlib=rb-4.0.3&amp;w=800&amp;h=400&amp;fit=crop&quot;)'&#10;                }}&#10;              &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40&quot; /&gt;&#10;                &lt;div className=&quot;absolute bottom-4 left-4 text-white&quot;&gt;&#10;                  &lt;Shield className=&quot;w-8 h-8 mb-2&quot; /&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold&quot;&gt;Crop Protection&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;CardContent className=&quot;p-6&quot;&gt;&#10;                &lt;p className=&quot;text-gray-600 mb-4&quot;&gt;&#10;                  Fertilizers, pesticides, and agricultural chemicals to protect and nourish your crops.&#10;                &lt;/p&gt;&#10;                &lt;Link href=&quot;/marketplace?category=medications&quot;&gt;&#10;                  &lt;Button className=&quot;w-full&quot;&gt;&#10;                    Browse Products&#10;                  &lt;/Button&gt;&#10;                &lt;/Link&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Trusted Sellers Section */}&#10;      &lt;section className=&quot;py-16 bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;            &lt;h2 className=&quot;text-3xl font-bold text-gray-900 mb-4&quot;&gt;Trusted Sellers&lt;/h2&gt;&#10;            &lt;p className=&quot;text-gray-600 max-w-2xl mx-auto&quot;&gt;&#10;              Meet our most established farmers and sellers who have been serving the community with quality products&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          {sellersLoading ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {[...Array(6)].map((_, i) =&gt; (&#10;                &lt;Card key={i} className=&quot;animate-pulse p-6&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    &lt;div className=&quot;w-12 h-12 bg-gray-200 rounded-full&quot; /&gt;&#10;                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                      &lt;div className=&quot;h-4 bg-gray-200 rounded mb-2&quot; /&gt;&#10;                      &lt;div className=&quot;h-3 bg-gray-200 rounded&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/Card&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : trustedSellers.length &gt; 0 ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {trustedSellers.map((seller) =&gt; (&#10;                &lt;SellerCard key={seller.id} seller={seller} /&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#10;              &lt;Users className=&quot;w-16 h-16 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-700 mb-2&quot;&gt;No trusted sellers yet&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Our seller community is growing. Check back soon!&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Call to Action Section */}&#10;      &lt;section className=&quot;py-16 bg-green-600 text-white&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4 text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-3xl font-bold mb-4&quot;&gt;Ready to Get Started?&lt;/h2&gt;&#10;          &lt;p className=&quot;text-xl mb-8 opacity-90&quot;&gt;&#10;            Join thousands of farmers and buyers connecting across Ghana&#10;          &lt;/p&gt;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row gap-4 justify-center&quot;&gt;&#10;            &lt;Link href=&quot;/dashboard&quot;&gt;&#10;              &lt;Button size=&quot;lg&quot; variant=&quot;secondary&quot; className=&quot;text-green-700&quot;&gt;&#10;                Start Selling Today&#10;              &lt;/Button&gt;&#10;            &lt;/Link&gt;&#10;            &lt;Link href=&quot;/marketplace&quot;&gt;&#10;              &lt;Button&#10;                size=&quot;lg&quot;&#10;                variant=&quot;outline&quot;&#10;                className=&quot;text-white border-white hover:bg-white hover:text-green-700&quot;&#10;              &gt;&#10;                Browse Products&#10;              &lt;/Button&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useQuery } from &quot;@tanstack/react-query&quot;;&#10;import { Link } from &quot;wouter&quot;;&#10;import { useState } from &quot;react&quot;;&#10;import { Button } from &quot;@/components/ui/button&quot;;&#10;import { Card, CardContent } from &quot;@/components/ui/card&quot;;&#10;import { Badge } from &quot;@/components/ui/badge&quot;;&#10;import { ProductCard } from &quot;@/components/product-card&quot;;&#10;import { SellerCard } from &quot;@/components/seller-card&quot;;&#10;import { WeatherWidget } from &quot;@/components/weather-widget&quot;;&#10;import { AgroConnectLogo } from &quot;@/components/agroconnect-logo&quot;;&#10;import { AuthModal } from &quot;@/components/auth-modal&quot;;&#10;import { useAuth } from &quot;@/lib/auth&quot;;&#10;import {&#10;  Users,&#10;  Package,&#10;  Handshake,&#10;  MapPin,&#10;  Star,&#10;  Clock,&#10;  TrendingUp,&#10;  Leaf,&#10;  Shield,&#10;  Truck,&#10;  LogIn,&#10;  UserPlus&#10;} from &quot;lucide-react&quot;;&#10;&#10;interface StatsData {&#10;  users: number;&#10;  products: number;&#10;  transactions: number;&#10;  regions: number;&#10;}&#10;&#10;interface Product {&#10;  id: string;&#10;  name: string;&#10;  description: string;&#10;  price: string;&#10;  unit: string;&#10;  category: string;&#10;  location: string;&#10;  imageUrl: string;&#10;  sellerId: string;&#10;  featured?: boolean;&#10;  active: boolean;&#10;  createdAt: string;&#10;}&#10;&#10;interface User {&#10;  id: string;&#10;  firstName: string;&#10;  lastName: string;&#10;  email: string;&#10;  accountType: string;&#10;  location: string;&#10;  phone: string;&#10;  verified: boolean;&#10;  createdAt: string;&#10;}&#10;&#10;export default function Home() {&#10;  const { user } = useAuth();&#10;  const [showAuthModal, setShowAuthModal] = useState(false);&#10;  const [authMode, setAuthMode] = useState&lt;'login' | 'register'&gt;('login');&#10;&#10;  // Fetch platform stats&#10;  const { data: stats } = useQuery&lt;StatsData&gt;({&#10;    queryKey: ['platform-stats'],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch('/api/stats');&#10;      if (!response.ok) throw new Error('Failed to fetch stats');&#10;      return response.json();&#10;    },&#10;  });&#10;&#10;  // Fetch featured products&#10;  const { data: featuredProducts = [], isLoading: featuredLoading } = useQuery&lt;Product[]&gt;({&#10;    queryKey: ['featured-products'],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch('/api/products/featured');&#10;      if (!response.ok) throw new Error('Failed to fetch featured products');&#10;      return response.json();&#10;    },&#10;  });&#10;&#10;  // Fetch latest products&#10;  const { data: latestProducts = [], isLoading: latestLoading } = useQuery&lt;Product[]&gt;({&#10;    queryKey: ['latest-products'],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch('/api/products/latest?limit=6');&#10;      if (!response.ok) throw new Error('Failed to fetch latest products');&#10;      return response.json();&#10;    },&#10;  });&#10;&#10;  // Fetch trusted sellers (oldest users)&#10;  const { data: trustedSellers = [], isLoading: sellersLoading } = useQuery&lt;User[]&gt;({&#10;    queryKey: ['trusted-sellers'],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch('/api/users/trusted-sellers?limit=6');&#10;      if (!response.ok) throw new Error('Failed to fetch trusted sellers');&#10;      return response.json();&#10;    },&#10;  });&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      {/* Hero Section */}&#10;      &lt;section className=&quot;bg-gradient-to-r from-green-600 to-green-700 text-white py-20&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4 text-center&quot;&gt;&#10;          {/* Logo and Login/Register buttons */}&#10;          &lt;div className=&quot;flex justify-between items-center mb-8&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              &lt;AgroConnectLogo className=&quot;w-16 h-16&quot; /&gt;&#10;              &lt;h1 className=&quot;text-2xl font-bold text-white&quot;&gt;FarmConnect Ghana&lt;/h1&gt;&#10;            &lt;/div&gt;&#10;            &#10;            {!user &amp;&amp; (&#10;              &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  size=&quot;sm&quot;&#10;                  className=&quot;text-white border-white hover:bg-white hover:text-green-700&quot;&#10;                  onClick={() =&gt; {&#10;                    setAuthMode('login');&#10;                    setShowAuthModal(true);&#10;                  }}&#10;                &gt;&#10;                  &lt;LogIn className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                  Login&#10;                &lt;/Button&gt;&#10;                &lt;Button&#10;                  variant=&quot;secondary&quot;&#10;                  size=&quot;sm&quot;&#10;                  className=&quot;text-green-700&quot;&#10;                  onClick={() =&gt; {&#10;                    setAuthMode('register');&#10;                    setShowAuthModal(true);&#10;                  }}&#10;                &gt;&#10;                  &lt;UserPlus className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                  Register&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          &lt;h1 className=&quot;text-4xl md:text-6xl font-bold mb-6&quot;&gt;&#10;            Connect Ghana's Farmers&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-xl md:text-2xl mb-8 opacity-90&quot;&gt;&#10;            Bridging the gap between farmers and buyers with fresh produce, tools, and expertise&#10;          &lt;/p&gt;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row gap-4 justify-center&quot;&gt;&#10;            &lt;Link href=&quot;/marketplace&quot;&gt;&#10;              &lt;Button size=&quot;lg&quot; variant=&quot;secondary&quot; className=&quot;text-green-700&quot;&gt;&#10;                Browse Products&#10;              &lt;/Button&gt;&#10;            &lt;/Link&gt;&#10;            &lt;Link href=&quot;/dashboard&quot;&gt;&#10;              &lt;Button size=&quot;lg&quot; variant=&quot;outline&quot; className=&quot;text-white border-white hover:bg-white hover:text-green-700&quot;&gt;&#10;                Start Selling&#10;              &lt;/Button&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Auth Modal */}&#10;      &lt;AuthModal&#10;        isOpen={showAuthModal}&#10;        onClose={() =&gt; setShowAuthModal(false)}&#10;        mode={authMode}&#10;        onModeChange={setAuthMode}&#10;      /&gt;&#10;&#10;      {/* Stats Section */}&#10;      &lt;section className=&quot;py-16 bg-white&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-8&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;div className=&quot;bg-green-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                &lt;Users className=&quot;w-8 h-8 text-green-600&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;h3 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;{stats?.users || 0}&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;Active Users&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;div className=&quot;bg-blue-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                &lt;Package className=&quot;w-8 h-8 text-blue-600&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;h3 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;{stats?.products || 0}&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;Products Listed&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;div className=&quot;bg-yellow-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                &lt;Handshake className=&quot;w-8 h-8 text-yellow-600&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;h3 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;{stats?.transactions || 0}&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;Successful Deals&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;div className=&quot;bg-purple-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;                &lt;MapPin className=&quot;w-8 h-8 text-purple-600&quot; /&gt;&#10;              &lt;/div&gt;&#10;              &lt;h3 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;{stats?.regions || 0}&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;Regions Covered&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Weather Widget Section */}&#10;      &lt;section className=&quot;py-8 bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;WeatherWidget /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Featured Products Section */}&#10;      &lt;section className=&quot;py-16 bg-white&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-3xl font-bold text-gray-900 mb-2&quot;&gt;Featured Products&lt;/h2&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;Premium products from verified sellers&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;Link href=&quot;/marketplace&quot;&gt;&#10;              &lt;Button variant=&quot;outline&quot;&gt;View All Products&lt;/Button&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;&#10;          {featuredLoading ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {[...Array(6)].map((_, i) =&gt; (&#10;                &lt;Card key={i} className=&quot;animate-pulse&quot;&gt;&#10;                  &lt;div className=&quot;h-48 bg-gray-200&quot; /&gt;&#10;                  &lt;CardContent className=&quot;p-4&quot;&gt;&#10;                    &lt;div className=&quot;h-4 bg-gray-200 rounded mb-2&quot; /&gt;&#10;                    &lt;div className=&quot;h-3 bg-gray-200 rounded mb-4&quot; /&gt;&#10;                    &lt;div className=&quot;h-8 bg-gray-200 rounded&quot; /&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : featuredProducts.length &gt; 0 ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {featuredProducts.map((product) =&gt; (&#10;                &lt;div key={product.id} className=&quot;relative&quot;&gt;&#10;                  &lt;Badge className=&quot;absolute top-4 left-4 z-10 bg-yellow-500 text-white&quot;&gt;&#10;                    &lt;Star className=&quot;w-3 h-3 mr-1&quot; /&gt;&#10;                    Featured&#10;                  &lt;/Badge&gt;&#10;                  &lt;ProductCard product={product} /&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#10;              &lt;Package className=&quot;w-16 h-16 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-700 mb-2&quot;&gt;No featured products yet&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Check back soon for featured products from our sellers&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Latest Products Section */}&#10;      &lt;section className=&quot;py-16 bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-8&quot;&gt;&#10;            &lt;div&gt;&#10;              &lt;h2 className=&quot;text-3xl font-bold text-gray-900 mb-2&quot;&gt;Latest Products&lt;/h2&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;Fresh listings from the marketplace&lt;/p&gt;&#10;            &lt;/div&gt;&#10;            &lt;Link href=&quot;/marketplace&quot;&gt;&#10;              &lt;Button variant=&quot;outline&quot;&gt;&#10;                &lt;TrendingUp className=&quot;w-4 h-4 mr-2&quot; /&gt;&#10;                Explore Marketplace&#10;              &lt;/Button&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;&#10;          {latestLoading ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {[...Array(6)].map((_, i) =&gt; (&#10;                &lt;Card key={i} className=&quot;animate-pulse&quot;&gt;&#10;                  &lt;div className=&quot;h-48 bg-gray-200&quot; /&gt;&#10;                  &lt;CardContent className=&quot;p-4&quot;&gt;&#10;                    &lt;div className=&quot;h-4 bg-gray-200 rounded mb-2&quot; /&gt;&#10;                    &lt;div className=&quot;h-3 bg-gray-200 rounded mb-4&quot; /&gt;&#10;                    &lt;div className=&quot;h-8 bg-gray-200 rounded&quot; /&gt;&#10;                  &lt;/CardContent&gt;&#10;                &lt;/Card&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : latestProducts.length &gt; 0 ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {latestProducts.map((product) =&gt; (&#10;                &lt;div key={product.id} className=&quot;relative&quot;&gt;&#10;                  &lt;Badge className=&quot;absolute top-4 left-4 z-10 bg-green-500 text-white&quot;&gt;&#10;                    &lt;Clock className=&quot;w-3 h-3 mr-1&quot; /&gt;&#10;                    New&#10;                  &lt;/Badge&gt;&#10;                  &lt;ProductCard product={product} /&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#10;              &lt;Package className=&quot;w-16 h-16 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-700 mb-2&quot;&gt;No products available&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Be the first to list a product on our marketplace!&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Categories Preview Section */}&#10;      &lt;section className=&quot;py-16 bg-white&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;            &lt;h2 className=&quot;text-3xl font-bold text-gray-900 mb-4&quot;&gt;What You Can Find&lt;/h2&gt;&#10;            &lt;p className=&quot;text-gray-600 max-w-2xl mx-auto&quot;&gt;&#10;              From fresh produce to farming equipment, discover everything you need for a successful farming operation&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;div className=&quot;grid grid-cols-1 md:grid-cols-3 gap-8&quot;&gt;&#10;            {/* Crops Category */}&#10;            &lt;Card className=&quot;overflow-hidden hover:shadow-lg transition-shadow&quot;&gt;&#10;              &lt;div&#10;                className=&quot;h-48 bg-cover bg-center relative&quot;&#10;                style={{&#10;                  backgroundImage: 'url(&quot;https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?ixlib=rb-4.0.3&amp;w=800&amp;h=400&amp;fit=crop&quot;)'&#10;                }}&#10;              &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40&quot; /&gt;&#10;                &lt;div className=&quot;absolute bottom-4 left-4 text-white&quot;&gt;&#10;                  &lt;Leaf className=&quot;w-8 h-8 mb-2&quot; /&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold&quot;&gt;Fresh Crops&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;CardContent className=&quot;p-6&quot;&gt;&#10;                &lt;p className=&quot;text-gray-600 mb-4&quot;&gt;&#10;                  Fresh vegetables, grains, fruits, and cash crops from local farmers across Ghana.&#10;                &lt;/p&gt;&#10;                &lt;Link href=&quot;/marketplace?category=crops&quot;&gt;&#10;                  &lt;Button className=&quot;w-full&quot;&gt;&#10;                    Browse Crops&#10;                  &lt;/Button&gt;&#10;                &lt;/Link&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;&#10;            {/* Tools Category */}&#10;            &lt;Card className=&quot;overflow-hidden hover:shadow-lg transition-shadow&quot;&gt;&#10;              &lt;div&#10;                className=&quot;h-48 bg-cover bg-center relative&quot;&#10;                style={{&#10;                  backgroundImage: 'url(&quot;https://images.unsplash.com/photo-1625246333195-78d9c38ad449?ixlib=rb-4.0.3&amp;w=800&amp;h=400&amp;fit=crop&quot;)'&#10;                }}&#10;              &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40&quot; /&gt;&#10;                &lt;div className=&quot;absolute bottom-4 left-4 text-white&quot;&gt;&#10;                  &lt;Truck className=&quot;w-8 h-8 mb-2&quot; /&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold&quot;&gt;Farm Tools&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;CardContent className=&quot;p-6&quot;&gt;&#10;                &lt;p className=&quot;text-gray-600 mb-4&quot;&gt;&#10;                  Tractors, plows, harvesters, and other essential farming equipment for modern agriculture.&#10;                &lt;/p&gt;&#10;                &lt;Link href=&quot;/marketplace?category=tools&quot;&gt;&#10;                  &lt;Button className=&quot;w-full&quot;&gt;&#10;                    Browse Tools&#10;                  &lt;/Button&gt;&#10;                &lt;/Link&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;&#10;            {/* Medications Category */}&#10;            &lt;Card className=&quot;overflow-hidden hover:shadow-lg transition-shadow&quot;&gt;&#10;              &lt;div&#10;                className=&quot;h-48 bg-cover bg-center relative&quot;&#10;                style={{&#10;                  backgroundImage: 'url(&quot;https://images.unsplash.com/photo-1416879595882-3373a0480b5b?ixlib=rb-4.0.3&amp;w=800&amp;h=400&amp;fit=crop&quot;)'&#10;                }}&#10;              &gt;&#10;                &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-40&quot; /&gt;&#10;                &lt;div className=&quot;absolute bottom-4 left-4 text-white&quot;&gt;&#10;                  &lt;Shield className=&quot;w-8 h-8 mb-2&quot; /&gt;&#10;                  &lt;h3 className=&quot;text-xl font-bold&quot;&gt;Crop Protection&lt;/h3&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;              &lt;CardContent className=&quot;p-6&quot;&gt;&#10;                &lt;p className=&quot;text-gray-600 mb-4&quot;&gt;&#10;                  Fertilizers, pesticides, and agricultural chemicals to protect and nourish your crops.&#10;                &lt;/p&gt;&#10;                &lt;Link href=&quot;/marketplace?category=medications&quot;&gt;&#10;                  &lt;Button className=&quot;w-full&quot;&gt;&#10;                    Browse Products&#10;                  &lt;/Button&gt;&#10;                &lt;/Link&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Trusted Sellers Section */}&#10;      &lt;section className=&quot;py-16 bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4&quot;&gt;&#10;          &lt;div className=&quot;text-center mb-12&quot;&gt;&#10;            &lt;h2 className=&quot;text-3xl font-bold text-gray-900 mb-4&quot;&gt;Trusted Sellers&lt;/h2&gt;&#10;            &lt;p className=&quot;text-gray-600 max-w-2xl mx-auto&quot;&gt;&#10;              Meet our most established farmers and sellers who have been serving the community with quality products&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          {sellersLoading ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {[...Array(6)].map((_, i) =&gt; (&#10;                &lt;Card key={i} className=&quot;animate-pulse p-6&quot;&gt;&#10;                  &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                    &lt;div className=&quot;w-12 h-12 bg-gray-200 rounded-full&quot; /&gt;&#10;                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                      &lt;div className=&quot;h-4 bg-gray-200 rounded mb-2&quot; /&gt;&#10;                      &lt;div className=&quot;h-3 bg-gray-200 rounded&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/Card&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : trustedSellers.length &gt; 0 ? (&#10;            &lt;div className=&quot;grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;              {trustedSellers.map((seller) =&gt; (&#10;                &lt;SellerCard key={seller.id} seller={seller} /&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          ) : (&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#10;              &lt;Users className=&quot;w-16 h-16 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;              &lt;h3 className=&quot;text-lg font-semibold text-gray-700 mb-2&quot;&gt;No trusted sellers yet&lt;/h3&gt;&#10;              &lt;p className=&quot;text-gray-500&quot;&gt;Our seller community is growing. Check back soon!&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;&#10;      {/* Call to Action Section */}&#10;      &lt;section className=&quot;py-16 bg-green-600 text-white&quot;&gt;&#10;        &lt;div className=&quot;container mx-auto px-4 text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-3xl font-bold mb-4&quot;&gt;Ready to Get Started?&lt;/h2&gt;&#10;          &lt;p className=&quot;text-xl mb-8 opacity-90&quot;&gt;&#10;            Join thousands of farmers and buyers connecting across Ghana&#10;          &lt;/p&gt;&#10;          &lt;div className=&quot;flex flex-col sm:flex-row gap-4 justify-center&quot;&gt;&#10;            &lt;Link href=&quot;/dashboard&quot;&gt;&#10;              &lt;Button size=&quot;lg&quot; variant=&quot;secondary&quot; className=&quot;text-green-700&quot;&gt;&#10;                Start Selling Today&#10;              &lt;/Button&gt;&#10;            &lt;/Link&gt;&#10;            &lt;Link href=&quot;/marketplace&quot;&gt;&#10;              &lt;Button&#10;                size=&quot;lg&quot;&#10;                variant=&quot;outline&quot;&#10;                className=&quot;text-white border-white hover:bg-white hover:text-green-700&quot;&#10;              &gt;&#10;                Browse Products&#10;              &lt;/Button&gt;&#10;            &lt;/Link&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/section&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client/src/pages/marketplace.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/pages/marketplace.tsx" />
              <option name="originalContent" value="import { useState, useEffect } from 'react';&#10;import { useQuery } from '@tanstack/react-query';&#10;import { useLocation } from 'wouter';&#10;import { Header } from '@/components/header';&#10;import { ProductCard } from '@/components/product-card';&#10;import { Button } from '@/components/ui/button';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { Product } from '@shared/schema';&#10;import { Search, Filter, Loader2 } from 'lucide-react';&#10;&#10;export default function Marketplace() {&#10;  const [location, setLocation] = useLocation();&#10;  const [searchParams, setSearchParams] = useState({&#10;    search: '',&#10;    category: '',&#10;    sortBy: 'newest',&#10;    minPrice: '',&#10;    maxPrice: '',&#10;  });&#10;&#10;  // Parse URL parameters on component mount&#10;  useEffect(() =&gt; {&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    setSearchParams({&#10;      search: urlParams.get('search') || '',&#10;      category: urlParams.get('category') || '',&#10;      sortBy: urlParams.get('sortBy') || 'newest',&#10;      minPrice: urlParams.get('minPrice') || '',&#10;      maxPrice: urlParams.get('maxPrice') || '',&#10;    });&#10;  }, [location]);&#10;&#10;  const buildQueryParams = () =&gt; {&#10;    const params = new URLSearchParams();&#10;    if (searchParams.search) params.set('search', searchParams.search);&#10;    if (searchParams.category) params.set('category', searchParams.category);&#10;    return params.toString();&#10;  };&#10;&#10;  // Fixed React Query implementation&#10;  const { data: products = [], isLoading, error } = useQuery({&#10;    queryKey: ['products', buildQueryParams()],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch(`/api/products?${buildQueryParams()}`);&#10;      if (!response.ok) {&#10;        throw new Error(`HTTP error! status: ${response.status}`);&#10;      }&#10;      const data = await response.json();&#10;      return data as Product[];&#10;    },&#10;    staleTime: 5 * 60 * 1000, // 5 minutes&#10;  });&#10;&#10;  const handleSearchChange = (field: string, value: string) =&gt; {&#10;    const newParams = { ...searchParams, [field]: value };&#10;    setSearchParams(newParams);&#10;&#10;    // Update URL&#10;    const urlParams = new URLSearchParams();&#10;    Object.entries(newParams).forEach(([key, val]) =&gt; {&#10;      if (val) urlParams.set(key, val);&#10;    });&#10;&#10;    const newUrl = `/marketplace${urlParams.toString() ? `?${urlParams.toString()}` : ''}`;&#10;    setLocation(newUrl);&#10;  };&#10;&#10;  const filteredAndSortedProducts = products&#10;    .filter(product =&gt; {&#10;      // Category filter&#10;      const matchesCategory = !searchParams.category || product.category === searchParams.category;&#10;&#10;      // Price filter&#10;      const matchesCategory = !searchParams.category || product.category === searchParams.category;&#10;&#10;&#10;      return matchesCategory &amp;&amp; matchesPrice;&#10;                          (!searchParams.maxPrice || parseFloat(product.price) &lt;= parseFloat(searchParams.maxPrice));&#10;&#10;      return matchesCategory &amp;&amp; matchesPrice;&#10;    })&#10;    .sort((a, b) =&gt; {&#10;      switch (searchParams.sortBy) {&#10;        case 'price-low':&#10;          return parseFloat(a.price) - parseFloat(b.price);&#10;        case 'price-high':&#10;          return parseFloat(b.price) - parseFloat(a.price);&#10;        case 'name':&#10;          return a.name.localeCompare(b.name);&#10;        case 'newest':&#10;        default:&#10;          return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();&#10;      }&#10;    });&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;Header /&gt;&#10;&#10;      &lt;div className=&quot;container mx-auto px-4 py-8&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col lg:flex-row gap-8&quot;&gt;&#10;          {/* Sidebar Filters */}&#10;          &lt;div className=&quot;lg:w-1/4&quot;&gt;&#10;            &lt;Card className=&quot;sticky top-24&quot;&gt;&#10;              &lt;CardHeader&gt;&#10;                &lt;CardTitle className=&quot;flex items-center&quot;&gt;&#10;                  &lt;Filter className=&quot;w-5 h-5 mr-2&quot; /&gt;&#10;                  Filters&#10;                &lt;/CardTitle&gt;&#10;              &lt;/CardHeader&gt;&#10;              &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                {/* Search */}&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;search&quot;&gt;Search Products&lt;/Label&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;Search className=&quot;absolute left-3 top-3 h-4 w-4 text-gray-400&quot; /&gt;&#10;                    &lt;Input&#10;                      id=&quot;search&quot;&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      value={searchParams.search}&#10;                      onChange={(e) =&gt; handleSearchChange('search', e.target.value)}&#10;                      className=&quot;pl-10&quot;&#10;                    /&gt;&#10;                {/* Category Filter - FIXED */}&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter - FIXED */}&#10;                &lt;div&gt;&#10;                  &lt;Label&gt;Category&lt;/Label&gt;&#10;                  &lt;Select&#10;                    value={searchParams.category || 'all'}&#10;                    onValueChange={(value) =&gt; handleSearchChange('category', value === 'all' ? '' : value)}&#10;                  &gt;&#10;                    &lt;SelectTrigger&gt;&#10;                      &lt;SelectValue placeholder=&quot;All Categories&quot; /&gt;&#10;                    &lt;/SelectTrigger&gt;&#10;                      &lt;SelectItem value=&quot;tools&quot;&gt;Tools &amp; Equipment&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;all&quot;&gt;All Categories&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;crops&quot;&gt;Crops&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;tools&quot;&gt;Tools &amp; Equipment&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;medications&quot;&gt;Medications&lt;/SelectItem&gt;&#10;                    &lt;/SelectContent&gt;&#10;                  &lt;/Select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div&gt;&#10;                  &lt;Label&gt;Price Range (GH₵)&lt;/Label&gt;&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;Input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Min&quot;&#10;                      value={searchParams.minPrice}&#10;                      onChange={(e) =&gt; handleSearchChange('minPrice', e.target.value)}&#10;                    /&gt;&#10;                    &lt;Input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Max&quot;&#10;                      value={searchParams.maxPrice}&#10;                      onChange={(e) =&gt; handleSearchChange('maxPrice', e.target.value)}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  onClick={() =&gt; {&#10;                    setSearchParams({&#10;                      search: '',&#10;                      category: '',&#10;                      sortBy: 'newest',&#10;                      minPrice: '',&#10;                      maxPrice: '',&#10;                    });&#10;                    setLocation('/marketplace');&#10;                  }}&#10;                  className=&quot;w-full&quot;&#10;                &gt;&#10;                  Clear Filters&#10;                &lt;/Button&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Main Content */}&#10;          &lt;div className=&quot;lg:w-3/4&quot;&gt;&#10;            {/* Header with sort */}&#10;            &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Marketplace&lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 mt-1&quot;&gt;&#10;                  {filteredAndSortedProducts.length} product(s) found&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;sort&quot; className=&quot;text-sm font-medium&quot;&gt;&#10;                  Sort by:&#10;                &lt;/Label&gt;&#10;                &lt;Select value={searchParams.sortBy} onValueChange={(value) =&gt; handleSearchChange('sortBy', value)}&gt;&#10;                  &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt;&#10;                    &lt;SelectValue /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;newest&quot;&gt;Newest First&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;price-low&quot;&gt;Price: Low to High&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;price-high&quot;&gt;Price: High to Low&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;name&quot;&gt;Name: A to Z&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Loading State */}&#10;            {isLoading &amp;&amp; (&#10;              &lt;div className=&quot;flex justify-center items-center py-12&quot;&gt;&#10;                &lt;Loader2 className=&quot;h-8 w-8 animate-spin&quot; /&gt;&#10;                &lt;span className=&quot;ml-2&quot;&gt;Loading products...&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Error State */}&#10;            {error &amp;&amp; (&#10;              &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                &lt;p className=&quot;text-red-600&quot;&gt;Failed to load products. Please try again.&lt;/p&gt;&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  onClick={() =&gt; window.location.reload()}&#10;                  className=&quot;mt-4&quot;&#10;                &gt;&#10;                  Retry&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Products Grid */}&#10;            {!isLoading &amp;&amp; !error &amp;&amp; (&#10;              &lt;&gt;&#10;                {filteredAndSortedProducts.length &gt; 0 ? (&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {filteredAndSortedProducts.map((product) =&gt; (&#10;                      &lt;ProductCard key={product.id} product={product} /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                    &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#10;                      &lt;Search className=&quot;h-16 w-16 mx-auto&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-700 mb-2&quot;&gt;&#10;                      No products found&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-500 mb-4&quot;&gt;&#10;                      {products.length === 0 ? 'No products available at the moment' : 'Try adjusting your search criteria or filters'}&#10;                    &lt;/p&gt;&#10;                    &lt;Button&#10;                      variant=&quot;outline&quot;&#10;                      onClick={() =&gt; {&#10;                        setSearchParams({&#10;                          search: '',&#10;                          category: '',&#10;                          sortBy: 'newest',&#10;                          minPrice: '',&#10;                          maxPrice: '',&#10;                        });&#10;                        setLocation('/marketplace');&#10;                      }}&#10;                    &gt;&#10;                      Clear all filters&#10;                    &lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useEffect } from 'react';&#10;import { useQuery } from '@tanstack/react-query';&#10;import { useLocation } from 'wouter';&#10;import { Header } from '@/components/header';&#10;import { ProductCard } from '@/components/product-card';&#10;import { Button } from '@/components/ui/button';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { Product } from '@shared/schema';&#10;import { Search, Filter, Loader2 } from 'lucide-react';&#10;&#10;export default function Marketplace() {&#10;  const [location, setLocation] = useLocation();&#10;  const [searchParams, setSearchParams] = useState({&#10;    search: '',&#10;    category: '',&#10;    sortBy: 'newest',&#10;    minPrice: '',&#10;    maxPrice: '',&#10;  });&#10;&#10;  // Parse URL parameters on component mount&#10;  useEffect(() =&gt; {&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    setSearchParams({&#10;      search: urlParams.get('search') || '',&#10;      category: urlParams.get('category') || '',&#10;      sortBy: urlParams.get('sortBy') || 'newest',&#10;      minPrice: urlParams.get('minPrice') || '',&#10;      maxPrice: urlParams.get('maxPrice') || '',&#10;    });&#10;  }, [location]);&#10;&#10;  const buildQueryParams = () =&gt; {&#10;    const params = new URLSearchParams();&#10;    if (searchParams.search) params.set('search', searchParams.search);&#10;    if (searchParams.category) params.set('category', searchParams.category);&#10;    return params.toString();&#10;  };&#10;&#10;  // Fixed React Query implementation&#10;  const { data: products = [], isLoading, error } = useQuery({&#10;    queryKey: ['products', buildQueryParams()],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch(`/api/products?${buildQueryParams()}`);&#10;      if (!response.ok) {&#10;        throw new Error(`HTTP error! status: ${response.status}`);&#10;      }&#10;      const data = await response.json();&#10;      return data as Product[];&#10;    },&#10;    staleTime: 5 * 60 * 1000, // 5 minutes&#10;  });&#10;&#10;  const handleSearchChange = (field: string, value: string) =&gt; {&#10;    const newParams = { ...searchParams, [field]: value };&#10;    setSearchParams(newParams);&#10;&#10;    // Update URL&#10;    const urlParams = new URLSearchParams();&#10;    Object.entries(newParams).forEach(([key, val]) =&gt; {&#10;      if (val) urlParams.set(key, val);&#10;    });&#10;&#10;    const newUrl = `/marketplace${urlParams.toString() ? `?${urlParams.toString()}` : ''}`;&#10;    setLocation(newUrl);&#10;  };&#10;&#10;  const filteredAndSortedProducts = products&#10;    .filter(product =&gt; {&#10;      // Only do client-side price filtering since server handles category and search&#10;      const matchesPrice = (!searchParams.minPrice || parseFloat(product.price) &gt;= parseFloat(searchParams.minPrice)) &amp;&amp;&#10;                          (!searchParams.maxPrice || parseFloat(product.price) &lt;= parseFloat(searchParams.maxPrice));&#10;      &#10;      return matchesPrice;&#10;    })&#10;    .sort((a, b) =&gt; {&#10;      switch (searchParams.sortBy) {&#10;        case 'price-low':&#10;          return parseFloat(a.price) - parseFloat(b.price);&#10;        case 'price-high':&#10;          return parseFloat(b.price) - parseFloat(a.price);&#10;        case 'name':&#10;          return a.name.localeCompare(b.name);&#10;        case 'newest':&#10;        default:&#10;          return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();&#10;      }&#10;    });&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;Header /&gt;&#10;&#10;      &lt;div className=&quot;container mx-auto px-4 py-8&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col lg:flex-row gap-8&quot;&gt;&#10;          {/* Sidebar Filters */}&#10;          &lt;div className=&quot;lg:w-1/4&quot;&gt;&#10;            &lt;Card className=&quot;sticky top-24&quot;&gt;&#10;              &lt;CardHeader&gt;&#10;                &lt;CardTitle className=&quot;flex items-center&quot;&gt;&#10;                  &lt;Filter className=&quot;w-5 h-5 mr-2&quot; /&gt;&#10;                  Filters&#10;                &lt;/CardTitle&gt;&#10;              &lt;/CardHeader&gt;&#10;              &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                {/* Search */}&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;search&quot;&gt;Search Products&lt;/Label&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;Search className=&quot;absolute left-3 top-3 h-4 w-4 text-gray-400&quot; /&gt;&#10;                    &lt;Input&#10;                      id=&quot;search&quot;&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      value={searchParams.search}&#10;                      onChange={(e) =&gt; handleSearchChange('search', e.target.value)}&#10;                      className=&quot;pl-10&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter - FIXED VALUES */}&#10;                &lt;div&gt;&#10;                  &lt;Label&gt;Category&lt;/Label&gt;&#10;                  &lt;Select&#10;                    value={searchParams.category || 'all'}&#10;                    onValueChange={(value) =&gt; handleSearchChange('category', value === 'all' ? '' : value)}&#10;                  &gt;&#10;                    &lt;SelectTrigger&gt;&#10;                      &lt;SelectValue placeholder=&quot;All Categories&quot; /&gt;&#10;                    &lt;/SelectTrigger&gt;&#10;                    &lt;SelectContent&gt;&#10;                      &lt;SelectItem value=&quot;all&quot;&gt;All Categories&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;crops&quot;&gt;Crops&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;tools&quot;&gt;Tools&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;medications&quot;&gt;Medications&lt;/SelectItem&gt;&#10;                    &lt;/SelectContent&gt;&#10;                  &lt;/Select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div&gt;&#10;                  &lt;Label&gt;Price Range (GH₵)&lt;/Label&gt;&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;Input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Min&quot;&#10;                      value={searchParams.minPrice}&#10;                      onChange={(e) =&gt; handleSearchChange('minPrice', e.target.value)}&#10;                    /&gt;&#10;                    &lt;Input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Max&quot;&#10;                      value={searchParams.maxPrice}&#10;                      onChange={(e) =&gt; handleSearchChange('maxPrice', e.target.value)}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  onClick={() =&gt; {&#10;                    setSearchParams({&#10;                      search: '',&#10;                      category: '',&#10;                      sortBy: 'newest',&#10;                      minPrice: '',&#10;                      maxPrice: '',&#10;                    });&#10;                    setLocation('/marketplace');&#10;                  }}&#10;                  className=&quot;w-full&quot;&#10;                &gt;&#10;                  Clear Filters&#10;                &lt;/Button&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Main Content */}&#10;          &lt;div className=&quot;lg:w-3/4&quot;&gt;&#10;            {/* Header with sort */}&#10;            &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Marketplace&lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 mt-1&quot;&gt;&#10;                  {filteredAndSortedProducts.length} product(s) found&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;sort&quot; className=&quot;text-sm font-medium&quot;&gt;&#10;                  Sort by:&#10;                &lt;/Label&gt;&#10;                &lt;Select value={searchParams.sortBy} onValueChange={(value) =&gt; handleSearchChange('sortBy', value)}&gt;&#10;                  &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt;&#10;                    &lt;SelectValue /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;newest&quot;&gt;Newest First&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;price-low&quot;&gt;Price: Low to High&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;price-high&quot;&gt;Price: High to Low&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;name&quot;&gt;Name: A to Z&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Loading State */}&#10;            {isLoading &amp;&amp; (&#10;              &lt;div className=&quot;flex justify-center items-center py-12&quot;&gt;&#10;                &lt;Loader2 className=&quot;h-8 w-8 animate-spin&quot; /&gt;&#10;                &lt;span className=&quot;ml-2&quot;&gt;Loading products...&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Error State */}&#10;            {error &amp;&amp; (&#10;              &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                &lt;p className=&quot;text-red-600&quot;&gt;Failed to load products. Please try again.&lt;/p&gt;&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  onClick={() =&gt; window.location.reload()}&#10;                  className=&quot;mt-4&quot;&#10;                &gt;&#10;                  Retry&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Products Grid */}&#10;            {!isLoading &amp;&amp; !error &amp;&amp; (&#10;              &lt;&gt;&#10;                {filteredAndSortedProducts.length &gt; 0 ? (&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {filteredAndSortedProducts.map((product) =&gt; (&#10;                      &lt;ProductCard key={product.id} product={product} /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                    &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#10;                      &lt;Search className=&quot;h-16 w-16 mx-auto&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-700 mb-2&quot;&gt;&#10;                      No products found&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-500 mb-4&quot;&gt;&#10;                      {products.length === 0 ? 'No products available at the moment' : 'Try adjusting your search criteria or filters'}&#10;                    &lt;/p&gt;&#10;                    &lt;Button&#10;                      variant=&quot;outline&quot;&#10;                      onClick={() =&gt; {&#10;                        setSearchParams({&#10;                          search: '',&#10;                          category: '',&#10;                          sortBy: 'newest',&#10;                          minPrice: '',&#10;                          maxPrice: '',&#10;                        });&#10;                        setLocation('/marketplace');&#10;                      }}&#10;                    &gt;&#10;                      Clear all filters&#10;                    &lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/drizzle.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/drizzle.config.ts" />
              <option name="originalContent" value="import { defineConfig } from &quot;drizzle-kit&quot;;&#10;&#10;export default defineConfig({&#10;  schema: &quot;./server/db/schema.ts&quot;,&#10;  out: &quot;./drizzle&quot;,&#10;  dialect: &quot;postgresql&quot;,&#10;  dbCredentials: {&#10;    url: process.env.DATABASE_URL!,&#10;  },&#10;});&#10;" />
              <option name="updatedContent" value="import { defineConfig } from &quot;drizzle-kit&quot;;&#10;&#10;export default defineConfig({&#10;  schema: &quot;./server/db/schema.ts&quot;,&#10;  out: &quot;./drizzle&quot;,&#10;  driver: &quot;pg&quot;,&#10;  dbCredentials: {&#10;    connectionString: process.env.DATABASE_URL!,&#10;  },&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;rest-express&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;license&quot;: &quot;MIT&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;NODE_ENV=development tsx server/index.ts&quot;,&#10;    &quot;build&quot;: &quot;vite build &amp;&amp; esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist&quot;,&#10;    &quot;start&quot;: &quot;NODE_ENV=production node dist/index.js&quot;,&#10;    &quot;check&quot;: &quot;tsc&quot;,&#10;    &quot;db:push&quot;: &quot;drizzle-kit push&quot;,&#10;    &quot;db:migrate&quot;: &quot;drizzle-kit migrate&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@hookform/resolvers&quot;: &quot;^3.10.0&quot;,&#10;    &quot;@jridgewell/trace-mapping&quot;: &quot;^0.3.25&quot;,&#10;    &quot;@neondatabase/serverless&quot;: &quot;^0.10.4&quot;,&#10;    &quot;@radix-ui/react-accordion&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-alert-dialog&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-aspect-ratio&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-avatar&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-checkbox&quot;: &quot;^1.1.5&quot;,&#10;    &quot;@radix-ui/react-collapsible&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-context-menu&quot;: &quot;^2.2.7&quot;,&#10;    &quot;@radix-ui/react-dialog&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-dropdown-menu&quot;: &quot;^2.1.7&quot;,&#10;    &quot;@radix-ui/react-hover-card&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-label&quot;: &quot;^2.1.3&quot;,&#10;    &quot;@radix-ui/react-menubar&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-navigation-menu&quot;: &quot;^1.2.6&quot;,&#10;    &quot;@radix-ui/react-popover&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-progress&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-radio-group&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-scroll-area&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-select&quot;: &quot;^2.1.7&quot;,&#10;    &quot;@radix-ui/react-separator&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-slider&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-slot&quot;: &quot;^1.2.0&quot;,&#10;    &quot;@radix-ui/react-switch&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-tabs&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-toast&quot;: &quot;^1.2.7&quot;,&#10;    &quot;@radix-ui/react-toggle&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-toggle-group&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-tooltip&quot;: &quot;^1.2.0&quot;,&#10;    &quot;@tanstack/react-query&quot;: &quot;^5.60.5&quot;,&#10;    &quot;@types/bcrypt&quot;: &quot;^6.0.0&quot;,&#10;    &quot;@types/jsonwebtoken&quot;: &quot;^9.0.10&quot;,&#10;    &quot;bcrypt&quot;: &quot;^6.0.0&quot;,&#10;    &quot;class-variance-authority&quot;: &quot;^0.7.1&quot;,&#10;    &quot;clsx&quot;: &quot;^2.1.1&quot;,&#10;    &quot;cmdk&quot;: &quot;^1.1.1&quot;,&#10;    &quot;connect-pg-simple&quot;: &quot;^10.0.0&quot;,&#10;    &quot;date-fns&quot;: &quot;^3.6.0&quot;,&#10;    &quot;drizzle-orm&quot;: &quot;^0.39.1&quot;,&#10;    &quot;drizzle-zod&quot;: &quot;^0.7.0&quot;,&#10;    &quot;embla-carousel-react&quot;: &quot;^8.6.0&quot;,&#10;    &quot;express&quot;: &quot;^4.21.2&quot;,&#10;    &quot;express-session&quot;: &quot;^1.18.1&quot;,&#10;    &quot;framer-motion&quot;: &quot;^11.13.1&quot;,&#10;    &quot;input-otp&quot;: &quot;^1.4.2&quot;,&#10;    &quot;jsonwebtoken&quot;: &quot;^9.0.2&quot;,&#10;    &quot;lucide-react&quot;: &quot;^0.453.0&quot;,&#10;    &quot;memorystore&quot;: &quot;^1.6.7&quot;,&#10;    &quot;next-themes&quot;: &quot;^0.4.6&quot;,&#10;    &quot;passport&quot;: &quot;^0.7.0&quot;,&#10;    &quot;passport-local&quot;: &quot;^1.0.0&quot;,&#10;    &quot;react&quot;: &quot;^18.3.1&quot;,&#10;    &quot;react-day-picker&quot;: &quot;^8.10.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.3.1&quot;,&#10;    &quot;react-hook-form&quot;: &quot;^7.55.0&quot;,&#10;    &quot;react-icons&quot;: &quot;^5.4.0&quot;,&#10;    &quot;react-resizable-panels&quot;: &quot;^2.1.7&quot;,&#10;    &quot;recharts&quot;: &quot;^2.15.2&quot;,&#10;    &quot;tailwind-merge&quot;: &quot;^2.6.0&quot;,&#10;    &quot;tailwindcss-animate&quot;: &quot;^1.0.7&quot;,&#10;    &quot;tw-animate-css&quot;: &quot;^1.2.5&quot;,&#10;    &quot;vaul&quot;: &quot;^1.1.2&quot;,&#10;    &quot;wouter&quot;: &quot;^3.3.5&quot;,&#10;    &quot;ws&quot;: &quot;^8.18.0&quot;,&#10;    &quot;zod&quot;: &quot;^3.24.2&quot;,&#10;    &quot;zod-validation-error&quot;: &quot;^3.4.0&quot;,&#10;    &quot;vite&quot;: &quot;^5.4.19&quot;,&#10;    &quot;esbuild&quot;: &quot;^0.25.0&quot;,&#10;    &quot;@vitejs/plugin-react&quot;: &quot;^4.3.2&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.20&quot;,&#10;    &quot;postcss&quot;: &quot;^8.4.47&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.4.17&quot;,&#10;    &quot;@tailwindcss/typography&quot;: &quot;^0.5.15&quot;,&#10;    &quot;drizzle-kit&quot;: &quot;^0.39.1&quot;,&#10;    &quot;pg&quot;: &quot;^8.12.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@replit/vite-plugin-cartographer&quot;: &quot;^0.2.8&quot;,&#10;    &quot;@replit/vite-plugin-runtime-error-modal&quot;: &quot;^0.0.3&quot;,&#10;    &quot;@tailwindcss/vite&quot;: &quot;^4.1.3&quot;,&#10;    &quot;@types/connect-pg-simple&quot;: &quot;^7.0.3&quot;,&#10;    &quot;@types/express&quot;: &quot;4.17.21&quot;,&#10;    &quot;@types/express-session&quot;: &quot;^1.18.0&quot;,&#10;    &quot;@types/node&quot;: &quot;20.16.11&quot;,&#10;    &quot;@types/passport&quot;: &quot;^1.0.16&quot;,&#10;    &quot;@types/passport-local&quot;: &quot;^1.0.38&quot;,&#10;    &quot;@types/react&quot;: &quot;^18.3.11&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^18.3.1&quot;,&#10;    &quot;@types/ws&quot;: &quot;^8.5.13&quot;,&#10;    &quot;@types/pg&quot;: &quot;^8.11.10&quot;,&#10;    &quot;tsx&quot;: &quot;^4.19.1&quot;,&#10;    &quot;typescript&quot;: &quot;5.6.3&quot;&#10;  },&#10;  &quot;optionalDependencies&quot;: {&#10;    &quot;bufferutil&quot;: &quot;^4.0.8&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;rest-express&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;license&quot;: &quot;MIT&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;NODE_ENV=development tsx server/index.ts&quot;,&#10;    &quot;build&quot;: &quot;vite build &amp;&amp; esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist&quot;,&#10;    &quot;start&quot;: &quot;NODE_ENV=production node dist/index.js&quot;,&#10;    &quot;check&quot;: &quot;tsc&quot;,&#10;    &quot;db:push&quot;: &quot;drizzle-kit push&quot;,&#10;    &quot;db:migrate&quot;: &quot;drizzle-kit migrate&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@hookform/resolvers&quot;: &quot;^3.10.0&quot;,&#10;    &quot;@jridgewell/trace-mapping&quot;: &quot;^0.3.25&quot;,&#10;    &quot;@neondatabase/serverless&quot;: &quot;^0.10.4&quot;,&#10;    &quot;@radix-ui/react-accordion&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-alert-dialog&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-aspect-ratio&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-avatar&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-checkbox&quot;: &quot;^1.1.5&quot;,&#10;    &quot;@radix-ui/react-collapsible&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-context-menu&quot;: &quot;^2.2.7&quot;,&#10;    &quot;@radix-ui/react-dialog&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-dropdown-menu&quot;: &quot;^2.1.7&quot;,&#10;    &quot;@radix-ui/react-hover-card&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-label&quot;: &quot;^2.1.3&quot;,&#10;    &quot;@radix-ui/react-menubar&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-navigation-menu&quot;: &quot;^1.2.6&quot;,&#10;    &quot;@radix-ui/react-popover&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-progress&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-radio-group&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-scroll-area&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-select&quot;: &quot;^2.1.7&quot;,&#10;    &quot;@radix-ui/react-separator&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-slider&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-slot&quot;: &quot;^1.2.0&quot;,&#10;    &quot;@radix-ui/react-switch&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-tabs&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-toast&quot;: &quot;^1.2.7&quot;,&#10;    &quot;@radix-ui/react-toggle&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-toggle-group&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-tooltip&quot;: &quot;^1.2.0&quot;,&#10;    &quot;@tanstack/react-query&quot;: &quot;^5.60.5&quot;,&#10;    &quot;@types/bcrypt&quot;: &quot;^6.0.0&quot;,&#10;    &quot;@types/jsonwebtoken&quot;: &quot;^9.0.10&quot;,&#10;    &quot;bcrypt&quot;: &quot;^6.0.0&quot;,&#10;    &quot;class-variance-authority&quot;: &quot;^0.7.1&quot;,&#10;    &quot;clsx&quot;: &quot;^2.1.1&quot;,&#10;    &quot;cmdk&quot;: &quot;^1.1.1&quot;,&#10;    &quot;connect-pg-simple&quot;: &quot;^10.0.0&quot;,&#10;    &quot;date-fns&quot;: &quot;^3.6.0&quot;,&#10;    &quot;drizzle-orm&quot;: &quot;^0.39.1&quot;,&#10;    &quot;drizzle-zod&quot;: &quot;^0.7.0&quot;,&#10;    &quot;embla-carousel-react&quot;: &quot;^8.6.0&quot;,&#10;    &quot;express&quot;: &quot;^4.21.2&quot;,&#10;    &quot;express-session&quot;: &quot;^1.18.1&quot;,&#10;    &quot;framer-motion&quot;: &quot;^11.13.1&quot;,&#10;    &quot;input-otp&quot;: &quot;^1.4.2&quot;,&#10;    &quot;jsonwebtoken&quot;: &quot;^9.0.2&quot;,&#10;    &quot;lucide-react&quot;: &quot;^0.453.0&quot;,&#10;    &quot;memorystore&quot;: &quot;^1.6.7&quot;,&#10;    &quot;next-themes&quot;: &quot;^0.4.6&quot;,&#10;    &quot;passport&quot;: &quot;^0.7.0&quot;,&#10;    &quot;passport-local&quot;: &quot;^1.0.0&quot;,&#10;    &quot;react&quot;: &quot;^18.3.1&quot;,&#10;    &quot;react-day-picker&quot;: &quot;^8.10.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.3.1&quot;,&#10;    &quot;react-hook-form&quot;: &quot;^7.55.0&quot;,&#10;    &quot;react-icons&quot;: &quot;^5.4.0&quot;,&#10;    &quot;react-resizable-panels&quot;: &quot;^2.1.7&quot;,&#10;    &quot;recharts&quot;: &quot;^2.15.2&quot;,&#10;    &quot;tailwind-merge&quot;: &quot;^2.6.0&quot;,&#10;    &quot;tailwindcss-animate&quot;: &quot;^1.0.7&quot;,&#10;    &quot;tw-animate-css&quot;: &quot;^1.2.5&quot;,&#10;    &quot;vaul&quot;: &quot;^1.1.2&quot;,&#10;    &quot;wouter&quot;: &quot;^3.3.5&quot;,&#10;    &quot;ws&quot;: &quot;^8.18.0&quot;,&#10;    &quot;zod&quot;: &quot;^3.24.2&quot;,&#10;    &quot;zod-validation-error&quot;: &quot;^3.4.0&quot;,&#10;    &quot;vite&quot;: &quot;^5.4.19&quot;,&#10;    &quot;esbuild&quot;: &quot;^0.25.0&quot;,&#10;    &quot;@vitejs/plugin-react&quot;: &quot;^4.3.2&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.20&quot;,&#10;    &quot;postcss&quot;: &quot;^8.4.47&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.4.17&quot;,&#10;    &quot;@tailwindcss/typography&quot;: &quot;^0.5.15&quot;,&#10;    &quot;drizzle-kit&quot;: &quot;^0.20.14&quot;,&#10;    &quot;pg&quot;: &quot;^8.12.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@replit/vite-plugin-cartographer&quot;: &quot;^0.2.8&quot;,&#10;    &quot;@replit/vite-plugin-runtime-error-modal&quot;: &quot;^0.0.3&quot;,&#10;    &quot;@tailwindcss/vite&quot;: &quot;^4.1.3&quot;,&#10;    &quot;@types/connect-pg-simple&quot;: &quot;^7.0.3&quot;,&#10;    &quot;@types/express&quot;: &quot;4.17.21&quot;,&#10;    &quot;@types/express-session&quot;: &quot;^1.18.0&quot;,&#10;    &quot;@types/node&quot;: &quot;20.16.11&quot;,&#10;    &quot;@types/passport&quot;: &quot;^1.0.16&quot;,&#10;    &quot;@types/passport-local&quot;: &quot;^1.0.38&quot;,&#10;    &quot;@types/react&quot;: &quot;^18.3.11&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^18.3.1&quot;,&#10;    &quot;@types/ws&quot;: &quot;^8.5.13&quot;,&#10;    &quot;@types/pg&quot;: &quot;^8.11.10&quot;,&#10;    &quot;tsx&quot;: &quot;^4.19.1&quot;,&#10;    &quot;typescript&quot;: &quot;5.6.3&quot;&#10;  },&#10;  &quot;optionalDependencies&quot;: {&#10;    &quot;bufferutil&quot;: &quot;^4.0.8&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/db/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/db/index.ts" />
              <option name="originalContent" value="import { drizzle } from &quot;drizzle-orm/node-postgres&quot;;&#10;import { Pool } from &quot;pg&quot;;&#10;import * as schema from &quot;./schema&quot;;&#10;&#10;if (!process.env.DATABASE_URL) {&#10;  throw new Error(&quot;DATABASE_URL environment variable is required&quot;);&#10;}&#10;&#10;// Create PostgreSQL pool connection&#10;const pool = new Pool({&#10;  connectionString: process.env.DATABASE_URL,&#10;  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false&#10;});&#10;&#10;export const db = drizzle(pool, { schema });&#10;" />
              <option name="updatedContent" value="import { drizzle } from &quot;drizzle-orm/node-postgres&quot;;&#10;import pkg from &quot;pg&quot;;&#10;const { Pool } = pkg;&#10;import * as schema from &quot;./schema&quot;;&#10;&#10;if (!process.env.DATABASE_URL) {&#10;  throw new Error(&quot;DATABASE_URL environment variable is required&quot;);&#10;}&#10;&#10;// Create PostgreSQL pool connection&#10;const pool = new Pool({&#10;  connectionString: process.env.DATABASE_URL,&#10;  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false&#10;});&#10;&#10;export const db = drizzle(pool, { schema });" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/db/init.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/db/init.ts" />
              <option name="originalContent" value="import { sql } from &quot;drizzle-orm&quot;;&#10;import { db } from &quot;./index&quot;;&#10;&#10;export async function initializeDatabase() {&#10;  try {&#10;    console.log(&quot;Initializing database tables...&quot;);&#10;&#10;    // Create users table&#10;    await db.execute(sql`&#10;      CREATE TABLE IF NOT EXISTS users (&#10;        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),&#10;        email TEXT NOT NULL UNIQUE,&#10;        password TEXT NOT NULL,&#10;        name TEXT NOT NULL,&#10;        avatar TEXT,&#10;        location TEXT,&#10;        phone TEXT,&#10;        verified BOOLEAN DEFAULT false,&#10;        rating DECIMAL(3,2) DEFAULT 0,&#10;        total_sales INTEGER DEFAULT 0,&#10;        joined_at TIMESTAMP DEFAULT NOW(),&#10;        created_at TIMESTAMP DEFAULT NOW(),&#10;        updated_at TIMESTAMP DEFAULT NOW()&#10;      );&#10;    `);&#10;&#10;    // Create products table&#10;    await db.execute(sql`&#10;      CREATE TABLE IF NOT EXISTS products (&#10;        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),&#10;        name TEXT NOT NULL,&#10;        description TEXT NOT NULL,&#10;        price DECIMAL(10,2) NOT NULL,&#10;        category TEXT NOT NULL,&#10;        quantity INTEGER NOT NULL,&#10;        unit TEXT NOT NULL,&#10;        image_url TEXT,&#10;        seller_id UUID REFERENCES users(id) NOT NULL,&#10;        stock INTEGER DEFAULT 0,&#10;        location TEXT,&#10;        featured BOOLEAN DEFAULT false,&#10;        created_at TIMESTAMP DEFAULT NOW(),&#10;        updated_at TIMESTAMP DEFAULT NOW()&#10;      );&#10;    `);&#10;&#10;    // Migration: Add quantity column if it doesn't exist&#10;    try {&#10;      await db.execute(sql`&#10;        ALTER TABLE products &#10;        ADD COLUMN IF NOT EXISTS quantity INTEGER NOT NULL DEFAULT 0;&#10;      `);&#10;      console.log(&quot;Migration: Added quantity column to products table&quot;);&#10;    } catch (error) {&#10;      console.log(&quot;Quantity column already exists or migration failed:&quot;, error);&#10;    }&#10;&#10;    // Create messages table&#10;    await db.execute(sql`&#10;      CREATE TABLE IF NOT EXISTS messages (&#10;        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),&#10;        sender_id UUID REFERENCES users(id) NOT NULL,&#10;        receiver_id UUID REFERENCES users(id) NOT NULL,&#10;        content TEXT NOT NULL,&#10;        read BOOLEAN DEFAULT false,&#10;        created_at TIMESTAMP DEFAULT NOW()&#10;      );&#10;    `);&#10;&#10;    console.log(&quot;Database tables initialized successfully!&quot;);&#10;  } catch (error) {&#10;    console.error(&quot;Error initializing database:&quot;, error);&#10;    // Don't throw error - let the app continue if tables already exist&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import { sql } from &quot;drizzle-orm&quot;;&#10;import { db } from &quot;./index&quot;;&#10;&#10;export async function initializeDatabase() {&#10;  try {&#10;    console.log(&quot;Initializing database tables...&quot;);&#10;&#10;    // Create users table&#10;    await db.execute(sql`&#10;      CREATE TABLE IF NOT EXISTS users (&#10;        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),&#10;        email TEXT NOT NULL UNIQUE,&#10;        password TEXT NOT NULL,&#10;        name TEXT NOT NULL,&#10;        avatar TEXT,&#10;        location TEXT,&#10;        phone TEXT,&#10;        verified BOOLEAN DEFAULT false,&#10;        rating DECIMAL(3,2) DEFAULT 0,&#10;        total_sales INTEGER DEFAULT 0,&#10;        joined_at TIMESTAMP DEFAULT NOW(),&#10;        created_at TIMESTAMP DEFAULT NOW(),&#10;        updated_at TIMESTAMP DEFAULT NOW()&#10;      );&#10;    `);&#10;&#10;    // Create products table&#10;    await db.execute(sql`&#10;      CREATE TABLE IF NOT EXISTS products (&#10;        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),&#10;        name TEXT NOT NULL,&#10;        description TEXT NOT NULL,&#10;        price DECIMAL(10,2) NOT NULL,&#10;        category TEXT NOT NULL,&#10;        quantity INTEGER NOT NULL,&#10;        unit TEXT NOT NULL,&#10;        image_url TEXT,&#10;        seller_id UUID REFERENCES users(id) NOT NULL,&#10;        stock INTEGER DEFAULT 0,&#10;        location TEXT,&#10;        featured BOOLEAN DEFAULT false,&#10;        created_at TIMESTAMP DEFAULT NOW(),&#10;        updated_at TIMESTAMP DEFAULT NOW()&#10;      );&#10;    `);&#10;&#10;    // Migration: Add quantity column if it doesn't exist&#10;    try {&#10;      await db.execute(sql`&#10;        ALTER TABLE products &#10;        ADD COLUMN IF NOT EXISTS quantity INTEGER NOT NULL DEFAULT 0;&#10;      `);&#10;      console.log(&quot;Migration: Added quantity column to products table&quot;);&#10;    } catch (error) {&#10;      console.log(&quot;Quantity column already exists or migration failed:&quot;, error);&#10;    }&#10;&#10;    // Migration: Add unit column if it doesn't exist&#10;    try {&#10;      await db.execute(sql`&#10;        ALTER TABLE products &#10;        ADD COLUMN IF NOT EXISTS unit TEXT NOT NULL DEFAULT '';&#10;      `);&#10;      console.log(&quot;Migration: Added unit column to products table&quot;);&#10;    } catch (error) {&#10;      console.log(&quot;Unit column already exists or migration failed:&quot;, error);&#10;    }&#10;&#10;    // Create messages table&#10;    await db.execute(sql`&#10;      CREATE TABLE IF NOT EXISTS messages (&#10;        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),&#10;        sender_id UUID REFERENCES users(id) NOT NULL,&#10;        receiver_id UUID REFERENCES users(id) NOT NULL,&#10;        content TEXT NOT NULL,&#10;        read BOOLEAN DEFAULT false,&#10;        created_at TIMESTAMP DEFAULT NOW()&#10;      );&#10;    `);&#10;&#10;    console.log(&quot;Database tables initialized successfully!&quot;);&#10;  } catch (error) {&#10;    console.error(&quot;Error initializing database:&quot;, error);&#10;    // Don't throw error - let the app continue if tables already exist&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/db/schema.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/db/schema.ts" />
              <option name="originalContent" value="import { pgTable, text, timestamp, decimal, integer, boolean, uuid } from &quot;drizzle-orm/pg-core&quot;;&#10;import { createInsertSchema } from &quot;drizzle-zod&quot;;&#10;&#10;export const users = pgTable(&quot;users&quot;, {&#10;  id: uuid(&quot;id&quot;).defaultRandom().primaryKey(),&#10;  email: text(&quot;email&quot;).notNull().unique(),&#10;  password: text(&quot;password&quot;).notNull(),&#10;  name: text(&quot;name&quot;).notNull(),&#10;  avatar: text(&quot;avatar&quot;),&#10;  location: text(&quot;location&quot;),&#10;  phone: text(&quot;phone&quot;),&#10;  verified: boolean(&quot;verified&quot;).default(false),&#10;  rating: decimal(&quot;rating&quot;, { precision: 3, scale: 2 }).default(&quot;0&quot;),&#10;  totalSales: integer(&quot;total_sales&quot;).default(0),&#10;  joinedAt: timestamp(&quot;joined_at&quot;).defaultNow(),&#10;  createdAt: timestamp(&quot;created_at&quot;).defaultNow(),&#10;  updatedAt: timestamp(&quot;updated_at&quot;).defaultNow(),&#10;});&#10;&#10;export const products = pgTable(&quot;products&quot;, {&#10;  id: uuid(&quot;id&quot;).defaultRandom().primaryKey(),&#10;  name: text(&quot;name&quot;).notNull(),&#10;  description: text(&quot;description&quot;).notNull(),&#10;  price: decimal(&quot;price&quot;, { precision: 10, scale: 2 }).notNull(),&#10;  category: text(&quot;category&quot;).notNull(),&#10;  imageUrl: text(&quot;image_url&quot;),&#10;  sellerId: uuid(&quot;seller_id&quot;).references(() =&gt; users.id).notNull(),&#10;  stock: integer(&quot;stock&quot;).default(0),&#10;  location: text(&quot;location&quot;),&#10;  featured: boolean(&quot;featured&quot;).default(false),&#10;  createdAt: timestamp(&quot;created_at&quot;).defaultNow(),&#10;  updatedAt: timestamp(&quot;updated_at&quot;).defaultNow(),&#10;});&#10;&#10;export const messages = pgTable(&quot;messages&quot;, {&#10;  id: uuid(&quot;id&quot;).defaultRandom().primaryKey(),&#10;  senderId: uuid(&quot;sender_id&quot;).references(() =&gt; users.id).notNull(),&#10;  receiverId: uuid(&quot;receiver_id&quot;).references(() =&gt; users.id).notNull(),&#10;  content: text(&quot;content&quot;).notNull(),&#10;  read: boolean(&quot;read&quot;).default(false),&#10;  createdAt: timestamp(&quot;created_at&quot;).defaultNow(),&#10;});&#10;&#10;// Export schemas for validation&#10;export const insertUserSchema = createInsertSchema(users);&#10;export const insertProductSchema = createInsertSchema(products);&#10;export const insertMessageSchema = createInsertSchema(messages);&#10;" />
              <option name="updatedContent" value="import { pgTable, text, timestamp, decimal, integer, boolean, uuid } from &quot;drizzle-orm/pg-core&quot;;&#10;import { createInsertSchema } from &quot;drizzle-zod&quot;;&#10;&#10;export const users = pgTable(&quot;users&quot;, {&#10;  id: uuid(&quot;id&quot;).defaultRandom().primaryKey(),&#10;  email: text(&quot;email&quot;).notNull().unique(),&#10;  password: text(&quot;password&quot;).notNull(),&#10;  name: text(&quot;name&quot;).notNull(),&#10;  avatar: text(&quot;avatar&quot;),&#10;  location: text(&quot;location&quot;),&#10;  phone: text(&quot;phone&quot;),&#10;  verified: boolean(&quot;verified&quot;).default(false),&#10;  rating: decimal(&quot;rating&quot;, { precision: 3, scale: 2 }).default(&quot;0&quot;),&#10;  totalSales: integer(&quot;total_sales&quot;).default(0),&#10;  joinedAt: timestamp(&quot;joined_at&quot;).defaultNow(),&#10;  createdAt: timestamp(&quot;created_at&quot;).defaultNow(),&#10;  updatedAt: timestamp(&quot;updated_at&quot;).defaultNow(),&#10;});&#10;&#10;export const products = pgTable(&quot;products&quot;, {&#10;  id: uuid(&quot;id&quot;).defaultRandom().primaryKey(),&#10;  name: text(&quot;name&quot;).notNull(),&#10;  description: text(&quot;description&quot;).notNull(),&#10;  price: decimal(&quot;price&quot;, { precision: 10, scale: 2 }).notNull(),&#10;  category: text(&quot;category&quot;).notNull(),&#10;  quantity: integer(&quot;quantity&quot;).notNull(),&#10;  unit: text(&quot;unit&quot;).notNull(),&#10;  imageUrl: text(&quot;image_url&quot;),&#10;  sellerId: uuid(&quot;seller_id&quot;).references(() =&gt; users.id).notNull(),&#10;  stock: integer(&quot;stock&quot;).default(0),&#10;  location: text(&quot;location&quot;),&#10;  featured: boolean(&quot;featured&quot;).default(false),&#10;  createdAt: timestamp(&quot;created_at&quot;).defaultNow(),&#10;  updatedAt: timestamp(&quot;updated_at&quot;).defaultNow(),&#10;});&#10;&#10;export const messages = pgTable(&quot;messages&quot;, {&#10;  id: uuid(&quot;id&quot;).defaultRandom().primaryKey(),&#10;  senderId: uuid(&quot;sender_id&quot;).references(() =&gt; users.id).notNull(),&#10;  receiverId: uuid(&quot;receiver_id&quot;).references(() =&gt; users.id).notNull(),&#10;  content: text(&quot;content&quot;).notNull(),&#10;  read: boolean(&quot;read&quot;).default(false),&#10;  createdAt: timestamp(&quot;created_at&quot;).defaultNow(),&#10;});&#10;&#10;// Export schemas for validation&#10;export const insertUserSchema = createInsertSchema(users);&#10;export const insertProductSchema = createInsertSchema(products);&#10;export const insertMessageSchema = createInsertSchema(messages);" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/index.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/index.ts" />
              <option name="originalContent" value="import express, { type Request, Response, NextFunction } from &quot;express&quot;;&#10;import { registerRoutes } from &quot;./routes&quot;;&#10;import { setupVite, serveStatic, log } from &quot;./vite&quot;;&#10;&#10;const app = express();&#10;app.use(express.json());&#10;app.use(express.urlencoded({ extended: false }));&#10;&#10;app.use((req, res, next) =&gt; {&#10;  const start = Date.now();&#10;  const path = req.path;&#10;  let capturedJsonResponse: Record&lt;string, any&gt; | undefined = undefined;&#10;&#10;  const originalResJson = res.json;&#10;  res.json = function (bodyJson, ...args) {&#10;    capturedJsonResponse = bodyJson;&#10;    return originalResJson.apply(res, [bodyJson, ...args]);&#10;  };&#10;&#10;  res.on(&quot;finish&quot;, () =&gt; {&#10;    const duration = Date.now() - start;&#10;    if (path.startsWith(&quot;/api&quot;)) {&#10;      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;&#10;      if (capturedJsonResponse) {&#10;        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;&#10;      }&#10;&#10;      if (logLine.length &gt; 80) {&#10;        logLine = logLine.slice(0, 79) + &quot;…&quot;;&#10;      }&#10;&#10;      log(logLine);&#10;    }&#10;  });&#10;&#10;  next();&#10;});&#10;&#10;(async () =&gt; {&#10;  const server = await registerRoutes(app);&#10;&#10;  app.use((err: any, _req: Request, res: Response, _next: NextFunction) =&gt; {&#10;    const status = err.status || err.statusCode || 500;&#10;    const message = err.message || &quot;Internal Server Error&quot;;&#10;&#10;    res.status(status).json({ message });&#10;    throw err;&#10;  });&#10;&#10;  // importantly only setup vite in development and after&#10;  // setting up all the other routes so the catch-all route&#10;  // doesn't interfere with the other routes&#10;  if (app.get(&quot;env&quot;) === &quot;development&quot;) {&#10;    await setupVite(app, server);&#10;  } else {&#10;    serveStatic(app);&#10;  }&#10;&#10;  // ALWAYS serve the app on the port specified in the environment variable PORT&#10;  // Other ports are firewalled. Default to 5000 if not specified.&#10;  // this serves both the API and the client.&#10;  // It is the only port that is not firewalled.&#10;  const port = parseInt(process.env.PORT || '5000', 10);&#10;  server.listen({&#10;    port,&#10;    host: &quot;0.0.0.0&quot;,&#10;    reusePort: true,&#10;  }, () =&gt; {&#10;    log(`serving on port ${port}`);&#10;  });&#10;})();&#10;" />
              <option name="updatedContent" value="import express, { type Request, Response, NextFunction } from &quot;express&quot;;&#10;import { registerRoutes } from &quot;./routes&quot;;&#10;import { setupVite, serveStatic, log } from &quot;./vite&quot;;&#10;import { initializeDatabase } from &quot;./db/init&quot;;&#10;&#10;const app = express();&#10;app.use(express.json());&#10;app.use(express.urlencoded({ extended: false }));&#10;&#10;app.use((req, res, next) =&gt; {&#10;  const start = Date.now();&#10;  const path = req.path;&#10;  let capturedJsonResponse: Record&lt;string, any&gt; | undefined = undefined;&#10;&#10;  const originalResJson = res.json;&#10;  res.json = function (bodyJson, ...args) {&#10;    capturedJsonResponse = bodyJson;&#10;    return originalResJson.apply(res, [bodyJson, ...args]);&#10;  };&#10;&#10;  res.on(&quot;finish&quot;, () =&gt; {&#10;    const duration = Date.now() - start;&#10;    if (path.startsWith(&quot;/api&quot;)) {&#10;      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;&#10;      if (capturedJsonResponse) {&#10;        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;&#10;      }&#10;&#10;      if (logLine.length &gt; 80) {&#10;        logLine = logLine.slice(0, 79) + &quot;…&quot;;&#10;      }&#10;&#10;      log(logLine);&#10;    }&#10;  });&#10;&#10;  next();&#10;});&#10;&#10;(async () =&gt; {&#10;  // Initialize database tables on startup&#10;  await initializeDatabase();&#10;  &#10;  const server = await registerRoutes(app);&#10;&#10;  app.use((err: any, _req: Request, res: Response, _next: NextFunction) =&gt; {&#10;    const status = err.status || err.statusCode || 500;&#10;    const message = err.message || &quot;Internal Server Error&quot;;&#10;&#10;    res.status(status).json({ message });&#10;    throw err;&#10;  });&#10;&#10;  // importantly only setup vite in development and after&#10;  // setting up all the other routes so the catch-all route&#10;  // doesn't interfere with the other routes&#10;  if (app.get(&quot;env&quot;) === &quot;development&quot;) {&#10;    await setupVite(app, server);&#10;  } else {&#10;    serveStatic(app);&#10;  }&#10;&#10;  // ALWAYS serve the app on the port specified in the environment variable PORT&#10;  // Other ports are firewalled. Default to 5000 if not specified.&#10;  // this serves both the API and the client.&#10;  // It is the only port that is not firewalled.&#10;  const port = parseInt(process.env.PORT || '5000', 10);&#10;  server.listen({&#10;    port,&#10;    host: &quot;0.0.0.0&quot;,&#10;    reusePort: true,&#10;  }, () =&gt; {&#10;    log(`serving on port ${port}`);&#10;  });&#10;})();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/routes.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/routes.ts" />
              <option name="originalContent" value="import type { Express, Request, Response, NextFunction } from &quot;express&quot;;&#10;import { createServer, type Server } from &quot;http&quot;;&#10;import { db } from &quot;./db&quot;;&#10;import { users, products, messages } from &quot;./db/schema&quot;;&#10;import { insertUserSchema, insertProductSchema, insertMessageSchema } from &quot;./db/schema&quot;;&#10;import { eq, desc, and, or, ilike } from &quot;drizzle-orm&quot;;&#10;import bcrypt from &quot;bcrypt&quot;;&#10;import jwt from &quot;jsonwebtoken&quot;;&#10;&#10;const JWT_SECRET = process.env.JWT_SECRET || &quot;your-secret-key&quot;;&#10;&#10;// Extend Request type to include user&#10;declare global {&#10;  namespace Express {&#10;    interface Request {&#10;      user?: { id: string; email: string };&#10;    }&#10;  }&#10;}&#10;&#10;// Middleware to verify JWT token&#10;function authenticateToken(req: Request, res: Response, next: NextFunction) {&#10;  const authHeader = req.headers['authorization'];&#10;  const token = authHeader &amp;&amp; authHeader.split(' ')[1];&#10;&#10;  if (!token) {&#10;    return res.status(401).json({ message: 'Access token required' });&#10;  }&#10;&#10;  jwt.verify(token, JWT_SECRET, (err: jwt.JsonWebTokenError | null, user: any) =&gt; {&#10;    if (err) return res.status(403).json({ message: 'Invalid token' });&#10;    req.user = user as { id: string; email: string };&#10;    next();&#10;  });&#10;}&#10;&#10;// Weather API integration&#10;async function getWeatherData(location: string = &quot;Accra&quot;) {&#10;  const API_KEY = process.env.OPENWEATHER_API_KEY || &quot;demo_key&quot;;&#10;  try {&#10;    const response = await fetch(&#10;      `https://api.openweathermap.org/data/2.5/weather?q=${location},GH&amp;appid=${API_KEY}&amp;units=metric`&#10;    );&#10;    if (!response.ok) {&#10;      throw new Error('Weather API failed');&#10;    }&#10;    return await response.json();&#10;  } catch (error) {&#10;    // Return mock data if API fails&#10;    return {&#10;      main: { temp: 28, humidity: 72 },&#10;      weather: [{ main: &quot;Clear&quot;, description: &quot;sunny&quot; }],&#10;      wind: { speed: 4.2 }&#10;    };&#10;  }&#10;}&#10;&#10;export async function registerRoutes(app: Express): Promise&lt;Server&gt; {&#10;  &#10;  // Auth routes&#10;  app.post(&quot;/api/auth/register&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const userData = insertUserSchema.parse(req.body);&#10;      &#10;      // Check if user exists&#10;      const existingUser = await db.query.users.findFirst({&#10;        where: eq(users.email, userData.email),&#10;      });&#10;      if (existingUser) {&#10;        return res.status(400).json({ message: &quot;User already exists&quot; });&#10;      }&#10;      &#10;      // Hash password&#10;      const saltRounds = 10;&#10;      const hashedPassword = await bcrypt.hash(userData.password, saltRounds);&#10;      &#10;      const [user] = await db.insert(users).values({&#10;        ...userData,&#10;        password: hashedPassword,&#10;      }).returning();&#10;&#10;      // Create JWT token&#10;      const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '24h' });&#10;      &#10;      const { password, ...userWithoutPassword } = user;&#10;      res.json({ user: userWithoutPassword, token });&#10;    } catch (error) {&#10;      console.error(&quot;Registration error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid user data&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/auth/login&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const { email, password } = req.body;&#10;      &#10;      const user = await db.query.users.findFirst({&#10;        where: eq(users.email, email),&#10;      });&#10;      if (!user) {&#10;        return res.status(401).json({ message: &quot;Invalid credentials&quot; });&#10;      }&#10;      &#10;      const validPassword = await bcrypt.compare(password, user.password);&#10;      if (!validPassword) {&#10;        return res.status(401).json({ message: &quot;Invalid credentials&quot; });&#10;      }&#10;      &#10;      const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '24h' });&#10;      &#10;      const { password: _, ...userWithoutPassword } = user;&#10;      res.json({ user: userWithoutPassword, token });&#10;    } catch (error) {&#10;      console.error(&quot;Login error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/auth/me&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const user = await db.query.users.findFirst({&#10;        where: eq(users.id, req.user.id),&#10;      });&#10;      if (!user) {&#10;        return res.status(404).json({ message: &quot;User not found&quot; });&#10;      }&#10;      &#10;      const { password, ...userWithoutPassword } = user;&#10;      res.json(userWithoutPassword);&#10;    } catch (error) {&#10;      console.error(&quot;Get user error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  // Product routes&#10;  app.get(&quot;/api/products&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const { category, search, sellerId } = req.query;&#10;      const productsList = await db.query.products.findMany({&#10;        where: and(&#10;          category ? eq(products.category, category as string) : undefined,&#10;          search ? ilike(products.name, `%${search}%`) : undefined,&#10;          sellerId ? eq(products.sellerId, sellerId as string) : undefined&#10;        ),&#10;      });&#10;      &#10;      res.json(productsList);&#10;    } catch (error) {&#10;      console.error(&quot;Get products error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/products/featured&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const productsList = await db.query.products.findMany({&#10;        where: eq(products.featured, true),&#10;      });&#10;      res.json(productsList);&#10;    } catch (error) {&#10;      console.error(&quot;Get featured products error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/products/latest&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const limit = req.query.limit ? parseInt(req.query.limit as string) : 6;&#10;      const productsList = await db.query.products.findMany({&#10;        orderBy: desc(products.createdAt),&#10;        take: limit,&#10;      });&#10;      res.json(productsList);&#10;    } catch (error) {&#10;      console.error(&quot;Get latest products error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/products/:id&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const product = await db.query.products.findFirst({&#10;        where: eq(products.id, req.params.id),&#10;      });&#10;      if (!product) {&#10;        return res.status(404).json({ message: &quot;Product not found&quot; });&#10;      }&#10;      &#10;      // Get seller info&#10;      const seller = await db.query.users.findFirst({&#10;        where: eq(users.id, product.sellerId),&#10;      });&#10;      if (!seller) {&#10;        return res.status(404).json({ message: &quot;Seller not found&quot; });&#10;      }&#10;      &#10;      const { password, ...sellerInfo } = seller;&#10;      res.json({ ...product, seller: sellerInfo });&#10;    } catch (error) {&#10;      console.error(&quot;Get product error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/products&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      // Transform the data to match the schema before validation&#10;      const requestData = {&#10;        ...req.body,&#10;        price: parseFloat(req.body.price), // Convert string to number&#10;        quantity: parseInt(req.body.quantity), // Convert string to number&#10;        stock: req.body.stock ? parseInt(req.body.stock) : 0, // Convert string to number or default to 0&#10;      };&#10;&#10;      const productData = insertProductSchema.parse(requestData);&#10;      const [product] = await db.insert(products).values({&#10;        ...productData,&#10;        sellerId: req.user.id,&#10;      }).returning();&#10;      res.status(201).json(product);&#10;    } catch (error) {&#10;      console.error(&quot;Create product error:&quot;, error);&#10;      // More detailed error logging to help debug&#10;      if (error instanceof Error) {&#10;        console.error(&quot;Error details:&quot;, error.message);&#10;      }&#10;      res.status(400).json({ message: &quot;Invalid product data&quot; });&#10;    }&#10;  });&#10;&#10;  app.put(&quot;/api/products/:id&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const updates = req.body;&#10;      const product = await db.query.products.findFirst({&#10;        where: eq(products.id, req.params.id),&#10;      });&#10;&#10;      if (!product || product.sellerId !== req.user.id) {&#10;        return res.status(404).json({ message: &quot;Product not found or access denied&quot; });&#10;      }&#10;      &#10;      const [updatedProduct] = await db.update(products)&#10;        .set(updates)&#10;        .where(eq(products.id, req.params.id))&#10;        .returning();&#10;&#10;      res.json(updatedProduct);&#10;    } catch (error) {&#10;      console.error(&quot;Update product error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid product data&quot; });&#10;    }&#10;  });&#10;&#10;  app.delete(&quot;/api/products/:id&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const product = await db.query.products.findFirst({&#10;        where: eq(products.id, req.params.id),&#10;      });&#10;&#10;      if (!product || product.sellerId !== req.user.id) {&#10;        return res.status(404).json({ message: &quot;Product not found or access denied&quot; });&#10;      }&#10;      &#10;      await db.delete(products).where(eq(products.id, req.params.id));&#10;&#10;      res.json({ message: &quot;Product deleted successfully&quot; });&#10;    } catch (error) {&#10;      console.error(&quot;Delete product error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  // Weather route&#10;  app.get(&quot;/api/weather&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const location = req.query.location as string || &quot;Accra&quot;;&#10;      const weatherData = await getWeatherData(location);&#10;      &#10;      res.json({&#10;        temperature: Math.round(weatherData.main.temp),&#10;        humidity: weatherData.main.humidity,&#10;        description: weatherData.weather[0].description,&#10;        windSpeed: Math.round(weatherData.wind.speed * 3.6), // Convert m/s to km/h&#10;        rainfall: weatherData.rain ? Math.round(weatherData.rain['1h'] || 0) : 0, // Real rainfall data from API&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Weather API error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Weather service unavailable&quot; });&#10;    }&#10;  });&#10;&#10;  // Message routes&#10;  app.get(&quot;/api/messages&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const messagesList = await db.query.messages.findMany({&#10;        where: eq(messages.receiverId, req.user.id),&#10;      });&#10;      res.json(messagesList);&#10;    } catch (error) {&#10;      console.error(&quot;Get messages error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/messages&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const messageData = insertMessageSchema.parse(req.body);&#10;      const [message] = await db.insert(messages).values({&#10;        ...messageData,&#10;        senderId: req.user.id,&#10;      }).returning();&#10;      res.status(201).json(message);&#10;    } catch (error) {&#10;      console.error(&quot;Send message error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid message data&quot; });&#10;    }&#10;  });&#10;&#10;  // Get user stats&#10;  app.get(&quot;/api/stats&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const allUsers = await db.query.users.findMany();&#10;      const allProducts = await db.query.products.findMany();&#10;      const allMessages = await db.query.messages.findMany();&#10;&#10;      // Calculate actual transactions from messages (inquiries that led to communication)&#10;      const uniqueConversations = new Set();&#10;      allMessages.forEach(msg =&gt; {&#10;        const conversationKey = [msg.senderId, msg.receiverId].sort().join('-');&#10;        uniqueConversations.add(conversationKey);&#10;      });&#10;&#10;      res.json({&#10;        users: allUsers.length,&#10;        products: allProducts.filter(p =&gt; p.active).length,&#10;        transactions: uniqueConversations.size, // Real conversation count as proxy for transactions&#10;        regions: new Set(allUsers.map(u =&gt; u.location?.split(',').pop()?.trim()).filter(Boolean)).size // Count unique regions from user locations&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Get stats error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/users/trusted-sellers&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const limit = req.query.limit ? parseInt(req.query.limit as string) : 6;&#10;      const sellers = await db.query.users.findMany({&#10;        where: eq(users.verified, true),&#10;        orderBy: desc(users.joinedAt),&#10;        limit: limit,&#10;      });&#10;      const sellersWithoutPassword = sellers.map(({ password, ...seller }) =&gt; seller);&#10;      res.json(sellersWithoutPassword);&#10;    } catch (error) {&#10;      console.error(&quot;Get trusted sellers error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  const httpServer = createServer(app);&#10;  return httpServer;&#10;}&#10;" />
              <option name="updatedContent" value="import type { Express, Request, Response, NextFunction } from &quot;express&quot;;&#10;import { createServer, type Server } from &quot;http&quot;;&#10;import { db } from &quot;./db&quot;;&#10;import { users, products, messages } from &quot;./db/schema&quot;;&#10;import { insertUserSchema } from &quot;./db/schema&quot;;&#10;import { eq, desc, and, or, ilike } from &quot;drizzle-orm&quot;;&#10;import bcrypt from &quot;bcrypt&quot;;&#10;import jwt from &quot;jsonwebtoken&quot;;&#10;import { z } from &quot;zod&quot;;&#10;&#10;const JWT_SECRET = process.env.JWT_SECRET || &quot;your-secret-key&quot;;&#10;&#10;// Custom validation schema for API endpoints&#10;const apiProductSchema = z.object({&#10;  name: z.string().min(1),&#10;  description: z.string().min(1),&#10;  category: z.string().min(1),&#10;  price: z.number().positive(),&#10;  quantity: z.number().int().positive(),&#10;  unit: z.string().min(1),&#10;  location: z.string(),&#10;  imageUrl: z.string().optional(),&#10;  stock: z.number().int().min(0).optional(),&#10;});&#10;&#10;// Extend Request type to include user&#10;declare global {&#10;  namespace Express {&#10;    interface Request {&#10;      user?: { id: string; email: string };&#10;    }&#10;  }&#10;}&#10;&#10;// Middleware to verify JWT token&#10;function authenticateToken(req: Request, res: Response, next: NextFunction) {&#10;  const authHeader = req.headers['authorization'];&#10;  const token = authHeader &amp;&amp; authHeader.split(' ')[1];&#10;&#10;  if (!token) {&#10;    return res.status(401).json({ message: 'Access token required' });&#10;  }&#10;&#10;  jwt.verify(token, JWT_SECRET, (err: jwt.JsonWebTokenError | null, user: any) =&gt; {&#10;    if (err) return res.status(403).json({ message: 'Invalid token' });&#10;    req.user = user as { id: string; email: string };&#10;    next();&#10;  });&#10;}&#10;&#10;// Weather API integration&#10;async function getWeatherData(location: string = &quot;Accra&quot;) {&#10;  const API_KEY = process.env.OPENWEATHER_API_KEY || &quot;demo_key&quot;;&#10;  try {&#10;    const response = await fetch(&#10;      `https://api.openweathermap.org/data/2.5/weather?q=${location},GH&amp;appid=${API_KEY}&amp;units=metric`&#10;    );&#10;    if (!response.ok) {&#10;      throw new Error('Weather API failed');&#10;    }&#10;    return await response.json();&#10;  } catch (error) {&#10;    // Return mock data if API fails&#10;    return {&#10;      main: { temp: 28, humidity: 72 },&#10;      weather: [{ main: &quot;Clear&quot;, description: &quot;sunny&quot; }],&#10;      wind: { speed: 4.2 }&#10;    };&#10;  }&#10;}&#10;&#10;export async function registerRoutes(app: Express): Promise&lt;Server&gt; {&#10;  &#10;  // Auth routes&#10;  app.post(&quot;/api/auth/register&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const userData = insertUserSchema.parse(req.body);&#10;      &#10;      // Check if user exists&#10;      const existingUser = await db.query.users.findFirst({&#10;        where: eq(users.email, userData.email),&#10;      });&#10;      if (existingUser) {&#10;        return res.status(400).json({ message: &quot;User already exists&quot; });&#10;      }&#10;      &#10;      // Hash password&#10;      const saltRounds = 10;&#10;      const hashedPassword = await bcrypt.hash(userData.password, saltRounds);&#10;      &#10;      const [user] = await db.insert(users).values({&#10;        ...userData,&#10;        password: hashedPassword,&#10;      }).returning();&#10;&#10;      // Create JWT token&#10;      const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '24h' });&#10;      &#10;      const { password, ...userWithoutPassword } = user;&#10;      res.json({ user: userWithoutPassword, token });&#10;    } catch (error) {&#10;      console.error(&quot;Registration error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid user data&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/auth/login&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const { email, password } = req.body;&#10;      &#10;      const user = await db.query.users.findFirst({&#10;        where: eq(users.email, email),&#10;      });&#10;      if (!user) {&#10;        return res.status(401).json({ message: &quot;Invalid credentials&quot; });&#10;      }&#10;      &#10;      const validPassword = await bcrypt.compare(password, user.password);&#10;      if (!validPassword) {&#10;        return res.status(401).json({ message: &quot;Invalid credentials&quot; });&#10;      }&#10;      &#10;      const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '24h' });&#10;      &#10;      const { password: _, ...userWithoutPassword } = user;&#10;      res.json({ user: userWithoutPassword, token });&#10;    } catch (error) {&#10;      console.error(&quot;Login error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/auth/me&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const user = await db.query.users.findFirst({&#10;        where: eq(users.id, req.user.id),&#10;      });&#10;      if (!user) {&#10;        return res.status(404).json({ message: &quot;User not found&quot; });&#10;      }&#10;      &#10;      const { password, ...userWithoutPassword } = user;&#10;      res.json(userWithoutPassword);&#10;    } catch (error) {&#10;      console.error(&quot;Get user error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  // Product routes&#10;  app.get(&quot;/api/products&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const { category, search, sellerId } = req.query;&#10;      const productsList = await db.query.products.findMany({&#10;        where: and(&#10;          category ? eq(products.category, category as string) : undefined,&#10;          search ? ilike(products.name, `%${search}%`) : undefined,&#10;          sellerId ? eq(products.sellerId, sellerId as string) : undefined&#10;        ),&#10;      });&#10;      &#10;      res.json(productsList);&#10;    } catch (error) {&#10;      console.error(&quot;Get products error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/products/featured&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const productsList = await db.query.products.findMany({&#10;        where: eq(products.featured, true),&#10;      });&#10;      res.json(productsList);&#10;    } catch (error) {&#10;      console.error(&quot;Get featured products error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/products/latest&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const limit = req.query.limit ? parseInt(req.query.limit as string) : 6;&#10;      const productsList = await db.query.products.findMany({&#10;        orderBy: desc(products.createdAt),&#10;        take: limit,&#10;      });&#10;      res.json(productsList);&#10;    } catch (error) {&#10;      console.error(&quot;Get latest products error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/products/:id&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const product = await db.query.products.findFirst({&#10;        where: eq(products.id, req.params.id),&#10;      });&#10;      if (!product) {&#10;        return res.status(404).json({ message: &quot;Product not found&quot; });&#10;      }&#10;      &#10;      // Get seller info&#10;      const seller = await db.query.users.findFirst({&#10;        where: eq(users.id, product.sellerId),&#10;      });&#10;      if (!seller) {&#10;        return res.status(404).json({ message: &quot;Seller not found&quot; });&#10;      }&#10;      &#10;      const { password, ...sellerInfo } = seller;&#10;      res.json({ ...product, seller: sellerInfo });&#10;    } catch (error) {&#10;      console.error(&quot;Get product error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/products&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      console.log(&quot;Raw request body:&quot;, req.body);&#10;      console.log(&quot;User from token:&quot;, req.user);&#10;&#10;      // Transform the data to match the schema before validation&#10;      const requestData = {&#10;        name: req.body.name,&#10;        description: req.body.description,&#10;        category: req.body.category,&#10;        price: parseFloat(req.body.price),&#10;        quantity: parseInt(req.body.quantity),&#10;        unit: req.body.unit,&#10;        location: req.body.location || '',&#10;        imageUrl: req.body.imageUrl || '',&#10;        stock: req.body.stock ? parseInt(req.body.stock) : 0,&#10;      };&#10;&#10;      console.log(&quot;Transformed data:&quot;, requestData);&#10;&#10;      const productData = apiProductSchema.parse(requestData);&#10;      const [product] = await db.insert(products).values({&#10;        ...productData,&#10;        sellerId: req.user.id,&#10;      }).returning();&#10;      res.status(201).json(product);&#10;    } catch (error) {&#10;      console.error(&quot;Create product error:&quot;, error);&#10;      if (error instanceof Error) {&#10;        console.error(&quot;Error details:&quot;, error.message);&#10;      }&#10;      res.status(400).json({ message: &quot;Invalid product data&quot; });&#10;    }&#10;  });&#10;&#10;  app.put(&quot;/api/products/:id&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const updates = req.body;&#10;      const product = await db.query.products.findFirst({&#10;        where: eq(products.id, req.params.id),&#10;      });&#10;&#10;      if (!product || product.sellerId !== req.user.id) {&#10;        return res.status(404).json({ message: &quot;Product not found or access denied&quot; });&#10;      }&#10;      &#10;      const [updatedProduct] = await db.update(products)&#10;        .set(updates)&#10;        .where(eq(products.id, req.params.id))&#10;        .returning();&#10;&#10;      res.json(updatedProduct);&#10;    } catch (error) {&#10;      console.error(&quot;Update product error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid product data&quot; });&#10;    }&#10;  });&#10;&#10;  app.delete(&quot;/api/products/:id&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const product = await db.query.products.findFirst({&#10;        where: eq(products.id, req.params.id),&#10;      });&#10;&#10;      if (!product || product.sellerId !== req.user.id) {&#10;        return res.status(404).json({ message: &quot;Product not found or access denied&quot; });&#10;      }&#10;      &#10;      await db.delete(products).where(eq(products.id, req.params.id));&#10;&#10;      res.json({ message: &quot;Product deleted successfully&quot; });&#10;    } catch (error) {&#10;      console.error(&quot;Delete product error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  // Weather route&#10;  app.get(&quot;/api/weather&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const location = req.query.location as string || &quot;Accra&quot;;&#10;      const weatherData = await getWeatherData(location);&#10;      &#10;      res.json({&#10;        temperature: Math.round(weatherData.main.temp),&#10;        humidity: weatherData.main.humidity,&#10;        description: weatherData.weather[0].description,&#10;        windSpeed: Math.round(weatherData.wind.speed * 3.6), // Convert m/s to km/h&#10;        rainfall: weatherData.rain ? Math.round(weatherData.rain['1h'] || 0) : 0, // Real rainfall data from API&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Weather API error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Weather service unavailable&quot; });&#10;    }&#10;  });&#10;&#10;  // Message routes&#10;  app.get(&quot;/api/messages&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const messagesList = await db.query.messages.findMany({&#10;        where: eq(messages.receiverId, req.user.id),&#10;      });&#10;      res.json(messagesList);&#10;    } catch (error) {&#10;      console.error(&quot;Get messages error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/messages&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const messageData = insertMessageSchema.parse(req.body);&#10;      const [message] = await db.insert(messages).values({&#10;        ...messageData,&#10;        senderId: req.user.id,&#10;      }).returning();&#10;      res.status(201).json(message);&#10;    } catch (error) {&#10;      console.error(&quot;Send message error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid message data&quot; });&#10;    }&#10;  });&#10;&#10;  // Get user stats&#10;  app.get(&quot;/api/stats&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const allUsers = await db.query.users.findMany();&#10;      const allProducts = await db.query.products.findMany();&#10;      const allMessages = await db.query.messages.findMany();&#10;&#10;      // Calculate actual transactions from messages (inquiries that led to communication)&#10;      const uniqueConversations = new Set();&#10;      allMessages.forEach(msg =&gt; {&#10;        const conversationKey = [msg.senderId, msg.receiverId].sort().join('-');&#10;        uniqueConversations.add(conversationKey);&#10;      });&#10;&#10;      res.json({&#10;        users: allUsers.length,&#10;        products: allProducts.length, // Count all products in the database&#10;        transactions: uniqueConversations.size, // Real conversation count as proxy for transactions&#10;        regions: new Set(allUsers.map(u =&gt; u.location?.split(',').pop()?.trim()).filter(Boolean)).size // Count unique regions from user locations&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Get stats error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  // Get trusted sellers&#10;  app.get(&quot;/api/users/trusted-sellers&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const limit = req.query.limit ? parseInt(req.query.limit as string) : 6;&#10;      const sellers = await db.query.users.findMany({&#10;        where: eq(users.verified, true),&#10;        orderBy: desc(users.joinedAt),&#10;        limit: limit,&#10;      });&#10;      &#10;      // Remove password from response&#10;      const sellersWithoutPassword = sellers.map(({ password, ...seller }) =&gt; seller);&#10;      res.json(sellersWithoutPassword);&#10;    } catch (error) {&#10;      console.error(&quot;Get trusted sellers error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  const httpServer = createServer(app);&#10;  return httpServer;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/storage.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/storage.ts" />
              <option name="originalContent" value="import { type User, type InsertUser, type Product, type InsertProduct, type Message, type InsertMessage } from &quot;@shared/schema&quot;;&#10;import { randomUUID } from &quot;node:crypto&quot;;&#10;&#10;export interface IStorage {&#10;  // User operations&#10;  getUser(id: string): Promise&lt;User | undefined&gt;;&#10;  getUserByEmail(email: string): Promise&lt;User | undefined&gt;;&#10;  createUser(user: InsertUser): Promise&lt;User&gt;;&#10;  updateUser(id: string, updates: Partial&lt;User&gt;): Promise&lt;User | undefined&gt;;&#10;  getTrustedSellers(limit?: number): Promise&lt;User[]&gt;;&#10;&#10;  // Product operations&#10;  getProducts(filters?: { category?: string; search?: string; sellerId?: string }): Promise&lt;Product[]&gt;;&#10;  getProduct(id: string): Promise&lt;Product | undefined&gt;;&#10;  createProduct(sellerId: string, product: InsertProduct): Promise&lt;Product&gt;;&#10;  updateProduct(id: string, sellerId: string, updates: Partial&lt;Product&gt;): Promise&lt;Product | undefined&gt;;&#10;  deleteProduct(id: string, sellerId: string): Promise&lt;boolean&gt;;&#10;  getFeaturedProducts(): Promise&lt;Product[]&gt;;&#10;  getLatestProducts(limit?: number): Promise&lt;Product[]&gt;;&#10;&#10;  // Message operations&#10;  getMessages(userId: string): Promise&lt;Message[]&gt;;&#10;  getConversation(userId1: string, userId2: string): Promise&lt;Message[]&gt;;&#10;  createMessage(senderId: string, message: InsertMessage): Promise&lt;Message&gt;;&#10;  markMessageRead(id: string, userId: string): Promise&lt;boolean&gt;;&#10;}&#10;&#10;export class MemStorage implements IStorage {&#10;  private users: Map&lt;string, User&gt;;&#10;  private products: Map&lt;string, Product&gt;;&#10;  private messages: Map&lt;string, Message&gt;;&#10;&#10;  constructor() {&#10;    this.users = new Map();&#10;    this.products = new Map();&#10;    this.messages = new Map();&#10;    &#10;    // Initialize with some sample data&#10;    this.initializeSampleData();&#10;  }&#10;&#10;  private initializeSampleData() {&#10;    // Sample users&#10;    const farmers = [&#10;      {&#10;        id: &quot;farmer1&quot;,&#10;        email: &quot;kwame@example.com&quot;,&#10;        password: &quot;$2b$10$hash1&quot;, // In real app, properly hash passwords&#10;        firstName: &quot;Kwame&quot;,&#10;        lastName: &quot;Asante&quot;,&#10;        accountType: &quot;farmer&quot; as const,&#10;        location: &quot;Kumasi, Ashanti Region&quot;,&#10;        phone: &quot;+233 24 123 4567&quot;,&#10;        verified: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;farmer2&quot;,&#10;        email: &quot;akosua@example.com&quot;,&#10;        password: &quot;$2b$10$hash2&quot;,&#10;        firstName: &quot;Akosua&quot;,&#10;        lastName: &quot;Mensah&quot;,&#10;        accountType: &quot;farmer&quot; as const,&#10;        location: &quot;Accra, Greater Accra&quot;,&#10;        phone: &quot;+233 24 234 5678&quot;,&#10;        verified: true,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;&#10;    farmers.forEach(user =&gt; this.users.set(user.id, user));&#10;&#10;    // Sample products&#10;    const sampleProducts = [&#10;      {&#10;        id: &quot;prod1&quot;,&#10;        sellerId: &quot;farmer1&quot;,&#10;        name: &quot;Premium Tomatoes&quot;,&#10;        description: &quot;Fresh, organic tomatoes from Ashanti region farms. Perfect for cooking and salads.&quot;,&#10;        category: &quot;crops&quot; as const,&#10;        price: &quot;45.00&quot;,&#10;        unit: &quot;kg&quot;,&#10;        quantity: 100,&#10;        location: &quot;Kumasi&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: true,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;prod2&quot;,&#10;        sellerId: &quot;farmer2&quot;,&#10;        name: &quot;Small Tractor&quot;,&#10;        description: &quot;Reliable 25HP tractor perfect for small to medium farms. Well maintained.&quot;,&#10;        category: &quot;tools&quot; as const,&#10;        price: &quot;48000.00&quot;,&#10;        unit: &quot;unit&quot;,&#10;        quantity: 1,&#10;        location: &quot;Accra&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1625246333195-78d9c38ad449?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: true,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;prod3&quot;,&#10;        sellerId: &quot;farmer1&quot;,&#10;        name: &quot;Organic Fertilizer&quot;,&#10;        description: &quot;100% organic fertilizer made from compost. Great for all crop types.&quot;,&#10;        category: &quot;medications&quot; as const,&#10;        price: &quot;25.00&quot;,&#10;        unit: &quot;bag&quot;,&#10;        quantity: 50,&#10;        location: &quot;Kumasi&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: false,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;&#10;    sampleProducts.forEach(product =&gt; this.products.set(product.id, product));&#10;&#10;    // Sample messages&#10;    const sampleMessages = [&#10;      {&#10;        id: &quot;msg1&quot;,&#10;        senderId: &quot;farmer2&quot;,&#10;        receiverId: &quot;farmer1&quot;,&#10;        productId: &quot;prod1&quot;,&#10;        content: &quot;Hi, I'm interested in your tomatoes. Are they still available?&quot;,&#10;        read: false,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;&#10;    sampleMessages.forEach(message =&gt; this.messages.set(message.id, message));&#10;    this.initializeSampleData();&#10;  }&#10;&#10;  private initializeSampleData() {&#10;    // Sample users&#10;    const farmers = [&#10;      {&#10;        id: &quot;farmer1&quot;,&#10;        email: &quot;kwame@example.com&quot;,&#10;        password: &quot;$2b$10$hash1&quot;, // In real app, properly hash passwords&#10;        firstName: &quot;Kwame&quot;,&#10;        lastName: &quot;Asante&quot;,&#10;        accountType: &quot;farmer&quot; as const,&#10;        location: &quot;Kumasi, Ashanti Region&quot;,&#10;        phone: &quot;+233 24 123 4567&quot;,&#10;        verified: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;farmer2&quot;,&#10;        email: &quot;akosua@example.com&quot;,&#10;        password: &quot;$2b$10$hash2&quot;,&#10;        firstName: &quot;Akosua&quot;,&#10;        lastName: &quot;Mensah&quot;,&#10;        accountType: &quot;farmer&quot; as const,&#10;        location: &quot;Accra, Greater Accra&quot;,&#10;        phone: &quot;+233 24 234 5678&quot;,&#10;        verified: true,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;    &#10;    farmers.forEach(user =&gt; this.users.set(user.id, user));&#10;&#10;    // Sample products&#10;    const sampleProducts = [&#10;      {&#10;        id: &quot;prod1&quot;,&#10;        sellerId: &quot;farmer1&quot;,&#10;        name: &quot;Premium Tomatoes&quot;,&#10;        description: &quot;Fresh, organic tomatoes from Ashanti region farms. Perfect for cooking and salads.&quot;,&#10;        category: &quot;crops&quot; as const,&#10;        price: &quot;45.00&quot;,&#10;        unit: &quot;kg&quot;,&#10;        quantity: 100,&#10;        location: &quot;Kumasi&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: true,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;prod2&quot;,&#10;        sellerId: &quot;farmer2&quot;,&#10;        name: &quot;Small Tractor&quot;,&#10;        description: &quot;Reliable 25HP tractor perfect for small to medium farms. Well maintained.&quot;,&#10;        category: &quot;tools&quot; as const,&#10;        price: &quot;48000.00&quot;,&#10;        unit: &quot;unit&quot;,&#10;        quantity: 1,&#10;        location: &quot;Accra&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1625246333195-78d9c38ad449?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: true,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;prod3&quot;,&#10;        sellerId: &quot;farmer1&quot;,&#10;        name: &quot;Organic Fertilizer&quot;,&#10;        description: &quot;100% organic fertilizer made from compost. Great for all crop types.&quot;,&#10;        category: &quot;medications&quot; as const,&#10;        price: &quot;25.00&quot;,&#10;        unit: &quot;bag&quot;,&#10;        quantity: 50,&#10;        location: &quot;Kumasi&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: false,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;    &#10;    sampleProducts.forEach(product =&gt; this.products.set(product.id, product));&#10;&#10;    // Sample messages&#10;    const sampleMessages = [&#10;      {&#10;        id: &quot;msg1&quot;,&#10;        senderId: &quot;farmer2&quot;,&#10;        receiverId: &quot;farmer1&quot;,&#10;        productId: &quot;prod1&quot;,&#10;        content: &quot;Hi, I'm interested in your tomatoes. Are they still available?&quot;,&#10;        read: false,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;&#10;    sampleMessages.forEach(message =&gt; this.messages.set(message.id, message));&#10;  }&#10;&#10;  // User operations&#10;  async getUser(id: string): Promise&lt;User | undefined&gt; {&#10;    return this.users.get(id);&#10;  }&#10;&#10;  async getUserByEmail(email: string): Promise&lt;User | undefined&gt; {&#10;    return Array.from(this.users.values()).find(user =&gt; user.email === email);&#10;  }&#10;&#10;  async createUser(user: InsertUser): Promise&lt;User&gt; {&#10;    const newUser: User = {&#10;      id: randomUUID(),&#10;      ...user,&#10;      verified: false,&#10;      createdAt: new Date(),&#10;    };&#10;    this.users.set(newUser.id, newUser);&#10;    return newUser;&#10;  }&#10;&#10;  async updateUser(id: string, updates: Partial&lt;User&gt;): Promise&lt;User | undefined&gt; {&#10;    const user = this.users.get(id);&#10;    if (!user) return undefined;&#10;    &#10;    const updatedUser = { ...user, ...updates };&#10;    this.users.set(id, updatedUser);&#10;    return updatedUser;&#10;  }&#10;&#10;  async getTrustedSellers(limit?: number): Promise&lt;User[]&gt; {&#10;    const trustedSellers = Array.from(this.users.values())&#10;      .filter(user =&gt; user.accountType === &quot;farmer&quot; &amp;&amp; user.verified)&#10;      .sort((a, b) =&gt; a.createdAt.getTime() - b.createdAt.getTime());&#10;&#10;    return limit ? trustedSellers.slice(0, limit) : trustedSellers;&#10;  }&#10;&#10;  // Product operations&#10;  async getProducts(filters?: { category?: string; search?: string; sellerId?: string }): Promise&lt;Product[]&gt; {&#10;    let products = Array.from(this.products.values()).filter(p =&gt; p.active);&#10;    &#10;    if (filters?.category) {&#10;      products = products.filter(p =&gt; p.category === filters.category);&#10;    }&#10;    &#10;    if (filters?.search) {&#10;      const search = filters.search.toLowerCase();&#10;      products = products.filter(p =&gt; &#10;        p.name.toLowerCase().includes(search) || &#10;        p.description.toLowerCase().includes(search)&#10;      );&#10;    }&#10;    &#10;    if (filters?.sellerId) {&#10;      products = products.filter(p =&gt; p.sellerId === filters.sellerId);&#10;    }&#10;    &#10;    return products.sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  async getProduct(id: string): Promise&lt;Product | undefined&gt; {&#10;    const product = this.products.get(id);&#10;    return product?.active ? product : undefined;&#10;  }&#10;&#10;  async createProduct(sellerId: string, product: InsertProduct): Promise&lt;Product&gt; {&#10;    const newProduct: Product = {&#10;      id: randomUUID(),&#10;      sellerId,&#10;      ...product,&#10;      featured: false,&#10;      active: true,&#10;      createdAt: new Date(),&#10;    };&#10;    this.products.set(newProduct.id, newProduct);&#10;    return newProduct;&#10;  }&#10;&#10;  async updateProduct(id: string, sellerId: string, updates: Partial&lt;Product&gt;): Promise&lt;Product | undefined&gt; {&#10;    const product = this.products.get(id);&#10;    if (!product || product.sellerId !== sellerId) return undefined;&#10;    &#10;    const updatedProduct = { ...product, ...updates };&#10;    this.products.set(id, updatedProduct);&#10;    return updatedProduct;&#10;  }&#10;&#10;  async deleteProduct(id: string, sellerId: string): Promise&lt;boolean&gt; {&#10;    const product = this.products.get(id);&#10;    if (!product || product.sellerId !== sellerId) return false;&#10;    &#10;    // Soft delete - mark as inactive&#10;    const updatedProduct = { ...product, active: false };&#10;    this.products.set(id, updatedProduct);&#10;    return true;&#10;  }&#10;&#10;  async getFeaturedProducts(): Promise&lt;Product[]&gt; {&#10;    return Array.from(this.products.values())&#10;      .filter(p =&gt; p.active &amp;&amp; p.featured)&#10;      .sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  async getLatestProducts(limit?: number): Promise&lt;Product[]&gt; {&#10;    const latestProducts = Array.from(this.products.values())&#10;      .filter(p =&gt; p.active)&#10;      .sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;&#10;    return limit ? latestProducts.slice(0, limit) : latestProducts;&#10;  }&#10;&#10;  // Message operations&#10;  async getMessages(userId: string): Promise&lt;Message[]&gt; {&#10;    return Array.from(this.messages.values())&#10;      .filter(m =&gt; m.senderId === userId || m.receiverId === userId)&#10;      .sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  async getConversation(userId1: string, userId2: string): Promise&lt;Message[]&gt; {&#10;    return Array.from(this.messages.values())&#10;      .filter(m =&gt; &#10;        (m.senderId === userId1 &amp;&amp; m.receiverId === userId2) ||&#10;        (m.senderId === userId2 &amp;&amp; m.receiverId === userId1)&#10;      )&#10;      .sort((a, b) =&gt; a.createdAt.getTime() - b.createdAt.getTime());&#10;  }&#10;&#10;  async createMessage(senderId: string, message: InsertMessage): Promise&lt;Message&gt; {&#10;    const newMessage: Message = {&#10;      id: randomUUID(),&#10;      senderId,&#10;      ...message,&#10;      read: false,&#10;      createdAt: new Date(),&#10;    };&#10;    this.messages.set(newMessage.id, newMessage);&#10;    return newMessage;&#10;  }&#10;&#10;  async markMessageRead(id: string, userId: string): Promise&lt;boolean&gt; {&#10;    const message = this.messages.get(id);&#10;    if (!message || message.receiverId !== userId) return false;&#10;    &#10;    const updatedMessage = { ...message, read: true };&#10;    this.messages.set(id, updatedMessage);&#10;    return true;&#10;  }&#10;}&#10;&#10;export const storage = new MemStorage();&#10;" />
              <option name="updatedContent" value="import { type User, type InsertUser, type Product, type InsertProduct, type Message, type InsertMessage } from &quot;@shared/schema&quot;;&#10;import { randomUUID } from &quot;node:crypto&quot;;&#10;&#10;export interface IStorage {&#10;  // User operations&#10;  getUser(id: string): Promise&lt;User | undefined&gt;;&#10;  getUserByEmail(email: string): Promise&lt;User | undefined&gt;;&#10;  createUser(user: InsertUser): Promise&lt;User&gt;;&#10;  updateUser(id: string, updates: Partial&lt;User&gt;): Promise&lt;User | undefined&gt;;&#10;  getTrustedSellers(limit?: number): Promise&lt;User[]&gt;;&#10;&#10;  // Product operations&#10;  getProducts(filters?: { category?: string; search?: string; sellerId?: string }): Promise&lt;Product[]&gt;;&#10;  getProduct(id: string): Promise&lt;Product | undefined&gt;;&#10;  createProduct(sellerId: string, product: InsertProduct): Promise&lt;Product&gt;;&#10;  updateProduct(id: string, sellerId: string, updates: Partial&lt;Product&gt;): Promise&lt;Product | undefined&gt;;&#10;  deleteProduct(id: string, sellerId: string): Promise&lt;boolean&gt;;&#10;  getFeaturedProducts(): Promise&lt;Product[]&gt;;&#10;  getLatestProducts(limit?: number): Promise&lt;Product[]&gt;;&#10;&#10;  // Message operations&#10;  getMessages(userId: string): Promise&lt;Message[]&gt;;&#10;  getConversation(userId1: string, userId2: string): Promise&lt;Message[]&gt;;&#10;  createMessage(senderId: string, message: InsertMessage): Promise&lt;Message&gt;;&#10;  markMessageRead(id: string, userId: string): Promise&lt;boolean&gt;;&#10;}&#10;&#10;export class MemStorage implements IStorage {&#10;  private users: Map&lt;string, User&gt;;&#10;  private products: Map&lt;string, Product&gt;;&#10;  private messages: Map&lt;string, Message&gt;;&#10;&#10;  constructor() {&#10;    this.users = new Map();&#10;    this.products = new Map();&#10;    this.messages = new Map();&#10;    &#10;    // Start with empty data - users will register and add products&#10;  }&#10;&#10;  // User operations&#10;  async getUser(id: string): Promise&lt;User | undefined&gt; {&#10;    return this.users.get(id);&#10;  }&#10;&#10;  async getUserByEmail(email: string): Promise&lt;User | undefined&gt; {&#10;    return Array.from(this.users.values()).find(user =&gt; user.email === email);&#10;  }&#10;&#10;  async createUser(user: InsertUser): Promise&lt;User&gt; {&#10;    const newUser: User = {&#10;      id: randomUUID(),&#10;      ...user,&#10;      verified: false,&#10;      createdAt: new Date(),&#10;    };&#10;    this.users.set(newUser.id, newUser);&#10;    return newUser;&#10;  }&#10;&#10;  async updateUser(id: string, updates: Partial&lt;User&gt;): Promise&lt;User | undefined&gt; {&#10;    const user = this.users.get(id);&#10;    if (!user) return undefined;&#10;    &#10;    const updatedUser = { ...user, ...updates };&#10;    this.users.set(id, updatedUser);&#10;    return updatedUser;&#10;  }&#10;&#10;  async getTrustedSellers(limit?: number): Promise&lt;User[]&gt; {&#10;    const trustedSellers = Array.from(this.users.values())&#10;      .filter(user =&gt; user.accountType === &quot;farmer&quot; &amp;&amp; user.verified)&#10;      .sort((a, b) =&gt; a.createdAt.getTime() - b.createdAt.getTime());&#10;&#10;    return limit ? trustedSellers.slice(0, limit) : trustedSellers;&#10;  }&#10;&#10;  // Product operations&#10;  async getProducts(filters?: { category?: string; search?: string; sellerId?: string }): Promise&lt;Product[]&gt; {&#10;    let products = Array.from(this.products.values()).filter(p =&gt; p.active);&#10;    &#10;    if (filters?.category) {&#10;      products = products.filter(p =&gt; p.category === filters.category);&#10;    }&#10;    &#10;    if (filters?.search) {&#10;      const search = filters.search.toLowerCase();&#10;      products = products.filter(p =&gt; &#10;        p.name.toLowerCase().includes(search) || &#10;        p.description.toLowerCase().includes(search)&#10;      );&#10;    }&#10;    &#10;    if (filters?.sellerId) {&#10;      products = products.filter(p =&gt; p.sellerId === filters.sellerId);&#10;    }&#10;    &#10;    return products.sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  async getProduct(id: string): Promise&lt;Product | undefined&gt; {&#10;    const product = this.products.get(id);&#10;    return product?.active ? product : undefined;&#10;  }&#10;&#10;  async createProduct(sellerId: string, product: InsertProduct): Promise&lt;Product&gt; {&#10;    const newProduct: Product = {&#10;      id: randomUUID(),&#10;      sellerId,&#10;      ...product,&#10;      featured: false,&#10;      active: true,&#10;      createdAt: new Date(),&#10;    };&#10;    this.products.set(newProduct.id, newProduct);&#10;    return newProduct;&#10;  }&#10;&#10;  async updateProduct(id: string, sellerId: string, updates: Partial&lt;Product&gt;): Promise&lt;Product | undefined&gt; {&#10;    const product = this.products.get(id);&#10;    if (!product || product.sellerId !== sellerId) return undefined;&#10;    &#10;    const updatedProduct = { ...product, ...updates };&#10;    this.products.set(id, updatedProduct);&#10;    return updatedProduct;&#10;  }&#10;&#10;  async deleteProduct(id: string, sellerId: string): Promise&lt;boolean&gt; {&#10;    const product = this.products.get(id);&#10;    if (!product || product.sellerId !== sellerId) return false;&#10;    &#10;    // Soft delete - mark as inactive&#10;    const updatedProduct = { ...product, active: false };&#10;    this.products.set(id, updatedProduct);&#10;    return true;&#10;  }&#10;&#10;  async getFeaturedProducts(): Promise&lt;Product[]&gt; {&#10;    return Array.from(this.products.values())&#10;      .filter(p =&gt; p.active &amp;&amp; p.featured)&#10;      .sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  async getLatestProducts(limit?: number): Promise&lt;Product[]&gt; {&#10;    const latestProducts = Array.from(this.products.values())&#10;      .filter(p =&gt; p.active)&#10;      .sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;&#10;    return limit ? latestProducts.slice(0, limit) : latestProducts;&#10;  }&#10;&#10;  // Message operations&#10;  async getMessages(userId: string): Promise&lt;Message[]&gt; {&#10;    return Array.from(this.messages.values())&#10;      .filter(m =&gt; m.senderId === userId || m.receiverId === userId)&#10;      .sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  async getConversation(userId1: string, userId2: string): Promise&lt;Message[]&gt; {&#10;    return Array.from(this.messages.values())&#10;      .filter(m =&gt; &#10;        (m.senderId === userId1 &amp;&amp; m.receiverId === userId2) ||&#10;        (m.senderId === userId2 &amp;&amp; m.receiverId === userId1)&#10;      )&#10;      .sort((a, b) =&gt; a.createdAt.getTime() - b.createdAt.getTime());&#10;  }&#10;&#10;  async createMessage(senderId: string, message: InsertMessage): Promise&lt;Message&gt; {&#10;    const newMessage: Message = {&#10;      id: randomUUID(),&#10;      senderId,&#10;      ...message,&#10;      read: false,&#10;      createdAt: new Date(),&#10;    };&#10;    this.messages.set(newMessage.id, newMessage);&#10;    return newMessage;&#10;  }&#10;&#10;  async markMessageRead(id: string, userId: string): Promise&lt;boolean&gt; {&#10;    const message = this.messages.get(id);&#10;    if (!message || message.receiverId !== userId) return false;&#10;    &#10;    const updatedMessage = { ...message, read: true };&#10;    this.messages.set(id, updatedMessage);&#10;    return true;&#10;  }&#10;}&#10;&#10;export const storage = new MemStorage();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/shared/schema.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/shared/schema.ts" />
              <option name="originalContent" value="import { z } from &quot;zod&quot;;&#10;&#10;// Simplified schemas for frontend validation&#10;export const insertUserSchema = z.object({&#10;  email: z.string().email(),&#10;  password: z.string().min(6),&#10;  name: z.string().min(1),&#10;  location: z.string().optional(),&#10;  phone: z.string().optional(),&#10;});&#10;&#10;export const insertProductSchema = z.object({&#10;  name: z.string().min(1, &quot;Product name is required&quot;),&#10;  description: z.string().min(1, &quot;Description is required&quot;),&#10;  category: z.enum([&quot;crops&quot;, &quot;livestock&quot;, &quot;farm-tools&quot;, &quot;seeds&quot;, &quot;fertilizers&quot;]),&#10;  price: z.number().positive(&quot;Price must be positive&quot;),&#10;  stock: z.number().int().min(0, &quot;Stock must be non-negative&quot;).optional(),&#10;  location: z.string().min(1, &quot;Location is required&quot;),&#10;  imageUrl: z.string().url().optional().or(z.literal(&quot;&quot;)),&#10;});&#10;&#10;export const insertMessageSchema = z.object({&#10;  receiverId: z.string().min(1),&#10;  content: z.string().min(1),&#10;});&#10;&#10;// Type exports&#10;export type User = {&#10;  id: string;&#10;  email: string;&#10;  name: string;&#10;  avatar?: string;&#10;  location?: string;&#10;  phone?: string;&#10;  verified: boolean;&#10;  rating: string;&#10;  totalSales: number;&#10;  joinedAt: Date;&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;};&#10;&#10;export type Product = {&#10;  id: string;&#10;  name: string;&#10;  description: string;&#10;  price: string;&#10;  category: string;&#10;  imageUrl?: string;&#10;  sellerId: string;&#10;  stock?: number;&#10;  location?: string;&#10;  featured: boolean;&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;};&#10;&#10;export type Message = {&#10;  id: string;&#10;  senderId: string;&#10;  receiverId: string;&#10;  content: string;&#10;  read: boolean;&#10;  createdAt: Date;&#10;};&#10;&#10;export type InsertUser = z.infer&lt;typeof insertUserSchema&gt;;&#10;export type InsertProduct = z.infer&lt;typeof insertProductSchema&gt;;&#10;export type InsertMessage = z.infer&lt;typeof insertMessageSchema&gt;;&#10;" />
              <option name="updatedContent" value="import { z } from &quot;zod&quot;;&#10;&#10;// Simplified schemas for frontend validation&#10;export const insertUserSchema = z.object({&#10;  email: z.string().email(),&#10;  password: z.string().min(6),&#10;  name: z.string().min(1),&#10;  location: z.string().optional(),&#10;  phone: z.string().optional(),&#10;});&#10;&#10;export const insertProductSchema = z.object({&#10;  name: z.string().min(1, &quot;Product name is required&quot;),&#10;  description: z.string().min(1, &quot;Description is required&quot;),&#10;  category: z.enum([&quot;crops&quot;, &quot;livestock&quot;, &quot;farm-tools&quot;, &quot;seeds&quot;, &quot;fertilizers&quot;]),&#10;  price: z.number().positive(&quot;Price must be positive&quot;),&#10;  quantity: z.number().int().min(1, &quot;Quantity must be at least 1&quot;),&#10;  unit: z.string().min(1, &quot;Unit of measurement is required&quot;),&#10;  stock: z.number().int().min(0, &quot;Stock must be non-negative&quot;).optional(),&#10;  location: z.string().min(1, &quot;Location is required&quot;),&#10;  imageUrl: z.string().url().optional().or(z.literal(&quot;&quot;)),&#10;});&#10;&#10;export const insertMessageSchema = z.object({&#10;  receiverId: z.string().min(1),&#10;  content: z.string().min(1),&#10;});&#10;&#10;// Type exports&#10;export type User = {&#10;  id: string;&#10;  email: string;&#10;  name: string;&#10;  avatar?: string;&#10;  location?: string;&#10;  phone?: string;&#10;  verified: boolean;&#10;  rating: string;&#10;  totalSales: number;&#10;  joinedAt: Date;&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;};&#10;&#10;export type Product = {&#10;  id: string;&#10;  name: string;&#10;  description: string;&#10;  price: string;&#10;  category: string;&#10;  imageUrl?: string;&#10;  sellerId: string;&#10;  stock?: number;&#10;  location?: string;&#10;  featured: boolean;&#10;  createdAt: Date;&#10;  updatedAt: Date;&#10;};&#10;&#10;export type Message = {&#10;  id: string;&#10;  senderId: string;&#10;  receiverId: string;&#10;  content: string;&#10;  read: boolean;&#10;  createdAt: Date;&#10;};&#10;&#10;export type InsertUser = z.infer&lt;typeof insertUserSchema&gt;;&#10;export type InsertProduct = z.infer&lt;typeof insertProductSchema&gt;;&#10;export type InsertMessage = z.infer&lt;typeof insertMessageSchema&gt;;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vite.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vite.config.ts" />
              <option name="originalContent" value="import { defineConfig } from &quot;vite&quot;;&#10;import react from &quot;@vitejs/plugin-react&quot;;&#10;import path from &quot;path&quot;;&#10;&#10;export default defineConfig(async () =&gt; {&#10;  const plugins = [react()];&#10;&#10;  // Only load Replit plugins when running in Replit environment&#10;  if (process.env.REPL_ID !== undefined) {&#10;    try {&#10;      const runtimeErrorOverlay = await import(&quot;@replit/vite-plugin-runtime-error-modal&quot;);&#10;      plugins.push(runtimeErrorOverlay.default());&#10;&#10;      if (process.env.NODE_ENV !== &quot;production&quot;) {&#10;        const cartographer = await import(&quot;@replit/vite-plugin-cartographer&quot;);&#10;        plugins.push(cartographer.cartographer());&#10;      }&#10;    } catch (error) {&#10;      console.warn(&quot;Replit plugins not available, skipping...&quot;);&#10;    }&#10;  }&#10;&#10;  return {&#10;    plugins,&#10;    resolve: {&#10;      alias: {&#10;        &quot;@&quot;: path.resolve(import.meta.dirname, &quot;client&quot;, &quot;src&quot;),&#10;        &quot;@shared&quot;: path.resolve(import.meta.dirname, &quot;shared&quot;),&#10;        &quot;@assets&quot;: path.resolve(import.meta.dirname, &quot;attached_assets&quot;),&#10;      },&#10;    },&#10;    root: path.resolve(import.meta.dirname, &quot;client&quot;),&#10;    build: {&#10;      outDir: path.resolve(import.meta.dirname, &quot;dist/public&quot;),&#10;      emptyOutDir: true,&#10;" />
              <option name="updatedContent" value="import { defineConfig } from &quot;vite&quot;;&#10;import react from &quot;@vitejs/plugin-react&quot;;&#10;import path from &quot;path&quot;;&#10;&#10;export default defineConfig(async () =&gt; {&#10;  const plugins = [react()];&#10;&#10;  // Only load Replit plugins when running in Replit environment&#10;  if (process.env.REPL_ID !== undefined) {&#10;    try {&#10;      const runtimeErrorOverlay = await import(&quot;@replit/vite-plugin-runtime-error-modal&quot;);&#10;      plugins.push(runtimeErrorOverlay.default());&#10;&#10;      if (process.env.NODE_ENV !== &quot;production&quot;) {&#10;        const cartographer = await import(&quot;@replit/vite-plugin-cartographer&quot;);&#10;        plugins.push(cartographer.cartographer());&#10;      }&#10;    } catch (error) {&#10;      console.warn(&quot;Replit plugins not available, skipping...&quot;);&#10;    }&#10;  }&#10;&#10;  return {&#10;    plugins,&#10;    resolve: {&#10;      alias: {&#10;        &quot;@&quot;: path.resolve(import.meta.dirname, &quot;client&quot;, &quot;src&quot;),&#10;        &quot;@shared&quot;: path.resolve(import.meta.dirname, &quot;shared&quot;),&#10;        &quot;@assets&quot;: path.resolve(import.meta.dirname, &quot;attached_assets&quot;),&#10;      },&#10;    },&#10;    root: path.resolve(import.meta.dirname, &quot;client&quot;),&#10;    build: {&#10;      outDir: path.resolve(import.meta.dirname, &quot;dist/public&quot;),&#10;      emptyOutDir: true,&#10;      chunkSizeWarningLimit: 1000, // Increase chunk size warning limit to 1000kb&#10;      rollupOptions: {&#10;        output: {&#10;          manualChunks: {&#10;            vendor: ['react', 'react-dom'],&#10;            ui: ['@radix-ui/react-select', '@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu'],&#10;            icons: ['lucide-react'],&#10;            utils: ['clsx', 'tailwind-merge']&#10;          }&#10;        }&#10;      }&#10;    },&#10;    server: {&#10;      fs: {&#10;        strict: true,&#10;        deny: [&quot;**/.*&quot;],&#10;      },&#10;    },&#10;  };&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>