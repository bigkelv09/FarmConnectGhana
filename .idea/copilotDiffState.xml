<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/client/src/pages/marketplace.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client/src/pages/marketplace.tsx" />
              <option name="originalContent" value="import { useState, useEffect } from 'react';&#10;import { useQuery } from '@tanstack/react-query';&#10;import { useLocation } from 'wouter';&#10;import { Header } from '@/components/header';&#10;import { ProductCard } from '@/components/product-card';&#10;import { Button } from '@/components/ui/button';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { Product } from '@shared/schema';&#10;import { Search, Filter, Loader2 } from 'lucide-react';&#10;&#10;export default function Marketplace() {&#10;  const [location, setLocation] = useLocation();&#10;  const [searchParams, setSearchParams] = useState({&#10;    search: '',&#10;    category: '',&#10;    sortBy: 'newest',&#10;    minPrice: '',&#10;    maxPrice: '',&#10;  });&#10;&#10;  // Parse URL parameters on component mount&#10;  useEffect(() =&gt; {&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    setSearchParams({&#10;      search: urlParams.get('search') || '',&#10;      category: urlParams.get('category') || '',&#10;      sortBy: urlParams.get('sortBy') || 'newest',&#10;      minPrice: urlParams.get('minPrice') || '',&#10;      maxPrice: urlParams.get('maxPrice') || '',&#10;    });&#10;  }, [location]);&#10;&#10;  const buildQueryParams = () =&gt; {&#10;    const params = new URLSearchParams();&#10;    if (searchParams.search) params.set('search', searchParams.search);&#10;    if (searchParams.category) params.set('category', searchParams.category);&#10;    return params.toString();&#10;  };&#10;&#10;  // Fixed React Query implementation&#10;  const { data: products = [], isLoading, error } = useQuery({&#10;    queryKey: ['products', buildQueryParams()],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch(`/api/products?${buildQueryParams()}`);&#10;      if (!response.ok) {&#10;        throw new Error(`HTTP error! status: ${response.status}`);&#10;      }&#10;      const data = await response.json();&#10;      return data as Product[];&#10;    },&#10;    staleTime: 5 * 60 * 1000, // 5 minutes&#10;  });&#10;&#10;  const handleSearchChange = (field: string, value: string) =&gt; {&#10;    const newParams = { ...searchParams, [field]: value };&#10;    setSearchParams(newParams);&#10;&#10;    // Update URL&#10;    const urlParams = new URLSearchParams();&#10;    Object.entries(newParams).forEach(([key, val]) =&gt; {&#10;      if (val) urlParams.set(key, val);&#10;    });&#10;&#10;    const newUrl = `/marketplace${urlParams.toString() ? `?${urlParams.toString()}` : ''}`;&#10;    setLocation(newUrl);&#10;  };&#10;&#10;  const filteredAndSortedProducts = products&#10;    .filter(product =&gt; {&#10;      // Category filter&#10;      const matchesCategory = !searchParams.category || product.category === searchParams.category;&#10;&#10;      // Price filter&#10;      const matchesPrice = (!searchParams.minPrice || parseFloat(product.price) &gt;= parseFloat(searchParams.minPrice)) &amp;&amp;&#10;                          (!searchParams.maxPrice || parseFloat(product.price) &lt;= parseFloat(searchParams.maxPrice));&#10;&#10;      return matchesCategory &amp;&amp; matchesPrice;&#10;    })&#10;    .sort((a, b) =&gt; {&#10;      switch (searchParams.sortBy) {&#10;        case 'price-low':&#10;          return parseFloat(a.price) - parseFloat(b.price);&#10;        case 'price-high':&#10;          return parseFloat(b.price) - parseFloat(a.price);&#10;        case 'name':&#10;          return a.name.localeCompare(b.name);&#10;        case 'newest':&#10;        default:&#10;          return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();&#10;      }&#10;    });&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;Header /&gt;&#10;&#10;      &lt;div className=&quot;container mx-auto px-4 py-8&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col lg:flex-row gap-8&quot;&gt;&#10;          {/* Sidebar Filters */}&#10;          &lt;div className=&quot;lg:w-1/4&quot;&gt;&#10;            &lt;Card className=&quot;sticky top-24&quot;&gt;&#10;              &lt;CardHeader&gt;&#10;                &lt;CardTitle className=&quot;flex items-center&quot;&gt;&#10;                  &lt;Filter className=&quot;w-5 h-5 mr-2&quot; /&gt;&#10;                  Filters&#10;                &lt;/CardTitle&gt;&#10;              &lt;/CardHeader&gt;&#10;              &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                {/* Search */}&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;search&quot;&gt;Search Products&lt;/Label&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;Search className=&quot;absolute left-3 top-3 h-4 w-4 text-gray-400&quot; /&gt;&#10;                    &lt;Input&#10;                      id=&quot;search&quot;&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      value={searchParams.search}&#10;                      onChange={(e) =&gt; handleSearchChange('search', e.target.value)}&#10;                      className=&quot;pl-10&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter - FIXED */}&#10;                &lt;div&gt;&#10;                  &lt;Label&gt;Category&lt;/Label&gt;&#10;                  &lt;Select&#10;                    value={searchParams.category || 'all'}&#10;                    onValueChange={(value) =&gt; handleSearchChange('category', value === 'all' ? '' : value)}&#10;                  &gt;&#10;                    &lt;SelectTrigger&gt;&#10;                      &lt;SelectValue placeholder=&quot;All Categories&quot; /&gt;&#10;                    &lt;/SelectTrigger&gt;&#10;                    &lt;SelectContent&gt;&#10;                      &lt;SelectItem value=&quot;all&quot;&gt;All Categories&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;crops&quot;&gt;Crops&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;tools&quot;&gt;Tools &amp; Equipment&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;medications&quot;&gt;Medications&lt;/SelectItem&gt;&#10;                    &lt;/SelectContent&gt;&#10;                  &lt;/Select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div&gt;&#10;                  &lt;Label&gt;Price Range (GHâ‚µ)&lt;/Label&gt;&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;Input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Min&quot;&#10;                      value={searchParams.minPrice}&#10;                      onChange={(e) =&gt; handleSearchChange('minPrice', e.target.value)}&#10;                    /&gt;&#10;                    &lt;Input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Max&quot;&#10;                      value={searchParams.maxPrice}&#10;                      onChange={(e) =&gt; handleSearchChange('maxPrice', e.target.value)}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  onClick={() =&gt; {&#10;                    setSearchParams({&#10;                      search: '',&#10;                      category: '',&#10;                      sortBy: 'newest',&#10;                      minPrice: '',&#10;                      maxPrice: '',&#10;                    });&#10;                    setLocation('/marketplace');&#10;                  }}&#10;                  className=&quot;w-full&quot;&#10;                &gt;&#10;                  Clear Filters&#10;                &lt;/Button&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Main Content */}&#10;          &lt;div className=&quot;lg:w-3/4&quot;&gt;&#10;            {/* Header with sort */}&#10;            &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Marketplace&lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 mt-1&quot;&gt;&#10;                  {filteredAndSortedProducts.length} product(s) found&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;sort&quot; className=&quot;text-sm font-medium&quot;&gt;&#10;                  Sort by:&#10;                &lt;/Label&gt;&#10;                &lt;Select value={searchParams.sortBy} onValueChange={(value) =&gt; handleSearchChange('sortBy', value)}&gt;&#10;                  &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt;&#10;                    &lt;SelectValue /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;newest&quot;&gt;Newest First&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;price-low&quot;&gt;Price: Low to High&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;price-high&quot;&gt;Price: High to Low&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;name&quot;&gt;Name: A to Z&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Loading State */}&#10;            {isLoading &amp;&amp; (&#10;              &lt;div className=&quot;flex justify-center items-center py-12&quot;&gt;&#10;                &lt;Loader2 className=&quot;h-8 w-8 animate-spin&quot; /&gt;&#10;                &lt;span className=&quot;ml-2&quot;&gt;Loading products...&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Error State */}&#10;            {error &amp;&amp; (&#10;              &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                &lt;p className=&quot;text-red-600&quot;&gt;Failed to load products. Please try again.&lt;/p&gt;&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  onClick={() =&gt; window.location.reload()}&#10;                  className=&quot;mt-4&quot;&#10;                &gt;&#10;                  Retry&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Products Grid */}&#10;            {!isLoading &amp;&amp; !error &amp;&amp; (&#10;              &lt;&gt;&#10;                {filteredAndSortedProducts.length &gt; 0 ? (&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {filteredAndSortedProducts.map((product) =&gt; (&#10;                      &lt;ProductCard key={product.id} product={product} /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                    &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#10;                      &lt;Search className=&quot;h-16 w-16 mx-auto&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-700 mb-2&quot;&gt;&#10;                      No products found&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-500 mb-4&quot;&gt;&#10;                      {products.length === 0 ? 'No products available at the moment' : 'Try adjusting your search criteria or filters'}&#10;                    &lt;/p&gt;&#10;                    &lt;Button&#10;                      variant=&quot;outline&quot;&#10;                      onClick={() =&gt; {&#10;                        setSearchParams({&#10;                          search: '',&#10;                          category: '',&#10;                          sortBy: 'newest',&#10;                          minPrice: '',&#10;                          maxPrice: '',&#10;                        });&#10;                        setLocation('/marketplace');&#10;                      }}&#10;                    &gt;&#10;                      Clear all filters&#10;                    &lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { useState, useEffect } from 'react';&#10;import { useQuery } from '@tanstack/react-query';&#10;import { useLocation } from 'wouter';&#10;import { Header } from '@/components/header';&#10;import { ProductCard } from '@/components/product-card';&#10;import { Button } from '@/components/ui/button';&#10;import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';&#10;import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';&#10;import { Input } from '@/components/ui/input';&#10;import { Label } from '@/components/ui/label';&#10;import { Product } from '@shared/schema';&#10;import { Search, Filter, Loader2 } from 'lucide-react';&#10;&#10;export default function Marketplace() {&#10;  const [location, setLocation] = useLocation();&#10;  const [searchParams, setSearchParams] = useState({&#10;    search: '',&#10;    category: '',&#10;    sortBy: 'newest',&#10;    minPrice: '',&#10;    maxPrice: '',&#10;  });&#10;&#10;  // Parse URL parameters on component mount&#10;  useEffect(() =&gt; {&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    setSearchParams({&#10;      search: urlParams.get('search') || '',&#10;      category: urlParams.get('category') || '',&#10;      sortBy: urlParams.get('sortBy') || 'newest',&#10;      minPrice: urlParams.get('minPrice') || '',&#10;      maxPrice: urlParams.get('maxPrice') || '',&#10;    });&#10;  }, [location]);&#10;&#10;  const buildQueryParams = () =&gt; {&#10;    const params = new URLSearchParams();&#10;    if (searchParams.search) params.set('search', searchParams.search);&#10;    if (searchParams.category) params.set('category', searchParams.category);&#10;    return params.toString();&#10;  };&#10;&#10;  // Fixed React Query implementation&#10;  const { data: products = [], isLoading, error } = useQuery({&#10;    queryKey: ['products', buildQueryParams()],&#10;    queryFn: async () =&gt; {&#10;      const response = await fetch(`/api/products?${buildQueryParams()}`);&#10;      if (!response.ok) {&#10;        throw new Error(`HTTP error! status: ${response.status}`);&#10;      }&#10;      const data = await response.json();&#10;      return data as Product[];&#10;    },&#10;    staleTime: 5 * 60 * 1000, // 5 minutes&#10;  });&#10;&#10;  const handleSearchChange = (field: string, value: string) =&gt; {&#10;    const newParams = { ...searchParams, [field]: value };&#10;    setSearchParams(newParams);&#10;&#10;    // Update URL&#10;    const urlParams = new URLSearchParams();&#10;    Object.entries(newParams).forEach(([key, val]) =&gt; {&#10;      if (val) urlParams.set(key, val);&#10;    });&#10;&#10;    const newUrl = `/marketplace${urlParams.toString() ? `?${urlParams.toString()}` : ''}`;&#10;    setLocation(newUrl);&#10;  };&#10;&#10;  const filteredAndSortedProducts = products&#10;    .filter(product =&gt; {&#10;      // Only do client-side price filtering since server handles category and search&#10;      const matchesPrice = (!searchParams.minPrice || parseFloat(product.price) &gt;= parseFloat(searchParams.minPrice)) &amp;&amp;&#10;                          (!searchParams.maxPrice || parseFloat(product.price) &lt;= parseFloat(searchParams.maxPrice));&#10;      &#10;      return matchesPrice;&#10;    })&#10;    .sort((a, b) =&gt; {&#10;      switch (searchParams.sortBy) {&#10;        case 'price-low':&#10;          return parseFloat(a.price) - parseFloat(b.price);&#10;        case 'price-high':&#10;          return parseFloat(b.price) - parseFloat(a.price);&#10;        case 'name':&#10;          return a.name.localeCompare(b.name);&#10;        case 'newest':&#10;        default:&#10;          return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();&#10;      }&#10;    });&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;Header /&gt;&#10;&#10;      &lt;div className=&quot;container mx-auto px-4 py-8&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col lg:flex-row gap-8&quot;&gt;&#10;          {/* Sidebar Filters */}&#10;          &lt;div className=&quot;lg:w-1/4&quot;&gt;&#10;            &lt;Card className=&quot;sticky top-24&quot;&gt;&#10;              &lt;CardHeader&gt;&#10;                &lt;CardTitle className=&quot;flex items-center&quot;&gt;&#10;                  &lt;Filter className=&quot;w-5 h-5 mr-2&quot; /&gt;&#10;                  Filters&#10;                &lt;/CardTitle&gt;&#10;              &lt;/CardHeader&gt;&#10;              &lt;CardContent className=&quot;space-y-6&quot;&gt;&#10;                {/* Search */}&#10;                &lt;div&gt;&#10;                  &lt;Label htmlFor=&quot;search&quot;&gt;Search Products&lt;/Label&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;Search className=&quot;absolute left-3 top-3 h-4 w-4 text-gray-400&quot; /&gt;&#10;                    &lt;Input&#10;                      id=&quot;search&quot;&#10;                      type=&quot;text&quot;&#10;                      placeholder=&quot;Search products...&quot;&#10;                      value={searchParams.search}&#10;                      onChange={(e) =&gt; handleSearchChange('search', e.target.value)}&#10;                      className=&quot;pl-10&quot;&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter - FIXED VALUES */}&#10;                &lt;div&gt;&#10;                  &lt;Label&gt;Category&lt;/Label&gt;&#10;                  &lt;Select&#10;                    value={searchParams.category || 'all'}&#10;                    onValueChange={(value) =&gt; handleSearchChange('category', value === 'all' ? '' : value)}&#10;                  &gt;&#10;                    &lt;SelectTrigger&gt;&#10;                      &lt;SelectValue placeholder=&quot;All Categories&quot; /&gt;&#10;                    &lt;/SelectTrigger&gt;&#10;                    &lt;SelectContent&gt;&#10;                      &lt;SelectItem value=&quot;all&quot;&gt;All Categories&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;crops&quot;&gt;Crops&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;tools&quot;&gt;Tools&lt;/SelectItem&gt;&#10;                      &lt;SelectItem value=&quot;medications&quot;&gt;Medications&lt;/SelectItem&gt;&#10;                    &lt;/SelectContent&gt;&#10;                  &lt;/Select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Price Range */}&#10;                &lt;div&gt;&#10;                  &lt;Label&gt;Price Range (GHâ‚µ)&lt;/Label&gt;&#10;                  &lt;div className=&quot;flex gap-2&quot;&gt;&#10;                    &lt;Input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Min&quot;&#10;                      value={searchParams.minPrice}&#10;                      onChange={(e) =&gt; handleSearchChange('minPrice', e.target.value)}&#10;                    /&gt;&#10;                    &lt;Input&#10;                      type=&quot;number&quot;&#10;                      placeholder=&quot;Max&quot;&#10;                      value={searchParams.maxPrice}&#10;                      onChange={(e) =&gt; handleSearchChange('maxPrice', e.target.value)}&#10;                    /&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Clear Filters */}&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  onClick={() =&gt; {&#10;                    setSearchParams({&#10;                      search: '',&#10;                      category: '',&#10;                      sortBy: 'newest',&#10;                      minPrice: '',&#10;                      maxPrice: '',&#10;                    });&#10;                    setLocation('/marketplace');&#10;                  }}&#10;                  className=&quot;w-full&quot;&#10;                &gt;&#10;                  Clear Filters&#10;                &lt;/Button&gt;&#10;              &lt;/CardContent&gt;&#10;            &lt;/Card&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Main Content */}&#10;          &lt;div className=&quot;lg:w-3/4&quot;&gt;&#10;            {/* Header with sort */}&#10;            &lt;div className=&quot;flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4&quot;&gt;&#10;              &lt;div&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900&quot;&gt;Marketplace&lt;/h1&gt;&#10;                &lt;p className=&quot;text-gray-600 mt-1&quot;&gt;&#10;                  {filteredAndSortedProducts.length} product(s) found&#10;                &lt;/p&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;                &lt;Label htmlFor=&quot;sort&quot; className=&quot;text-sm font-medium&quot;&gt;&#10;                  Sort by:&#10;                &lt;/Label&gt;&#10;                &lt;Select value={searchParams.sortBy} onValueChange={(value) =&gt; handleSearchChange('sortBy', value)}&gt;&#10;                  &lt;SelectTrigger className=&quot;w-[180px]&quot;&gt;&#10;                    &lt;SelectValue /&gt;&#10;                  &lt;/SelectTrigger&gt;&#10;                  &lt;SelectContent&gt;&#10;                    &lt;SelectItem value=&quot;newest&quot;&gt;Newest First&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;price-low&quot;&gt;Price: Low to High&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;price-high&quot;&gt;Price: High to Low&lt;/SelectItem&gt;&#10;                    &lt;SelectItem value=&quot;name&quot;&gt;Name: A to Z&lt;/SelectItem&gt;&#10;                  &lt;/SelectContent&gt;&#10;                &lt;/Select&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Loading State */}&#10;            {isLoading &amp;&amp; (&#10;              &lt;div className=&quot;flex justify-center items-center py-12&quot;&gt;&#10;                &lt;Loader2 className=&quot;h-8 w-8 animate-spin&quot; /&gt;&#10;                &lt;span className=&quot;ml-2&quot;&gt;Loading products...&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Error State */}&#10;            {error &amp;&amp; (&#10;              &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                &lt;p className=&quot;text-red-600&quot;&gt;Failed to load products. Please try again.&lt;/p&gt;&#10;                &lt;Button&#10;                  variant=&quot;outline&quot;&#10;                  onClick={() =&gt; window.location.reload()}&#10;                  className=&quot;mt-4&quot;&#10;                &gt;&#10;                  Retry&#10;                &lt;/Button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Products Grid */}&#10;            {!isLoading &amp;&amp; !error &amp;&amp; (&#10;              &lt;&gt;&#10;                {filteredAndSortedProducts.length &gt; 0 ? (&#10;                  &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6&quot;&gt;&#10;                    {filteredAndSortedProducts.map((product) =&gt; (&#10;                      &lt;ProductCard key={product.id} product={product} /&gt;&#10;                    ))}&#10;                  &lt;/div&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                    &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#10;                      &lt;Search className=&quot;h-16 w-16 mx-auto&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;h3 className=&quot;text-xl font-semibold text-gray-700 mb-2&quot;&gt;&#10;                      No products found&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-500 mb-4&quot;&gt;&#10;                      {products.length === 0 ? 'No products available at the moment' : 'Try adjusting your search criteria or filters'}&#10;                    &lt;/p&gt;&#10;                    &lt;Button&#10;                      variant=&quot;outline&quot;&#10;                      onClick={() =&gt; {&#10;                        setSearchParams({&#10;                          search: '',&#10;                          category: '',&#10;                          sortBy: 'newest',&#10;                          minPrice: '',&#10;                          maxPrice: '',&#10;                        });&#10;                        setLocation('/marketplace');&#10;                      }}&#10;                    &gt;&#10;                      Clear all filters&#10;                    &lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;rest-express&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;license&quot;: &quot;MIT&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;NODE_ENV=development tsx server/index.ts&quot;,&#10;    &quot;build&quot;: &quot;vite build &amp;&amp; esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist&quot;,&#10;    &quot;start&quot;: &quot;NODE_ENV=production node dist/index.js&quot;,&#10;    &quot;check&quot;: &quot;tsc&quot;,&#10;    &quot;db:push&quot;: &quot;drizzle-kit push&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@hookform/resolvers&quot;: &quot;^3.10.0&quot;,&#10;    &quot;@jridgewell/trace-mapping&quot;: &quot;^0.3.25&quot;,&#10;    &quot;@neondatabase/serverless&quot;: &quot;^0.10.4&quot;,&#10;    &quot;@radix-ui/react-accordion&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-alert-dialog&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-aspect-ratio&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-avatar&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-checkbox&quot;: &quot;^1.1.5&quot;,&#10;    &quot;@radix-ui/react-collapsible&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-context-menu&quot;: &quot;^2.2.7&quot;,&#10;    &quot;@radix-ui/react-dialog&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-dropdown-menu&quot;: &quot;^2.1.7&quot;,&#10;    &quot;@radix-ui/react-hover-card&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-label&quot;: &quot;^2.1.3&quot;,&#10;    &quot;@radix-ui/react-menubar&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-navigation-menu&quot;: &quot;^1.2.6&quot;,&#10;    &quot;@radix-ui/react-popover&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-progress&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-radio-group&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-scroll-area&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-select&quot;: &quot;^2.1.7&quot;,&#10;    &quot;@radix-ui/react-separator&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-slider&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-slot&quot;: &quot;^1.2.0&quot;,&#10;    &quot;@radix-ui/react-switch&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-tabs&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-toast&quot;: &quot;^1.2.7&quot;,&#10;    &quot;@radix-ui/react-toggle&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-toggle-group&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-tooltip&quot;: &quot;^1.2.0&quot;,&#10;    &quot;@tanstack/react-query&quot;: &quot;^5.60.5&quot;,&#10;    &quot;@types/bcrypt&quot;: &quot;^6.0.0&quot;,&#10;    &quot;@types/jsonwebtoken&quot;: &quot;^9.0.10&quot;,&#10;    &quot;bcrypt&quot;: &quot;^6.0.0&quot;,&#10;    &quot;class-variance-authority&quot;: &quot;^0.7.1&quot;,&#10;    &quot;clsx&quot;: &quot;^2.1.1&quot;,&#10;    &quot;cmdk&quot;: &quot;^1.1.1&quot;,&#10;    &quot;connect-pg-simple&quot;: &quot;^10.0.0&quot;,&#10;    &quot;date-fns&quot;: &quot;^3.6.0&quot;,&#10;    &quot;drizzle-orm&quot;: &quot;^0.39.1&quot;,&#10;    &quot;drizzle-zod&quot;: &quot;^0.7.0&quot;,&#10;    &quot;embla-carousel-react&quot;: &quot;^8.6.0&quot;,&#10;    &quot;express&quot;: &quot;^4.21.2&quot;,&#10;    &quot;express-session&quot;: &quot;^1.18.1&quot;,&#10;    &quot;framer-motion&quot;: &quot;^11.13.1&quot;,&#10;    &quot;input-otp&quot;: &quot;^1.4.2&quot;,&#10;    &quot;jsonwebtoken&quot;: &quot;^9.0.2&quot;,&#10;    &quot;lucide-react&quot;: &quot;^0.453.0&quot;,&#10;    &quot;memorystore&quot;: &quot;^1.6.7&quot;,&#10;    &quot;next-themes&quot;: &quot;^0.4.6&quot;,&#10;    &quot;passport&quot;: &quot;^0.7.0&quot;,&#10;    &quot;passport-local&quot;: &quot;^1.0.0&quot;,&#10;    &quot;react&quot;: &quot;^18.3.1&quot;,&#10;    &quot;react-day-picker&quot;: &quot;^8.10.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.3.1&quot;,&#10;    &quot;react-hook-form&quot;: &quot;^7.55.0&quot;,&#10;    &quot;react-icons&quot;: &quot;^5.4.0&quot;,&#10;    &quot;react-resizable-panels&quot;: &quot;^2.1.7&quot;,&#10;    &quot;recharts&quot;: &quot;^2.15.2&quot;,&#10;    &quot;tailwind-merge&quot;: &quot;^2.6.0&quot;,&#10;    &quot;tailwindcss-animate&quot;: &quot;^1.0.7&quot;,&#10;    &quot;tw-animate-css&quot;: &quot;^1.2.5&quot;,&#10;    &quot;vaul&quot;: &quot;^1.1.2&quot;,&#10;    &quot;wouter&quot;: &quot;^3.3.5&quot;,&#10;    &quot;ws&quot;: &quot;^8.18.0&quot;,&#10;    &quot;zod&quot;: &quot;^3.24.2&quot;,&#10;    &quot;zod-validation-error&quot;: &quot;^3.4.0&quot;,&#10;    &quot;vite&quot;: &quot;^5.4.19&quot;,&#10;    &quot;esbuild&quot;: &quot;^0.25.0&quot;,&#10;    &quot;@vitejs/plugin-react&quot;: &quot;^4.3.2&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@replit/vite-plugin-cartographer&quot;: &quot;^0.2.8&quot;,&#10;    &quot;@replit/vite-plugin-runtime-error-modal&quot;: &quot;^0.0.3&quot;,&#10;    &quot;@tailwindcss/typography&quot;: &quot;^0.5.15&quot;,&#10;    &quot;@tailwindcss/vite&quot;: &quot;^4.1.3&quot;,&#10;    &quot;@types/connect-pg-simple&quot;: &quot;^7.0.3&quot;,&#10;    &quot;@types/express&quot;: &quot;4.17.21&quot;,&#10;    &quot;@types/express-session&quot;: &quot;^1.18.0&quot;,&#10;    &quot;@types/node&quot;: &quot;20.16.11&quot;,&#10;    &quot;@types/passport&quot;: &quot;^1.0.16&quot;,&#10;    &quot;@types/passport-local&quot;: &quot;^1.0.38&quot;,&#10;    &quot;@types/react&quot;: &quot;^18.3.11&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^18.3.1&quot;,&#10;    &quot;@types/ws&quot;: &quot;^8.5.13&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.20&quot;,&#10;    &quot;drizzle-kit&quot;: &quot;^0.30.4&quot;,&#10;    &quot;postcss&quot;: &quot;^8.4.47&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.4.17&quot;,&#10;    &quot;tsx&quot;: &quot;^4.19.1&quot;,&#10;    &quot;typescript&quot;: &quot;5.6.3&quot;&#10;  },&#10;  &quot;optionalDependencies&quot;: {&#10;    &quot;bufferutil&quot;: &quot;^4.0.8&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;rest-express&quot;,&#10;  &quot;version&quot;: &quot;1.0.0&quot;,&#10;  &quot;type&quot;: &quot;module&quot;,&#10;  &quot;license&quot;: &quot;MIT&quot;,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;NODE_ENV=development tsx server/index.ts&quot;,&#10;    &quot;build&quot;: &quot;vite build &amp;&amp; esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=dist&quot;,&#10;    &quot;start&quot;: &quot;NODE_ENV=production node dist/index.js&quot;,&#10;    &quot;check&quot;: &quot;tsc&quot;,&#10;    &quot;db:push&quot;: &quot;drizzle-kit push&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;@hookform/resolvers&quot;: &quot;^3.10.0&quot;,&#10;    &quot;@jridgewell/trace-mapping&quot;: &quot;^0.3.25&quot;,&#10;    &quot;@neondatabase/serverless&quot;: &quot;^0.10.4&quot;,&#10;    &quot;@radix-ui/react-accordion&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-alert-dialog&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-aspect-ratio&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-avatar&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-checkbox&quot;: &quot;^1.1.5&quot;,&#10;    &quot;@radix-ui/react-collapsible&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-context-menu&quot;: &quot;^2.2.7&quot;,&#10;    &quot;@radix-ui/react-dialog&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-dropdown-menu&quot;: &quot;^2.1.7&quot;,&#10;    &quot;@radix-ui/react-hover-card&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-label&quot;: &quot;^2.1.3&quot;,&#10;    &quot;@radix-ui/react-menubar&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-navigation-menu&quot;: &quot;^1.2.6&quot;,&#10;    &quot;@radix-ui/react-popover&quot;: &quot;^1.1.7&quot;,&#10;    &quot;@radix-ui/react-progress&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-radio-group&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-scroll-area&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-select&quot;: &quot;^2.1.7&quot;,&#10;    &quot;@radix-ui/react-separator&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-slider&quot;: &quot;^1.2.4&quot;,&#10;    &quot;@radix-ui/react-slot&quot;: &quot;^1.2.0&quot;,&#10;    &quot;@radix-ui/react-switch&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-tabs&quot;: &quot;^1.1.4&quot;,&#10;    &quot;@radix-ui/react-toast&quot;: &quot;^1.2.7&quot;,&#10;    &quot;@radix-ui/react-toggle&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-toggle-group&quot;: &quot;^1.1.3&quot;,&#10;    &quot;@radix-ui/react-tooltip&quot;: &quot;^1.2.0&quot;,&#10;    &quot;@tanstack/react-query&quot;: &quot;^5.60.5&quot;,&#10;    &quot;@types/bcrypt&quot;: &quot;^6.0.0&quot;,&#10;    &quot;@types/jsonwebtoken&quot;: &quot;^9.0.10&quot;,&#10;    &quot;bcrypt&quot;: &quot;^6.0.0&quot;,&#10;    &quot;class-variance-authority&quot;: &quot;^0.7.1&quot;,&#10;    &quot;clsx&quot;: &quot;^2.1.1&quot;,&#10;    &quot;cmdk&quot;: &quot;^1.1.1&quot;,&#10;    &quot;connect-pg-simple&quot;: &quot;^10.0.0&quot;,&#10;    &quot;date-fns&quot;: &quot;^3.6.0&quot;,&#10;    &quot;drizzle-orm&quot;: &quot;^0.39.1&quot;,&#10;    &quot;drizzle-zod&quot;: &quot;^0.7.0&quot;,&#10;    &quot;embla-carousel-react&quot;: &quot;^8.6.0&quot;,&#10;    &quot;express&quot;: &quot;^4.21.2&quot;,&#10;    &quot;express-session&quot;: &quot;^1.18.1&quot;,&#10;    &quot;framer-motion&quot;: &quot;^11.13.1&quot;,&#10;    &quot;input-otp&quot;: &quot;^1.4.2&quot;,&#10;    &quot;jsonwebtoken&quot;: &quot;^9.0.2&quot;,&#10;    &quot;lucide-react&quot;: &quot;^0.453.0&quot;,&#10;    &quot;memorystore&quot;: &quot;^1.6.7&quot;,&#10;    &quot;next-themes&quot;: &quot;^0.4.6&quot;,&#10;    &quot;passport&quot;: &quot;^0.7.0&quot;,&#10;    &quot;passport-local&quot;: &quot;^1.0.0&quot;,&#10;    &quot;react&quot;: &quot;^18.3.1&quot;,&#10;    &quot;react-day-picker&quot;: &quot;^8.10.1&quot;,&#10;    &quot;react-dom&quot;: &quot;^18.3.1&quot;,&#10;    &quot;react-hook-form&quot;: &quot;^7.55.0&quot;,&#10;    &quot;react-icons&quot;: &quot;^5.4.0&quot;,&#10;    &quot;react-resizable-panels&quot;: &quot;^2.1.7&quot;,&#10;    &quot;recharts&quot;: &quot;^2.15.2&quot;,&#10;    &quot;tailwind-merge&quot;: &quot;^2.6.0&quot;,&#10;    &quot;tailwindcss-animate&quot;: &quot;^1.0.7&quot;,&#10;    &quot;tw-animate-css&quot;: &quot;^1.2.5&quot;,&#10;    &quot;vaul&quot;: &quot;^1.1.2&quot;,&#10;    &quot;wouter&quot;: &quot;^3.3.5&quot;,&#10;    &quot;ws&quot;: &quot;^8.18.0&quot;,&#10;    &quot;zod&quot;: &quot;^3.24.2&quot;,&#10;    &quot;zod-validation-error&quot;: &quot;^3.4.0&quot;,&#10;    &quot;vite&quot;: &quot;^5.4.19&quot;,&#10;    &quot;esbuild&quot;: &quot;^0.25.0&quot;,&#10;    &quot;@vitejs/plugin-react&quot;: &quot;^4.3.2&quot;,&#10;    &quot;autoprefixer&quot;: &quot;^10.4.20&quot;,&#10;    &quot;postcss&quot;: &quot;^8.4.47&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^3.4.17&quot;,&#10;    &quot;@tailwindcss/typography&quot;: &quot;^0.5.15&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@replit/vite-plugin-cartographer&quot;: &quot;^0.2.8&quot;,&#10;    &quot;@replit/vite-plugin-runtime-error-modal&quot;: &quot;^0.0.3&quot;,&#10;    &quot;@tailwindcss/vite&quot;: &quot;^4.1.3&quot;,&#10;    &quot;@types/connect-pg-simple&quot;: &quot;^7.0.3&quot;,&#10;    &quot;@types/express&quot;: &quot;4.17.21&quot;,&#10;    &quot;@types/express-session&quot;: &quot;^1.18.0&quot;,&#10;    &quot;@types/node&quot;: &quot;20.16.11&quot;,&#10;    &quot;@types/passport&quot;: &quot;^1.0.16&quot;,&#10;    &quot;@types/passport-local&quot;: &quot;^1.0.38&quot;,&#10;    &quot;@types/react&quot;: &quot;^18.3.11&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^18.3.1&quot;,&#10;    &quot;@types/ws&quot;: &quot;^8.5.13&quot;,&#10;    &quot;drizzle-kit&quot;: &quot;^0.30.4&quot;,&#10;    &quot;tsx&quot;: &quot;^4.19.1&quot;,&#10;    &quot;typescript&quot;: &quot;5.6.3&quot;&#10;  },&#10;  &quot;optionalDependencies&quot;: {&#10;    &quot;bufferutil&quot;: &quot;^4.0.8&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/routes.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/routes.ts" />
              <option name="originalContent" value="import type { Express, Request, Response, NextFunction } from &quot;express&quot;;&#10;import { createServer, type Server } from &quot;http&quot;;&#10;import { storage } from &quot;./storage&quot;;&#10;import { insertUserSchema, insertProductSchema, insertMessageSchema } from &quot;@shared/schema&quot;;&#10;import bcrypt from &quot;bcrypt&quot;;&#10;import jwt from &quot;jsonwebtoken&quot;;&#10;&#10;const JWT_SECRET = process.env.JWT_SECRET || &quot;your-secret-key&quot;;&#10;&#10;// Extend Request type to include user&#10;declare global {&#10;  namespace Express {&#10;    interface Request {&#10;      user?: { id: string; email: string };&#10;    }&#10;  }&#10;}&#10;&#10;// Middleware to verify JWT token&#10;function authenticateToken(req: Request, res: Response, next: NextFunction) {&#10;  const authHeader = req.headers['authorization'];&#10;  const token = authHeader &amp;&amp; authHeader.split(' ')[1];&#10;&#10;  if (!token) {&#10;    return res.status(401).json({ message: 'Access token required' });&#10;  }&#10;&#10;  jwt.verify(token, JWT_SECRET, (err: jwt.JsonWebTokenError | null, user: any) =&gt; {&#10;    if (err) return res.status(403).json({ message: 'Invalid token' });&#10;    req.user = user as { id: string; email: string };&#10;    next();&#10;  });&#10;}&#10;&#10;// Weather API integration&#10;async function getWeatherData(location: string = &quot;Accra&quot;) {&#10;  const API_KEY = process.env.OPENWEATHER_API_KEY || &quot;demo_key&quot;;&#10;  try {&#10;    const response = await fetch(&#10;      `https://api.openweathermap.org/data/2.5/weather?q=${location},GH&amp;appid=${API_KEY}&amp;units=metric`&#10;    );&#10;    if (!response.ok) {&#10;      throw new Error('Weather API failed');&#10;    }&#10;    return await response.json();&#10;  } catch (error) {&#10;    // Return mock data if API fails&#10;    return {&#10;      main: { temp: 28, humidity: 72 },&#10;      weather: [{ main: &quot;Clear&quot;, description: &quot;sunny&quot; }],&#10;      wind: { speed: 4.2 }&#10;    };&#10;  }&#10;}&#10;&#10;export async function registerRoutes(app: Express): Promise&lt;Server&gt; {&#10;  &#10;  // Auth routes&#10;  app.post(&quot;/api/auth/register&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const userData = insertUserSchema.parse(req.body);&#10;      &#10;      // Check if user exists&#10;      const existingUser = await storage.getUserByEmail(userData.email);&#10;      if (existingUser) {&#10;        return res.status(400).json({ message: &quot;User already exists&quot; });&#10;      }&#10;      &#10;      // Hash password&#10;      const saltRounds = 10;&#10;      const hashedPassword = await bcrypt.hash(userData.password, saltRounds);&#10;      &#10;      const user = await storage.createUser({&#10;        ...userData,&#10;        password: hashedPassword,&#10;      });&#10;      &#10;      // Create JWT token&#10;      const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '24h' });&#10;      &#10;      const { password, ...userWithoutPassword } = user;&#10;      res.json({ user: userWithoutPassword, token });&#10;    } catch (error) {&#10;      console.error(&quot;Registration error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid user data&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/auth/login&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const { email, password } = req.body;&#10;      &#10;      const user = await storage.getUserByEmail(email);&#10;      if (!user) {&#10;        return res.status(401).json({ message: &quot;Invalid credentials&quot; });&#10;      }&#10;      &#10;      const validPassword = await bcrypt.compare(password, user.password);&#10;      if (!validPassword) {&#10;        return res.status(401).json({ message: &quot;Invalid credentials&quot; });&#10;      }&#10;      &#10;      const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '24h' });&#10;      &#10;      const { password: _, ...userWithoutPassword } = user;&#10;      res.json({ user: userWithoutPassword, token });&#10;    } catch (error) {&#10;      console.error(&quot;Login error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/auth/me&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const user = await storage.getUser(req.user.id);&#10;      if (!user) {&#10;        return res.status(404).json({ message: &quot;User not found&quot; });&#10;      }&#10;      &#10;      const { password, ...userWithoutPassword } = user;&#10;      res.json(userWithoutPassword);&#10;    } catch (error) {&#10;      console.error(&quot;Get user error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  // Product routes&#10;  app.get(&quot;/api/products&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const { category, search, sellerId } = req.query;&#10;      const products = await storage.getProducts({&#10;        category: category as string,&#10;        search: search as string,&#10;        sellerId: sellerId as string,&#10;      });&#10;      &#10;      res.json(products);&#10;    } catch (error) {&#10;      console.error(&quot;Get products error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/products/featured&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const products = await storage.getFeaturedProducts();&#10;      res.json(products);&#10;    } catch (error) {&#10;      console.error(&quot;Get featured products error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/products/:id&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const product = await storage.getProduct(req.params.id);&#10;      if (!product) {&#10;        return res.status(404).json({ message: &quot;Product not found&quot; });&#10;      }&#10;      &#10;      // Get seller info&#10;      const seller = await storage.getUser(product.sellerId);&#10;      if (!seller) {&#10;        return res.status(404).json({ message: &quot;Seller not found&quot; });&#10;      }&#10;      &#10;      const { password, ...sellerInfo } = seller;&#10;      res.json({ ...product, seller: sellerInfo });&#10;    } catch (error) {&#10;      console.error(&quot;Get product error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/products&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const productData = insertProductSchema.parse(req.body);&#10;      const product = await storage.createProduct(req.user.id, productData);&#10;      res.status(201).json(product);&#10;    } catch (error) {&#10;      console.error(&quot;Create product error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid product data&quot; });&#10;    }&#10;  });&#10;&#10;  app.put(&quot;/api/products/:id&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const updates = req.body;&#10;      const product = await storage.updateProduct(req.params.id, req.user.id, updates);&#10;      &#10;      if (!product) {&#10;        return res.status(404).json({ message: &quot;Product not found or access denied&quot; });&#10;      }&#10;      &#10;      res.json(product);&#10;    } catch (error) {&#10;      console.error(&quot;Update product error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid product data&quot; });&#10;    }&#10;  });&#10;&#10;  app.delete(&quot;/api/products/:id&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const success = await storage.deleteProduct(req.params.id, req.user.id);&#10;      &#10;      if (!success) {&#10;        return res.status(404).json({ message: &quot;Product not found or access denied&quot; });&#10;      }&#10;      &#10;      res.json({ message: &quot;Product deleted successfully&quot; });&#10;    } catch (error) {&#10;      console.error(&quot;Delete product error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  // Weather route&#10;  app.get(&quot;/api/weather&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const location = req.query.location as string || &quot;Accra&quot;;&#10;      const weatherData = await getWeatherData(location);&#10;      &#10;      res.json({&#10;        temperature: Math.round(weatherData.main.temp),&#10;        humidity: weatherData.main.humidity,&#10;        description: weatherData.weather[0].description,&#10;        windSpeed: Math.round(weatherData.wind.speed * 3.6), // Convert m/s to km/h&#10;        rainfall: 0, // Mock rainfall data&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Weather API error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Weather service unavailable&quot; });&#10;    }&#10;  });&#10;&#10;  // Message routes&#10;  app.get(&quot;/api/messages&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const messages = await storage.getMessages(req.user.id);&#10;      res.json(messages);&#10;    } catch (error) {&#10;      console.error(&quot;Get messages error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/messages&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const messageData = insertMessageSchema.parse(req.body);&#10;      const message = await storage.createMessage(req.user.id, messageData);&#10;      res.status(201).json(message);&#10;    } catch (error) {&#10;      console.error(&quot;Send message error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid message data&quot; });&#10;    }&#10;  });&#10;&#10;  // Get user stats&#10;  app.get(&quot;/api/stats&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const allUsers = Array.from(storage['users'].values());&#10;      const allProducts = Array.from(storage['products'].values());&#10;      &#10;      res.json({&#10;        users: allUsers.length,&#10;        products: allProducts.filter(p =&gt; p.active).length,&#10;        transactions: 8750, // Mock data&#10;        regions: 16 // Ghana has 16 regions&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Get stats error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  const httpServer = createServer(app);&#10;  return httpServer;&#10;}&#10;" />
              <option name="updatedContent" value="import type { Express, Request, Response, NextFunction } from &quot;express&quot;;&#10;import { createServer, type Server } from &quot;http&quot;;&#10;import { storage } from &quot;./storage&quot;;&#10;import { insertUserSchema, insertProductSchema, insertMessageSchema } from &quot;@shared/schema&quot;;&#10;import bcrypt from &quot;bcrypt&quot;;&#10;import jwt from &quot;jsonwebtoken&quot;;&#10;&#10;const JWT_SECRET = process.env.JWT_SECRET || &quot;your-secret-key&quot;;&#10;&#10;// Extend Request type to include user&#10;declare global {&#10;  namespace Express {&#10;    interface Request {&#10;      user?: { id: string; email: string };&#10;    }&#10;  }&#10;}&#10;&#10;// Middleware to verify JWT token&#10;function authenticateToken(req: Request, res: Response, next: NextFunction) {&#10;  const authHeader = req.headers['authorization'];&#10;  const token = authHeader &amp;&amp; authHeader.split(' ')[1];&#10;&#10;  if (!token) {&#10;    return res.status(401).json({ message: 'Access token required' });&#10;  }&#10;&#10;  jwt.verify(token, JWT_SECRET, (err: jwt.JsonWebTokenError | null, user: any) =&gt; {&#10;    if (err) return res.status(403).json({ message: 'Invalid token' });&#10;    req.user = user as { id: string; email: string };&#10;    next();&#10;  });&#10;}&#10;&#10;// Weather API integration&#10;async function getWeatherData(location: string = &quot;Accra&quot;) {&#10;  const API_KEY = process.env.OPENWEATHER_API_KEY || &quot;demo_key&quot;;&#10;  try {&#10;    const response = await fetch(&#10;      `https://api.openweathermap.org/data/2.5/weather?q=${location},GH&amp;appid=${API_KEY}&amp;units=metric`&#10;    );&#10;    if (!response.ok) {&#10;      throw new Error('Weather API failed');&#10;    }&#10;    return await response.json();&#10;  } catch (error) {&#10;    // Return mock data if API fails&#10;    return {&#10;      main: { temp: 28, humidity: 72 },&#10;      weather: [{ main: &quot;Clear&quot;, description: &quot;sunny&quot; }],&#10;      wind: { speed: 4.2 }&#10;    };&#10;  }&#10;}&#10;&#10;export async function registerRoutes(app: Express): Promise&lt;Server&gt; {&#10;  &#10;  // Auth routes&#10;  app.post(&quot;/api/auth/register&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const userData = insertUserSchema.parse(req.body);&#10;      &#10;      // Check if user exists&#10;      const existingUser = await storage.getUserByEmail(userData.email);&#10;      if (existingUser) {&#10;        return res.status(400).json({ message: &quot;User already exists&quot; });&#10;      }&#10;      &#10;      // Hash password&#10;      const saltRounds = 10;&#10;      const hashedPassword = await bcrypt.hash(userData.password, saltRounds);&#10;      &#10;      const user = await storage.createUser({&#10;        ...userData,&#10;        password: hashedPassword,&#10;      });&#10;      &#10;      // Create JWT token&#10;      const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '24h' });&#10;      &#10;      const { password, ...userWithoutPassword } = user;&#10;      res.json({ user: userWithoutPassword, token });&#10;    } catch (error) {&#10;      console.error(&quot;Registration error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid user data&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/auth/login&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const { email, password } = req.body;&#10;      &#10;      const user = await storage.getUserByEmail(email);&#10;      if (!user) {&#10;        return res.status(401).json({ message: &quot;Invalid credentials&quot; });&#10;      }&#10;      &#10;      const validPassword = await bcrypt.compare(password, user.password);&#10;      if (!validPassword) {&#10;        return res.status(401).json({ message: &quot;Invalid credentials&quot; });&#10;      }&#10;      &#10;      const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '24h' });&#10;      &#10;      const { password: _, ...userWithoutPassword } = user;&#10;      res.json({ user: userWithoutPassword, token });&#10;    } catch (error) {&#10;      console.error(&quot;Login error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/auth/me&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const user = await storage.getUser(req.user.id);&#10;      if (!user) {&#10;        return res.status(404).json({ message: &quot;User not found&quot; });&#10;      }&#10;      &#10;      const { password, ...userWithoutPassword } = user;&#10;      res.json(userWithoutPassword);&#10;    } catch (error) {&#10;      console.error(&quot;Get user error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  // Product routes&#10;  app.get(&quot;/api/products&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const { category, search, sellerId } = req.query;&#10;      const products = await storage.getProducts({&#10;        category: category as string,&#10;        search: search as string,&#10;        sellerId: sellerId as string,&#10;      });&#10;      &#10;      res.json(products);&#10;    } catch (error) {&#10;      console.error(&quot;Get products error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/products/featured&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const products = await storage.getFeaturedProducts();&#10;      res.json(products);&#10;    } catch (error) {&#10;      console.error(&quot;Get featured products error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.get(&quot;/api/products/:id&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const product = await storage.getProduct(req.params.id);&#10;      if (!product) {&#10;        return res.status(404).json({ message: &quot;Product not found&quot; });&#10;      }&#10;      &#10;      // Get seller info&#10;      const seller = await storage.getUser(product.sellerId);&#10;      if (!seller) {&#10;        return res.status(404).json({ message: &quot;Seller not found&quot; });&#10;      }&#10;      &#10;      const { password, ...sellerInfo } = seller;&#10;      res.json({ ...product, seller: sellerInfo });&#10;    } catch (error) {&#10;      console.error(&quot;Get product error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/products&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const productData = insertProductSchema.parse(req.body);&#10;      const product = await storage.createProduct(req.user.id, productData);&#10;      res.status(201).json(product);&#10;    } catch (error) {&#10;      console.error(&quot;Create product error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid product data&quot; });&#10;    }&#10;  });&#10;&#10;  app.put(&quot;/api/products/:id&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const updates = req.body;&#10;      const product = await storage.updateProduct(req.params.id, req.user.id, updates);&#10;      &#10;      if (!product) {&#10;        return res.status(404).json({ message: &quot;Product not found or access denied&quot; });&#10;      }&#10;      &#10;      res.json(product);&#10;    } catch (error) {&#10;      console.error(&quot;Update product error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid product data&quot; });&#10;    }&#10;  });&#10;&#10;  app.delete(&quot;/api/products/:id&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const success = await storage.deleteProduct(req.params.id, req.user.id);&#10;      &#10;      if (!success) {&#10;        return res.status(404).json({ message: &quot;Product not found or access denied&quot; });&#10;      }&#10;      &#10;      res.json({ message: &quot;Product deleted successfully&quot; });&#10;    } catch (error) {&#10;      console.error(&quot;Delete product error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  // Weather route&#10;  app.get(&quot;/api/weather&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const location = req.query.location as string || &quot;Accra&quot;;&#10;      const weatherData = await getWeatherData(location);&#10;      &#10;      res.json({&#10;        temperature: Math.round(weatherData.main.temp),&#10;        humidity: weatherData.main.humidity,&#10;        description: weatherData.weather[0].description,&#10;        windSpeed: Math.round(weatherData.wind.speed * 3.6), // Convert m/s to km/h&#10;        rainfall: 0, // Mock rainfall data&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Weather API error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Weather service unavailable&quot; });&#10;    }&#10;  });&#10;&#10;  // Message routes&#10;  app.get(&quot;/api/messages&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const messages = await storage.getMessages(req.user.id);&#10;      res.json(messages);&#10;    } catch (error) {&#10;      console.error(&quot;Get messages error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  app.post(&quot;/api/messages&quot;, authenticateToken, async (req, res) =&gt; {&#10;    try {&#10;      if (!req.user) {&#10;        return res.status(401).json({ message: &quot;User not authenticated&quot; });&#10;      }&#10;      &#10;      const messageData = insertMessageSchema.parse(req.body);&#10;      const message = await storage.createMessage(req.user.id, messageData);&#10;      res.status(201).json(message);&#10;    } catch (error) {&#10;      console.error(&quot;Send message error:&quot;, error);&#10;      res.status(400).json({ message: &quot;Invalid message data&quot; });&#10;    }&#10;  });&#10;&#10;  // Get user stats&#10;  app.get(&quot;/api/stats&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const allUsers = Array.from(storage['users'].values());&#10;      const allProducts = Array.from(storage['products'].values());&#10;      &#10;      res.json({&#10;        users: allUsers.length,&#10;        products: allProducts.filter(p =&gt; p.active).length,&#10;        transactions: 8750, // Mock data&#10;        regions: 16 // Ghana has 16 regions&#10;      });&#10;    } catch (error) {&#10;      console.error(&quot;Get stats error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  // Get trusted sellers (oldest users)&#10;  app.get(&quot;/api/users/trusted&quot;, async (req, res) =&gt; {&#10;    try {&#10;      const allUsers = Array.from(storage['users'].values())&#10;        .filter(user =&gt; user.accountType === 'farmer' &amp;&amp; user.verified)&#10;        .sort((a, b) =&gt; new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime())&#10;        .slice(0, 6); // Get top 6 oldest verified farmers&#10;      &#10;      // Remove password from response&#10;      const trustedSellers = allUsers.map(({ password, ...user }) =&gt; user);&#10;      &#10;      res.json(trustedSellers);&#10;    } catch (error) {&#10;      console.error(&quot;Get trusted sellers error:&quot;, error);&#10;      res.status(500).json({ message: &quot;Server error&quot; });&#10;    }&#10;  });&#10;&#10;  const httpServer = createServer(app);&#10;  return httpServer;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/server/storage.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/server/storage.ts" />
              <option name="originalContent" value="import { type User, type InsertUser, type Product, type InsertProduct, type Message, type InsertMessage } from &quot;@shared/schema&quot;;&#10;import { randomUUID } from &quot;crypto&quot;;&#10;&#10;export interface IStorage {&#10;  // User operations&#10;  getUser(id: string): Promise&lt;User | undefined&gt;;&#10;  getUserByEmail(email: string): Promise&lt;User | undefined&gt;;&#10;  createUser(user: InsertUser): Promise&lt;User&gt;;&#10;  updateUser(id: string, updates: Partial&lt;User&gt;): Promise&lt;User | undefined&gt;;&#10;  &#10;  // Product operations&#10;  getProducts(filters?: { category?: string; search?: string; sellerId?: string }): Promise&lt;Product[]&gt;;&#10;  getProduct(id: string): Promise&lt;Product | undefined&gt;;&#10;  createProduct(sellerId: string, product: InsertProduct): Promise&lt;Product&gt;;&#10;  updateProduct(id: string, sellerId: string, updates: Partial&lt;Product&gt;): Promise&lt;Product | undefined&gt;;&#10;  deleteProduct(id: string, sellerId: string): Promise&lt;boolean&gt;;&#10;  getFeaturedProducts(): Promise&lt;Product[]&gt;;&#10;  &#10;  // Message operations&#10;  getMessages(userId: string): Promise&lt;Message[]&gt;;&#10;  getConversation(userId1: string, userId2: string): Promise&lt;Message[]&gt;;&#10;  createMessage(senderId: string, message: InsertMessage): Promise&lt;Message&gt;;&#10;  markMessageRead(id: string, userId: string): Promise&lt;boolean&gt;;&#10;}&#10;&#10;export class MemStorage implements IStorage {&#10;  private users: Map&lt;string, User&gt;;&#10;  private products: Map&lt;string, Product&gt;;&#10;  private messages: Map&lt;string, Message&gt;;&#10;&#10;  constructor() {&#10;    this.users = new Map();&#10;    this.products = new Map();&#10;    this.messages = new Map();&#10;    &#10;    // Initialize with some sample data&#10;    this.initializeSampleData();&#10;  }&#10;&#10;  private initializeSampleData() {&#10;    // Sample users&#10;    const farmers = [&#10;      {&#10;        id: &quot;farmer1&quot;,&#10;        email: &quot;kwame@example.com&quot;,&#10;        password: &quot;$2b$10$hash1&quot;, // In real app, properly hash passwords&#10;        firstName: &quot;Kwame&quot;,&#10;        lastName: &quot;Asante&quot;,&#10;        accountType: &quot;farmer&quot; as const,&#10;        location: &quot;Kumasi, Ashanti Region&quot;,&#10;        phone: &quot;+233 24 123 4567&quot;,&#10;        verified: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;farmer2&quot;,&#10;        email: &quot;akosua@example.com&quot;,&#10;        password: &quot;$2b$10$hash2&quot;,&#10;        firstName: &quot;Akosua&quot;,&#10;        lastName: &quot;Mensah&quot;,&#10;        accountType: &quot;farmer&quot; as const,&#10;        location: &quot;Accra, Greater Accra&quot;,&#10;        phone: &quot;+233 24 234 5678&quot;,&#10;        verified: true,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;    &#10;    farmers.forEach(user =&gt; this.users.set(user.id, user));&#10;&#10;    // Sample products&#10;    const sampleProducts = [&#10;      {&#10;        id: &quot;prod1&quot;,&#10;        sellerId: &quot;farmer1&quot;,&#10;        name: &quot;Premium Tomatoes&quot;,&#10;        description: &quot;Fresh, organic tomatoes from Ashanti region farms. Perfect for cooking and salads.&quot;,&#10;        category: &quot;crops&quot; as const,&#10;        price: &quot;45.00&quot;,&#10;        unit: &quot;kg&quot;,&#10;        quantity: 100,&#10;        location: &quot;Kumasi&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: true,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;prod2&quot;,&#10;        sellerId: &quot;farmer2&quot;,&#10;        name: &quot;Small Tractor&quot;,&#10;        description: &quot;Reliable 25HP tractor perfect for small to medium farms. Well maintained.&quot;,&#10;        category: &quot;tools&quot; as const,&#10;        price: &quot;48000.00&quot;,&#10;        unit: &quot;unit&quot;,&#10;        quantity: 1,&#10;        location: &quot;Accra&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1625246333195-78d9c38ad449?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: true,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;prod3&quot;,&#10;        sellerId: &quot;farmer1&quot;,&#10;        name: &quot;Organic Fertilizer&quot;,&#10;        description: &quot;100% organic fertilizer made from compost. Great for all crop types.&quot;,&#10;        category: &quot;medications&quot; as const,&#10;        price: &quot;25.00&quot;,&#10;        unit: &quot;bag&quot;,&#10;        quantity: 50,&#10;        location: &quot;Kumasi&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: false,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;    &#10;    sampleProducts.forEach(product =&gt; this.products.set(product.id, product));&#10;&#10;    // Sample messages&#10;    const sampleMessages = [&#10;      {&#10;        id: &quot;msg1&quot;,&#10;        senderId: &quot;farmer2&quot;,&#10;        receiverId: &quot;farmer1&quot;,&#10;        productId: &quot;prod1&quot;,&#10;        content: &quot;Hi, I'm interested in your tomatoes. Are they still available?&quot;,&#10;        read: false,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;&#10;    sampleMessages.forEach(message =&gt; this.messages.set(message.id, message));&#10;  }&#10;&#10;  // User operations&#10;  async getUser(id: string): Promise&lt;User | undefined&gt; {&#10;    return this.users.get(id);&#10;  }&#10;&#10;  async getUserByEmail(email: string): Promise&lt;User | undefined&gt; {&#10;    return Array.from(this.users.values()).find(user =&gt; user.email === email);&#10;  }&#10;&#10;  async createUser(user: InsertUser): Promise&lt;User&gt; {&#10;    const newUser: User = {&#10;      id: randomUUID(),&#10;      ...user,&#10;      verified: false,&#10;      createdAt: new Date(),&#10;    };&#10;    this.users.set(newUser.id, newUser);&#10;    return newUser;&#10;  }&#10;&#10;  async updateUser(id: string, updates: Partial&lt;User&gt;): Promise&lt;User | undefined&gt; {&#10;    const user = this.users.get(id);&#10;    if (!user) return undefined;&#10;    &#10;    const updatedUser = { ...user, ...updates };&#10;    this.users.set(id, updatedUser);&#10;    return updatedUser;&#10;  }&#10;&#10;  // Product operations&#10;  async getProducts(filters?: { category?: string; search?: string; sellerId?: string }): Promise&lt;Product[]&gt; {&#10;    let products = Array.from(this.products.values()).filter(p =&gt; p.active);&#10;    &#10;    if (filters?.category) {&#10;      products = products.filter(p =&gt; p.category === filters.category);&#10;    }&#10;    &#10;    if (filters?.search) {&#10;      const search = filters.search.toLowerCase();&#10;      products = products.filter(p =&gt; &#10;        p.name.toLowerCase().includes(search) || &#10;        p.description.toLowerCase().includes(search)&#10;      );&#10;    }&#10;    &#10;    if (filters?.sellerId) {&#10;      products = products.filter(p =&gt; p.sellerId === filters.sellerId);&#10;    }&#10;    &#10;    return products.sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  async getProduct(id: string): Promise&lt;Product | undefined&gt; {&#10;    const product = this.products.get(id);&#10;    return product?.active ? product : undefined;&#10;  }&#10;&#10;  async createProduct(sellerId: string, product: InsertProduct): Promise&lt;Product&gt; {&#10;    const newProduct: Product = {&#10;      id: randomUUID(),&#10;      sellerId,&#10;      ...product,&#10;      featured: false,&#10;      active: true,&#10;      createdAt: new Date(),&#10;    };&#10;    this.products.set(newProduct.id, newProduct);&#10;    return newProduct;&#10;  }&#10;&#10;  async updateProduct(id: string, sellerId: string, updates: Partial&lt;Product&gt;): Promise&lt;Product | undefined&gt; {&#10;    const product = this.products.get(id);&#10;    if (!product || product.sellerId !== sellerId) return undefined;&#10;    &#10;    const updatedProduct = { ...product, ...updates };&#10;    this.products.set(id, updatedProduct);&#10;    return updatedProduct;&#10;  }&#10;&#10;  async deleteProduct(id: string, sellerId: string): Promise&lt;boolean&gt; {&#10;    const product = this.products.get(id);&#10;    if (!product || product.sellerId !== sellerId) return false;&#10;    &#10;    // Soft delete - mark as inactive&#10;    const updatedProduct = { ...product, active: false };&#10;    this.products.set(id, updatedProduct);&#10;    return true;&#10;  }&#10;&#10;  async getFeaturedProducts(): Promise&lt;Product[]&gt; {&#10;    return Array.from(this.products.values())&#10;      .filter(p =&gt; p.active &amp;&amp; p.featured)&#10;      .sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  // Message operations&#10;  async getMessages(userId: string): Promise&lt;Message[]&gt; {&#10;    return Array.from(this.messages.values())&#10;      .filter(m =&gt; m.senderId === userId || m.receiverId === userId)&#10;      .sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  async getConversation(userId1: string, userId2: string): Promise&lt;Message[]&gt; {&#10;    return Array.from(this.messages.values())&#10;      .filter(m =&gt; &#10;        (m.senderId === userId1 &amp;&amp; m.receiverId === userId2) ||&#10;        (m.senderId === userId2 &amp;&amp; m.receiverId === userId1)&#10;      )&#10;      .sort((a, b) =&gt; a.createdAt.getTime() - b.createdAt.getTime());&#10;  }&#10;&#10;  async createMessage(senderId: string, message: InsertMessage): Promise&lt;Message&gt; {&#10;    const newMessage: Message = {&#10;      id: randomUUID(),&#10;      senderId,&#10;      ...message,&#10;      read: false,&#10;      createdAt: new Date(),&#10;    };&#10;    this.messages.set(newMessage.id, newMessage);&#10;    return newMessage;&#10;  }&#10;&#10;  async markMessageRead(id: string, userId: string): Promise&lt;boolean&gt; {&#10;    const message = this.messages.get(id);&#10;    if (!message || message.receiverId !== userId) return false;&#10;    &#10;    const updatedMessage = { ...message, read: true };&#10;    this.messages.set(id, updatedMessage);&#10;    return true;&#10;  }&#10;}&#10;&#10;export const storage = new MemStorage();&#10;" />
              <option name="updatedContent" value="import { type User, type InsertUser, type Product, type InsertProduct, type Message, type InsertMessage } from &quot;@shared/schema&quot;;&#10;import { randomUUID } from &quot;node:crypto&quot;;&#10;&#10;export interface IStorage {&#10;  // User operations&#10;  getUser(id: string): Promise&lt;User | undefined&gt;;&#10;  getUserByEmail(email: string): Promise&lt;User | undefined&gt;;&#10;  createUser(user: InsertUser): Promise&lt;User&gt;;&#10;  updateUser(id: string, updates: Partial&lt;User&gt;): Promise&lt;User | undefined&gt;;&#10;  &#10;  // Product operations&#10;  getProducts(filters?: { category?: string; search?: string; sellerId?: string }): Promise&lt;Product[]&gt;;&#10;  getProduct(id: string): Promise&lt;Product | undefined&gt;;&#10;  createProduct(sellerId: string, product: InsertProduct): Promise&lt;Product&gt;;&#10;  updateProduct(id: string, sellerId: string, updates: Partial&lt;Product&gt;): Promise&lt;Product | undefined&gt;;&#10;  deleteProduct(id: string, sellerId: string): Promise&lt;boolean&gt;;&#10;  getFeaturedProducts(): Promise&lt;Product[]&gt;;&#10;  &#10;  // Message operations&#10;  getMessages(userId: string): Promise&lt;Message[]&gt;;&#10;  getConversation(userId1: string, userId2: string): Promise&lt;Message[]&gt;;&#10;  createMessage(senderId: string, message: InsertMessage): Promise&lt;Message&gt;;&#10;  markMessageRead(id: string, userId: string): Promise&lt;boolean&gt;;&#10;}&#10;&#10;export class MemStorage implements IStorage {&#10;  private users: Map&lt;string, User&gt;;&#10;  private products: Map&lt;string, Product&gt;;&#10;  private messages: Map&lt;string, Message&gt;;&#10;&#10;  constructor() {&#10;    this.users = new Map();&#10;    this.products = new Map();&#10;    this.messages = new Map();&#10;    &#10;    // Initialize with some sample data&#10;    this.initializeSampleData();&#10;  }&#10;&#10;  private initializeSampleData() {&#10;    // Sample users&#10;    const farmers = [&#10;      {&#10;        id: &quot;farmer1&quot;,&#10;        email: &quot;kwame@example.com&quot;,&#10;        password: &quot;$2b$10$hash1&quot;, // In real app, properly hash passwords&#10;        firstName: &quot;Kwame&quot;,&#10;        lastName: &quot;Asante&quot;,&#10;        accountType: &quot;farmer&quot; as const,&#10;        location: &quot;Kumasi, Ashanti Region&quot;,&#10;        phone: &quot;+233 24 123 4567&quot;,&#10;        verified: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;farmer2&quot;,&#10;        email: &quot;akosua@example.com&quot;,&#10;        password: &quot;$2b$10$hash2&quot;,&#10;        firstName: &quot;Akosua&quot;,&#10;        lastName: &quot;Mensah&quot;,&#10;        accountType: &quot;farmer&quot; as const,&#10;        location: &quot;Accra, Greater Accra&quot;,&#10;        phone: &quot;+233 24 234 5678&quot;,&#10;        verified: true,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;    &#10;    farmers.forEach(user =&gt; this.users.set(user.id, user));&#10;&#10;    // Sample products&#10;    const sampleProducts = [&#10;      {&#10;        id: &quot;prod1&quot;,&#10;        sellerId: &quot;farmer1&quot;,&#10;        name: &quot;Premium Tomatoes&quot;,&#10;        description: &quot;Fresh, organic tomatoes from Ashanti region farms. Perfect for cooking and salads.&quot;,&#10;        category: &quot;crops&quot; as const,&#10;        price: &quot;45.00&quot;,&#10;        unit: &quot;kg&quot;,&#10;        quantity: 100,&#10;        location: &quot;Kumasi&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1592924357228-91a4daadcfea?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: true,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;prod2&quot;,&#10;        sellerId: &quot;farmer2&quot;,&#10;        name: &quot;Small Tractor&quot;,&#10;        description: &quot;Reliable 25HP tractor perfect for small to medium farms. Well maintained.&quot;,&#10;        category: &quot;tools&quot; as const,&#10;        price: &quot;48000.00&quot;,&#10;        unit: &quot;unit&quot;,&#10;        quantity: 1,&#10;        location: &quot;Accra&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1625246333195-78d9c38ad449?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: true,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      },&#10;      {&#10;        id: &quot;prod3&quot;,&#10;        sellerId: &quot;farmer1&quot;,&#10;        name: &quot;Organic Fertilizer&quot;,&#10;        description: &quot;100% organic fertilizer made from compost. Great for all crop types.&quot;,&#10;        category: &quot;medications&quot; as const,&#10;        price: &quot;25.00&quot;,&#10;        unit: &quot;bag&quot;,&#10;        quantity: 50,&#10;        location: &quot;Kumasi&quot;,&#10;        imageUrl: &quot;https://images.unsplash.com/photo-1416879595882-3373a0480b5b?w=400&amp;h=300&amp;fit=crop&quot;,&#10;        featured: false,&#10;        active: true,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;    &#10;    sampleProducts.forEach(product =&gt; this.products.set(product.id, product));&#10;&#10;    // Sample messages&#10;    const sampleMessages = [&#10;      {&#10;        id: &quot;msg1&quot;,&#10;        senderId: &quot;farmer2&quot;,&#10;        receiverId: &quot;farmer1&quot;,&#10;        productId: &quot;prod1&quot;,&#10;        content: &quot;Hi, I'm interested in your tomatoes. Are they still available?&quot;,&#10;        read: false,&#10;        createdAt: new Date(),&#10;      }&#10;    ];&#10;&#10;    sampleMessages.forEach(message =&gt; this.messages.set(message.id, message));&#10;  }&#10;&#10;  // User operations&#10;  async getUser(id: string): Promise&lt;User | undefined&gt; {&#10;    return this.users.get(id);&#10;  }&#10;&#10;  async getUserByEmail(email: string): Promise&lt;User | undefined&gt; {&#10;    return Array.from(this.users.values()).find(user =&gt; user.email === email);&#10;  }&#10;&#10;  async createUser(user: InsertUser): Promise&lt;User&gt; {&#10;    const newUser: User = {&#10;      id: randomUUID(),&#10;      ...user,&#10;      verified: false,&#10;      createdAt: new Date(),&#10;    };&#10;    this.users.set(newUser.id, newUser);&#10;    return newUser;&#10;  }&#10;&#10;  async updateUser(id: string, updates: Partial&lt;User&gt;): Promise&lt;User | undefined&gt; {&#10;    const user = this.users.get(id);&#10;    if (!user) return undefined;&#10;    &#10;    const updatedUser = { ...user, ...updates };&#10;    this.users.set(id, updatedUser);&#10;    return updatedUser;&#10;  }&#10;&#10;  // Product operations&#10;  async getProducts(filters?: { category?: string; search?: string; sellerId?: string }): Promise&lt;Product[]&gt; {&#10;    let products = Array.from(this.products.values()).filter(p =&gt; p.active);&#10;    &#10;    if (filters?.category) {&#10;      products = products.filter(p =&gt; p.category === filters.category);&#10;    }&#10;    &#10;    if (filters?.search) {&#10;      const search = filters.search.toLowerCase();&#10;      products = products.filter(p =&gt; &#10;        p.name.toLowerCase().includes(search) || &#10;        p.description.toLowerCase().includes(search)&#10;      );&#10;    }&#10;    &#10;    if (filters?.sellerId) {&#10;      products = products.filter(p =&gt; p.sellerId === filters.sellerId);&#10;    }&#10;    &#10;    return products.sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  async getProduct(id: string): Promise&lt;Product | undefined&gt; {&#10;    const product = this.products.get(id);&#10;    return product?.active ? product : undefined;&#10;  }&#10;&#10;  async createProduct(sellerId: string, product: InsertProduct): Promise&lt;Product&gt; {&#10;    const newProduct: Product = {&#10;      id: randomUUID(),&#10;      sellerId,&#10;      ...product,&#10;      featured: false,&#10;      active: true,&#10;      createdAt: new Date(),&#10;    };&#10;    this.products.set(newProduct.id, newProduct);&#10;    return newProduct;&#10;  }&#10;&#10;  async updateProduct(id: string, sellerId: string, updates: Partial&lt;Product&gt;): Promise&lt;Product | undefined&gt; {&#10;    const product = this.products.get(id);&#10;    if (!product || product.sellerId !== sellerId) return undefined;&#10;    &#10;    const updatedProduct = { ...product, ...updates };&#10;    this.products.set(id, updatedProduct);&#10;    return updatedProduct;&#10;  }&#10;&#10;  async deleteProduct(id: string, sellerId: string): Promise&lt;boolean&gt; {&#10;    const product = this.products.get(id);&#10;    if (!product || product.sellerId !== sellerId) return false;&#10;    &#10;    // Soft delete - mark as inactive&#10;    const updatedProduct = { ...product, active: false };&#10;    this.products.set(id, updatedProduct);&#10;    return true;&#10;  }&#10;&#10;  async getFeaturedProducts(): Promise&lt;Product[]&gt; {&#10;    return Array.from(this.products.values())&#10;      .filter(p =&gt; p.active &amp;&amp; p.featured)&#10;      .sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  // Message operations&#10;  async getMessages(userId: string): Promise&lt;Message[]&gt; {&#10;    return Array.from(this.messages.values())&#10;      .filter(m =&gt; m.senderId === userId || m.receiverId === userId)&#10;      .sort((a, b) =&gt; b.createdAt.getTime() - a.createdAt.getTime());&#10;  }&#10;&#10;  async getConversation(userId1: string, userId2: string): Promise&lt;Message[]&gt; {&#10;    return Array.from(this.messages.values())&#10;      .filter(m =&gt; &#10;        (m.senderId === userId1 &amp;&amp; m.receiverId === userId2) ||&#10;        (m.senderId === userId2 &amp;&amp; m.receiverId === userId1)&#10;      )&#10;      .sort((a, b) =&gt; a.createdAt.getTime() - b.createdAt.getTime());&#10;  }&#10;&#10;  async createMessage(senderId: string, message: InsertMessage): Promise&lt;Message&gt; {&#10;    const newMessage: Message = {&#10;      id: randomUUID(),&#10;      senderId,&#10;      ...message,&#10;      read: false,&#10;      createdAt: new Date(),&#10;    };&#10;    this.messages.set(newMessage.id, newMessage);&#10;    return newMessage;&#10;  }&#10;&#10;  async markMessageRead(id: string, userId: string): Promise&lt;boolean&gt; {&#10;    const message = this.messages.get(id);&#10;    if (!message || message.receiverId !== userId) return false;&#10;    &#10;    const updatedMessage = { ...message, read: true };&#10;    this.messages.set(id, updatedMessage);&#10;    return true;&#10;  }&#10;}&#10;&#10;export const storage = new MemStorage();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/shared/schema.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/shared/schema.ts" />
              <option name="updatedContent" value="import { sql } from &quot;drizzle-orm&quot;;&#10;import { pgTable, text, varchar, decimal, integer, timestamp, boolean } from &quot;drizzle-orm/pg-core&quot;;&#10;import { createInsertSchema, createSelectSchema } from &quot;drizzle-zod&quot;;&#10;import { z } from &quot;zod&quot;;&#10;&#10;export const users = pgTable(&quot;users&quot;, {&#10;  id: varchar(&quot;id&quot;).primaryKey().default(sql`gen_random_uuid()`),&#10;  email: text(&quot;email&quot;).notNull().unique(),&#10;  password: text(&quot;password&quot;).notNull(),&#10;  firstName: text(&quot;first_name&quot;).notNull(),&#10;  lastName: text(&quot;last_name&quot;).notNull(),&#10;  accountType: text(&quot;account_type&quot;, { enum: [&quot;farmer&quot;, &quot;buyer&quot;] }).notNull(),&#10;  location: text(&quot;location&quot;),&#10;  phone: text(&quot;phone&quot;),&#10;  verified: boolean(&quot;verified&quot;).default(false),&#10;  createdAt: timestamp(&quot;created_at&quot;).defaultNow(),&#10;});&#10;&#10;export const products = pgTable(&quot;products&quot;, {&#10;  id: varchar(&quot;id&quot;).primaryKey().default(sql`gen_random_uuid()`),&#10;  sellerId: varchar(&quot;seller_id&quot;).notNull(),&#10;  name: text(&quot;name&quot;).notNull(),&#10;  description: text(&quot;description&quot;).notNull(),&#10;  category: text(&quot;category&quot;, { enum: [&quot;crops&quot;, &quot;tools&quot;, &quot;medications&quot;] }).notNull(),&#10;  price: decimal(&quot;price&quot;, { precision: 10, scale: 2 }).notNull(),&#10;  unit: text(&quot;unit&quot;).notNull(),&#10;  quantity: integer(&quot;quantity&quot;).notNull(),&#10;  location: text(&quot;location&quot;).notNull(),&#10;  imageUrl: text(&quot;image_url&quot;),&#10;  featured: boolean(&quot;featured&quot;).default(false),&#10;  active: boolean(&quot;active&quot;).default(true),&#10;  createdAt: timestamp(&quot;created_at&quot;).defaultNow(),&#10;});&#10;&#10;export const messages = pgTable(&quot;messages&quot;, {&#10;  id: varchar(&quot;id&quot;).primaryKey().default(sql`gen_random_uuid()`),&#10;  senderId: varchar(&quot;sender_id&quot;).notNull(),&#10;  receiverId: varchar(&quot;receiver_id&quot;).notNull(),&#10;  productId: varchar(&quot;product_id&quot;),&#10;  content: text(&quot;content&quot;).notNull(),&#10;  read: boolean(&quot;read&quot;).default(false),&#10;  createdAt: timestamp(&quot;created_at&quot;).defaultNow(),&#10;});&#10;&#10;// Create Zod schemas for validation&#10;export const insertUserSchema = createInsertSchema(users).pick({&#10;  email: true,&#10;  password: true,&#10;  firstName: true,&#10;  lastName: true,&#10;  accountType: true,&#10;  location: true,&#10;  phone: true,&#10;});&#10;&#10;export const insertProductSchema = createInsertSchema(products).pick({&#10;  name: true,&#10;  description: true,&#10;  category: true,&#10;  price: true,&#10;  unit: true,&#10;  quantity: true,&#10;  location: true,&#10;  imageUrl: true,&#10;});&#10;&#10;export const insertMessageSchema = createInsertSchema(messages).pick({&#10;  receiverId: true,&#10;  productId: true,&#10;  content: true,&#10;});&#10;&#10;// Type exports&#10;export type User = typeof users.$inferSelect;&#10;export type InsertUser = typeof users.$inferInsert;&#10;export type Product = typeof products.$inferSelect;&#10;export type InsertProduct = typeof products.$inferInsert;&#10;export type Message = typeof messages.$inferSelect;&#10;export type InsertMessage = typeof messages.$inferInsert;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vite.config.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vite.config.ts" />
              <option name="originalContent" value="import { defineConfig } from &quot;vite&quot;;&#10;import react from &quot;@vitejs/plugin-react&quot;;&#10;import path from &quot;path&quot;;&#10;&#10;export default defineConfig(async () =&gt; {&#10;  const plugins = [react()];&#10;&#10;  // Only load Replit plugins when running in Replit environment&#10;  if (process.env.REPL_ID !== undefined) {&#10;    try {&#10;      const runtimeErrorOverlay = await import(&quot;@replit/vite-plugin-runtime-error-modal&quot;);&#10;      plugins.push(runtimeErrorOverlay.default());&#10;&#10;      if (process.env.NODE_ENV !== &quot;production&quot;) {&#10;        const cartographer = await import(&quot;@replit/vite-plugin-cartographer&quot;);&#10;        plugins.push(cartographer.cartographer());&#10;      }&#10;    } catch (error) {&#10;      console.warn(&quot;Replit plugins not available, skipping...&quot;);&#10;    }&#10;  }&#10;&#10;  return {&#10;    plugins,&#10;    resolve: {&#10;      alias: {&#10;        &quot;@&quot;: path.resolve(import.meta.dirname, &quot;client&quot;, &quot;src&quot;),&#10;        &quot;@shared&quot;: path.resolve(import.meta.dirname, &quot;shared&quot;),&#10;        &quot;@assets&quot;: path.resolve(import.meta.dirname, &quot;attached_assets&quot;),&#10;      },&#10;    },&#10;    root: path.resolve(import.meta.dirname, &quot;client&quot;),&#10;    build: {&#10;      outDir: path.resolve(import.meta.dirname, &quot;dist/public&quot;),&#10;      emptyOutDir: true,&#10;    },&#10;    server: {&#10;      fs: {&#10;        strict: true,&#10;        deny: [&quot;**/.*&quot;],&#10;      },&#10;    },&#10;  };&#10;});&#10;" />
              <option name="updatedContent" value="import { defineConfig } from &quot;vite&quot;;&#10;import react from &quot;@vitejs/plugin-react&quot;;&#10;import path from &quot;path&quot;;&#10;&#10;export default defineConfig(async () =&gt; {&#10;  const plugins = [react()];&#10;&#10;  // Only load Replit plugins when running in Replit environment&#10;  if (process.env.REPL_ID !== undefined) {&#10;    try {&#10;      const runtimeErrorOverlay = await import(&quot;@replit/vite-plugin-runtime-error-modal&quot;);&#10;      plugins.push(runtimeErrorOverlay.default());&#10;&#10;      if (process.env.NODE_ENV !== &quot;production&quot;) {&#10;        const cartographer = await import(&quot;@replit/vite-plugin-cartographer&quot;);&#10;        plugins.push(cartographer.cartographer());&#10;      }&#10;    } catch (error) {&#10;      console.warn(&quot;Replit plugins not available, skipping...&quot;);&#10;    }&#10;  }&#10;&#10;  return {&#10;    plugins,&#10;    resolve: {&#10;      alias: {&#10;        &quot;@&quot;: path.resolve(import.meta.dirname, &quot;client&quot;, &quot;src&quot;),&#10;        &quot;@shared&quot;: path.resolve(import.meta.dirname, &quot;shared&quot;),&#10;        &quot;@assets&quot;: path.resolve(import.meta.dirname, &quot;attached_assets&quot;),&#10;      },&#10;    },&#10;    root: path.resolve(import.meta.dirname, &quot;client&quot;),&#10;    build: {&#10;      outDir: path.resolve(import.meta.dirname, &quot;dist/public&quot;),&#10;      emptyOutDir: true,&#10;      chunkSizeWarningLimit: 1000, // Increase chunk size warning limit to 1000kb&#10;      rollupOptions: {&#10;        output: {&#10;          manualChunks: {&#10;            vendor: ['react', 'react-dom'],&#10;            ui: ['@radix-ui/react-select', '@radix-ui/react-dialog', '@radix-ui/react-dropdown-menu'],&#10;            icons: ['lucide-react'],&#10;            utils: ['clsx', 'tailwind-merge']&#10;          }&#10;        }&#10;      }&#10;    },&#10;    server: {&#10;      fs: {&#10;        strict: true,&#10;        deny: [&quot;**/.*&quot;],&#10;      },&#10;    },&#10;  };&#10;});" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>